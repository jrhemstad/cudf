/* Generated by Cython 0.29.16 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "../../cpp/build/include/arrow/gpu/cuda_api.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/api.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/array/concatenate.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/builder.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/compute/api.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/csv/api.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/extension_type.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/io/api.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/ipc/api.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/json/options.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/json/reader.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/python/api.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/python/benchmark.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/python/common.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/python/config.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/python/extension_type.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/python/inference.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/python/init.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/python/platform.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/python/pyarrow.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/result.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/util/compression.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/util/key_value_metadata.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include/arrow/util/thread_pool.h",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/lib/python3.7/site-packages/numpy/core/include/numpy/halffloat.h"
        ],
        "extra_compile_args": [
            "-std=c++14"
        ],
        "include_dirs": [
            "../../cpp/include/cudf",
            "../../cpp/include",
            "../../cpp/build/include",
            "../../thirdparty/cub",
            "../../thirdparty/libcudacxx/include",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/include",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/lib/python3.7/site-packages/numpy/core/include",
            "/usr/local/cuda-10.2/include"
        ],
        "language": "c++",
        "libraries": [
            "cudf"
        ],
        "library_dirs": [
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/lib/python3.7/site-packages",
            "/home/jhemstad/RAPIDS/compose/rapids-compose/etc/conda/cuda_10.2/envs/rapids/lib"
        ],
        "name": "cudf._libxx.arrow._cuda",
        "sources": [
            "cudf/_libxx/arrow/_cuda.pyx"
        ]
    },
    "module_name": "cudf._libxx.arrow._cuda"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_16"
#define CYTHON_HEX_VERSION 0x001D10F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cudf___libxx__arrow___cuda
#define __PYX_HAVE_API__cudf___libxx__arrow___cuda
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <memory>
#include <string.h>
#include <string>
#include <utility>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <stdio.h>
#include "pythread.h"
#include "arrow/python/platform.h"
#include <Python.h>
#include "numpy/halffloat.h"
#include "arrow/api.h"
#include "arrow/result.h"
#include "arrow/python/common.h"
#include "arrow/util/key_value_metadata.h"
#include "arrow/builder.h"
#include "arrow/io/api.h"
#include "arrow/ipc/api.h"
#include "arrow/csv/api.h"
#include "arrow/json/options.h"
#include "arrow/json/reader.h"
#include "arrow/compute/api.h"
#include "arrow/python/api.h"
#include "arrow/python/init.h"
#include "arrow/python/pyarrow.h"
#include "arrow/python/config.h"
#include "arrow/python/inference.h"
#include "arrow/extension_type.h"
#include "arrow/python/extension_type.h"
#include "arrow/python/benchmark.h"
#include "arrow/util/compression.h"
#include "arrow/util/thread_pool.h"
#include "arrow/array/concatenate.h"
#include "arrow/gpu/cuda_api.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "cudf/_libxx/arrow/_cuda.pyx",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "lib.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/*--- Type declarations ---*/
struct __pyx_obj_7pyarrow_3lib_Message;
struct __pyx_obj_7pyarrow_3lib_MemoryPool;
struct __pyx_obj_7pyarrow_3lib_DataType;
struct __pyx_obj_7pyarrow_3lib_ListType;
struct __pyx_obj_7pyarrow_3lib_LargeListType;
struct __pyx_obj_7pyarrow_3lib_StructType;
struct __pyx_obj_7pyarrow_3lib_DictionaryMemo;
struct __pyx_obj_7pyarrow_3lib_DictionaryType;
struct __pyx_obj_7pyarrow_3lib_TimestampType;
struct __pyx_obj_7pyarrow_3lib_Time32Type;
struct __pyx_obj_7pyarrow_3lib_Time64Type;
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType;
struct __pyx_obj_7pyarrow_3lib_Decimal128Type;
struct __pyx_obj_7pyarrow_3lib_BaseExtensionType;
struct __pyx_obj_7pyarrow_3lib_ExtensionType;
struct __pyx_obj_7pyarrow_3lib_PyExtensionType;
struct __pyx_obj_7pyarrow_3lib_Field;
struct __pyx_obj_7pyarrow_3lib_Schema;
struct __pyx_obj_7pyarrow_3lib_Scalar;
struct __pyx_obj_7pyarrow_3lib_NAType;
struct __pyx_obj_7pyarrow_3lib_ArrayValue;
struct __pyx_obj_7pyarrow_3lib_ScalarValue;
struct __pyx_obj_7pyarrow_3lib_Int8Value;
struct __pyx_obj_7pyarrow_3lib_Int64Value;
struct __pyx_obj_7pyarrow_3lib_ListValue;
struct __pyx_obj_7pyarrow_3lib_LargeListValue;
struct __pyx_obj_7pyarrow_3lib_StructValue;
struct __pyx_obj_7pyarrow_3lib_UnionValue;
struct __pyx_obj_7pyarrow_3lib_StringValue;
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryValue;
struct __pyx_obj_7pyarrow_3lib__PandasConvertible;
struct __pyx_obj_7pyarrow_3lib_Array;
struct __pyx_obj_7pyarrow_3lib_Tensor;
struct __pyx_obj_7pyarrow_3lib_SparseTensorCSR;
struct __pyx_obj_7pyarrow_3lib_SparseTensorCOO;
struct __pyx_obj_7pyarrow_3lib_NullArray;
struct __pyx_obj_7pyarrow_3lib_BooleanArray;
struct __pyx_obj_7pyarrow_3lib_NumericArray;
struct __pyx_obj_7pyarrow_3lib_IntegerArray;
struct __pyx_obj_7pyarrow_3lib_FloatingPointArray;
struct __pyx_obj_7pyarrow_3lib_Int8Array;
struct __pyx_obj_7pyarrow_3lib_UInt8Array;
struct __pyx_obj_7pyarrow_3lib_Int16Array;
struct __pyx_obj_7pyarrow_3lib_UInt16Array;
struct __pyx_obj_7pyarrow_3lib_Int32Array;
struct __pyx_obj_7pyarrow_3lib_UInt32Array;
struct __pyx_obj_7pyarrow_3lib_Int64Array;
struct __pyx_obj_7pyarrow_3lib_UInt64Array;
struct __pyx_obj_7pyarrow_3lib_HalfFloatArray;
struct __pyx_obj_7pyarrow_3lib_FloatArray;
struct __pyx_obj_7pyarrow_3lib_DoubleArray;
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray;
struct __pyx_obj_7pyarrow_3lib_Decimal128Array;
struct __pyx_obj_7pyarrow_3lib_StructArray;
struct __pyx_obj_7pyarrow_3lib_ListArray;
struct __pyx_obj_7pyarrow_3lib_LargeListArray;
struct __pyx_obj_7pyarrow_3lib_UnionArray;
struct __pyx_obj_7pyarrow_3lib_StringArray;
struct __pyx_obj_7pyarrow_3lib_BinaryArray;
struct __pyx_obj_7pyarrow_3lib_DictionaryArray;
struct __pyx_obj_7pyarrow_3lib_ExtensionArray;
struct __pyx_obj_7pyarrow_3lib_ChunkedArray;
struct __pyx_obj_7pyarrow_3lib_Table;
struct __pyx_obj_7pyarrow_3lib_RecordBatch;
struct __pyx_obj_7pyarrow_3lib_Buffer;
struct __pyx_obj_7pyarrow_3lib_ResizableBuffer;
struct __pyx_obj_7pyarrow_3lib_NativeFile;
struct __pyx_obj_7pyarrow_3lib_BufferedInputStream;
struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream;
struct __pyx_obj_7pyarrow_3lib_CompressedInputStream;
struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream;
struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter;
struct __pyx_obj_7pyarrow_3lib__CRecordBatchReader;
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context;
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle;
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer;
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer;
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader;
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter;
struct __pyx_opt_args_7pyarrow_3lib_ensure_type;

/* "pyarrow/lib.pxd":494
 * 
 * # Default is allow_none=False
 * cdef DataType ensure_type(object type, c_bool allow_none=*)             # <<<<<<<<<<<<<<
 * 
 * cdef shared_ptr[CKeyValueMetadata] pyarrow_unwrap_metadata(object meta)
 */
struct __pyx_opt_args_7pyarrow_3lib_ensure_type {
  int __pyx_n;
  bool allow_none;
};

/* "pyarrow/lib.pxd":36
 * cdef int check_status(const CStatus& status) nogil except -1
 * 
 * cdef class Message:             # <<<<<<<<<<<<<<
 *     cdef:
 *         unique_ptr[CMessage] message
 */
struct __pyx_obj_7pyarrow_3lib_Message {
  PyObject_HEAD
  std::unique_ptr< arrow::ipc::Message>  message;
};


/* "pyarrow/lib.pxd":41
 * 
 * 
 * cdef class MemoryPool:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CMemoryPool* pool
 */
struct __pyx_obj_7pyarrow_3lib_MemoryPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool *__pyx_vtab;
   arrow::MemoryPool *pool;
};


/* "pyarrow/lib.pxd":51
 * 
 * 
 * cdef class DataType:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CDataType] sp_type
 */
struct __pyx_obj_7pyarrow_3lib_DataType {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType *__pyx_vtab;
  std::shared_ptr< arrow::DataType>  sp_type;
   arrow::DataType *type;
  PyObject *pep3118_format;
  PyObject *__weakref__;
};


/* "pyarrow/lib.pxd":62
 * 
 * 
 * cdef class ListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CListType* list_type
 */
struct __pyx_obj_7pyarrow_3lib_ListType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::ListType const *list_type;
};


/* "pyarrow/lib.pxd":67
 * 
 * 
 * cdef class LargeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CLargeListType* list_type
 */
struct __pyx_obj_7pyarrow_3lib_LargeListType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::LargeListType const *list_type;
};


/* "pyarrow/lib.pxd":72
 * 
 * 
 * cdef class StructType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CStructType* struct_type
 */
struct __pyx_obj_7pyarrow_3lib_StructType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::StructType const *struct_type;
};


/* "pyarrow/lib.pxd":80
 * 
 * 
 * cdef class DictionaryMemo:             # <<<<<<<<<<<<<<
 *     cdef:
 *         # Even though the CDictionaryMemo instance is private, we allocate
 */
struct __pyx_obj_7pyarrow_3lib_DictionaryMemo {
  PyObject_HEAD
  std::shared_ptr< arrow::ipc::DictionaryMemo>  sp_memo;
   arrow::ipc::DictionaryMemo *memo;
};


/* "pyarrow/lib.pxd":88
 * 
 * 
 * cdef class DictionaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDictionaryType* dict_type
 */
struct __pyx_obj_7pyarrow_3lib_DictionaryType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::DictionaryType const *dict_type;
};


/* "pyarrow/lib.pxd":93
 * 
 * 
 * cdef class TimestampType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTimestampType* ts_type
 */
struct __pyx_obj_7pyarrow_3lib_TimestampType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::TimestampType const *ts_type;
};


/* "pyarrow/lib.pxd":98
 * 
 * 
 * cdef class Time32Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime32Type* time_type
 */
struct __pyx_obj_7pyarrow_3lib_Time32Type {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::Time32Type const *time_type;
};


/* "pyarrow/lib.pxd":103
 * 
 * 
 * cdef class Time64Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime64Type* time_type
 */
struct __pyx_obj_7pyarrow_3lib_Time64Type {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::Time64Type const *time_type;
};


/* "pyarrow/lib.pxd":108
 * 
 * 
 * cdef class FixedSizeBinaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeBinaryType* fixed_size_binary_type
 */
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::FixedSizeBinaryType const *fixed_size_binary_type;
};


/* "pyarrow/lib.pxd":113
 * 
 * 
 * cdef class Decimal128Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal128Type* decimal128_type
 */
struct __pyx_obj_7pyarrow_3lib_Decimal128Type {
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;
   arrow::Decimal128Type const *decimal128_type;
};


/* "pyarrow/lib.pxd":118
 * 
 * 
 * cdef class BaseExtensionType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CExtensionType* ext_type
 */
struct __pyx_obj_7pyarrow_3lib_BaseExtensionType {
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;
   arrow::ExtensionType const *ext_type;
};


/* "pyarrow/lib.pxd":123
 * 
 * 
 * cdef class ExtensionType(BaseExtensionType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CPyExtensionType* cpy_ext_type
 */
struct __pyx_obj_7pyarrow_3lib_ExtensionType {
  struct __pyx_obj_7pyarrow_3lib_BaseExtensionType __pyx_base;
   arrow::py::PyExtensionType const *cpy_ext_type;
};


/* "pyarrow/lib.pxd":128
 * 
 * 
 * cdef class PyExtensionType(ExtensionType):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_PyExtensionType {
  struct __pyx_obj_7pyarrow_3lib_ExtensionType __pyx_base;
};


/* "pyarrow/lib.pxd":132
 * 
 * 
 * cdef class Field:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CField] sp_field
 */
struct __pyx_obj_7pyarrow_3lib_Field {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_Field *__pyx_vtab;
  std::shared_ptr< arrow::Field>  sp_field;
   arrow::Field *field;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":143
 * 
 * 
 * cdef class Schema:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSchema] sp_schema
 */
struct __pyx_obj_7pyarrow_3lib_Schema {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_Schema *__pyx_vtab;
  std::shared_ptr< arrow::Schema>  sp_schema;
   arrow::Schema *schema;
};


/* "pyarrow/lib.pxd":152
 * 
 * 
 * cdef class Scalar:             # <<<<<<<<<<<<<<
 *     cdef readonly:
 *         DataType type
 */
struct __pyx_obj_7pyarrow_3lib_Scalar {
  PyObject_HEAD
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":157
 * 
 * 
 * cdef class NAType(Scalar):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_NAType {
  struct __pyx_obj_7pyarrow_3lib_Scalar __pyx_base;
};


/* "pyarrow/lib.pxd":161
 * 
 * 
 * cdef class ArrayValue(Scalar):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArray] sp_array
 */
struct __pyx_obj_7pyarrow_3lib_ArrayValue {
  struct __pyx_obj_7pyarrow_3lib_Scalar __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue *__pyx_vtab;
  std::shared_ptr< arrow::Array>  sp_array;
  int64_t index;
};


/* "pyarrow/lib.pxd":171
 *     cdef void _set_array(self, const shared_ptr[CArray]& sp_array)
 * 
 * cdef class ScalarValue(Scalar):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CScalar] sp_scalar
 */
struct __pyx_obj_7pyarrow_3lib_ScalarValue {
  struct __pyx_obj_7pyarrow_3lib_Scalar __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_ScalarValue *__pyx_vtab;
  std::shared_ptr< arrow::Scalar>  sp_scalar;
};


/* "pyarrow/lib.pxd":177
 *     cdef void init(self, const shared_ptr[CScalar]& sp_scalar)
 * 
 * cdef class Int8Value(ArrayValue):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int8Value {
  struct __pyx_obj_7pyarrow_3lib_ArrayValue __pyx_base;
};


/* "pyarrow/lib.pxd":181
 * 
 * 
 * cdef class Int64Value(ArrayValue):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int64Value {
  struct __pyx_obj_7pyarrow_3lib_ArrayValue __pyx_base;
};


/* "pyarrow/lib.pxd":185
 * 
 * 
 * cdef class ListValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     cdef readonly:
 *         DataType value_type
 */
struct __pyx_obj_7pyarrow_3lib_ListValue {
  struct __pyx_obj_7pyarrow_3lib_ArrayValue __pyx_base;
  struct __pyx_obj_7pyarrow_3lib_DataType *value_type;
   arrow::ListArray *ap;
};


/* "pyarrow/lib.pxd":196
 * 
 * 
 * cdef class LargeListValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     cdef readonly:
 *         DataType value_type
 */
struct __pyx_obj_7pyarrow_3lib_LargeListValue {
  struct __pyx_obj_7pyarrow_3lib_ArrayValue __pyx_base;
  struct __pyx_obj_7pyarrow_3lib_DataType *value_type;
   arrow::LargeListArray *ap;
};


/* "pyarrow/lib.pxd":207
 * 
 * 
 * cdef class StructValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CStructArray* ap
 */
struct __pyx_obj_7pyarrow_3lib_StructValue {
  struct __pyx_obj_7pyarrow_3lib_ArrayValue __pyx_base;
   arrow::StructArray *ap;
};


/* "pyarrow/lib.pxd":212
 * 
 * 
 * cdef class UnionValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CUnionArray* ap
 */
struct __pyx_obj_7pyarrow_3lib_UnionValue {
  struct __pyx_obj_7pyarrow_3lib_ArrayValue __pyx_base;
   arrow::UnionArray *ap;
  PyObject *value_types;
};


/* "pyarrow/lib.pxd":220
 * 
 * 
 * cdef class StringValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_StringValue {
  struct __pyx_obj_7pyarrow_3lib_ArrayValue __pyx_base;
};


/* "pyarrow/lib.pxd":224
 * 
 * 
 * cdef class FixedSizeBinaryValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryValue {
  struct __pyx_obj_7pyarrow_3lib_ArrayValue __pyx_base;
};


/* "pyarrow/lib.pxd":228
 * 
 * 
 * cdef class _PandasConvertible:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib__PandasConvertible {
  PyObject_HEAD
};


/* "pyarrow/lib.pxd":232
 * 
 * 
 * cdef class Array(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArray] sp_array
 */
struct __pyx_obj_7pyarrow_3lib_Array {
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Array *__pyx_vtab;
  std::shared_ptr< arrow::Array>  sp_array;
   arrow::Array *ap;
  PyObject *__weakref__;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
  PyObject *_name;
};


/* "pyarrow/lib.pxd":248
 * 
 * 
 * cdef class Tensor:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTensor] sp_tensor
 */
struct __pyx_obj_7pyarrow_3lib_Tensor {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_Tensor *__pyx_vtab;
  std::shared_ptr< arrow::Tensor>  sp_tensor;
   arrow::Tensor *tp;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":259
 * 
 * 
 * cdef class SparseTensorCSR:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseTensorCSR] sp_sparse_tensor
 */
struct __pyx_obj_7pyarrow_3lib_SparseTensorCSR {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseTensorCSR *__pyx_vtab;
  std::shared_ptr< arrow::SparseTensorCSR>  sp_sparse_tensor;
   arrow::SparseTensorCSR *stp;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":270
 * 
 * 
 * cdef class SparseTensorCOO:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseTensorCOO] sp_sparse_tensor
 */
struct __pyx_obj_7pyarrow_3lib_SparseTensorCOO {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseTensorCOO *__pyx_vtab;
  std::shared_ptr< arrow::SparseTensorCOO>  sp_sparse_tensor;
   arrow::SparseTensorCOO *stp;
  struct __pyx_obj_7pyarrow_3lib_DataType *type;
};


/* "pyarrow/lib.pxd":281
 * 
 * 
 * cdef class NullArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_NullArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":285
 * 
 * 
 * cdef class BooleanArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_BooleanArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":289
 * 
 * 
 * cdef class NumericArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_NumericArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":293
 * 
 * 
 * cdef class IntegerArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_IntegerArray {
  struct __pyx_obj_7pyarrow_3lib_NumericArray __pyx_base;
};


/* "pyarrow/lib.pxd":297
 * 
 * 
 * cdef class FloatingPointArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_FloatingPointArray {
  struct __pyx_obj_7pyarrow_3lib_NumericArray __pyx_base;
};


/* "pyarrow/lib.pxd":301
 * 
 * 
 * cdef class Int8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int8Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":305
 * 
 * 
 * cdef class UInt8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UInt8Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":309
 * 
 * 
 * cdef class Int16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int16Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":313
 * 
 * 
 * cdef class UInt16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UInt16Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":317
 * 
 * 
 * cdef class Int32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int32Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":321
 * 
 * 
 * cdef class UInt32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UInt32Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":325
 * 
 * 
 * cdef class Int64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Int64Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":329
 * 
 * 
 * cdef class UInt64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UInt64Array {
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;
};


/* "pyarrow/lib.pxd":333
 * 
 * 
 * cdef class HalfFloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_HalfFloatArray {
  struct __pyx_obj_7pyarrow_3lib_FloatingPointArray __pyx_base;
};


/* "pyarrow/lib.pxd":337
 * 
 * 
 * cdef class FloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_FloatArray {
  struct __pyx_obj_7pyarrow_3lib_FloatingPointArray __pyx_base;
};


/* "pyarrow/lib.pxd":341
 * 
 * 
 * cdef class DoubleArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_DoubleArray {
  struct __pyx_obj_7pyarrow_3lib_FloatingPointArray __pyx_base;
};


/* "pyarrow/lib.pxd":345
 * 
 * 
 * cdef class FixedSizeBinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":349
 * 
 * 
 * cdef class Decimal128Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_Decimal128Array {
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;
};


/* "pyarrow/lib.pxd":353
 * 
 * 
 * cdef class StructArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_StructArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":357
 * 
 * 
 * cdef class ListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_ListArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":361
 * 
 * 
 * cdef class LargeListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_LargeListArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":365
 * 
 * 
 * cdef class UnionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_UnionArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":369
 * 
 * 
 * cdef class StringArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_StringArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":373
 * 
 * 
 * cdef class BinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_BinaryArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":377
 * 
 * 
 * cdef class DictionaryArray(Array):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _indices, _dictionary
 */
struct __pyx_obj_7pyarrow_3lib_DictionaryArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
  PyObject *_indices;
  PyObject *_dictionary;
};


/* "pyarrow/lib.pxd":382
 * 
 * 
 * cdef class ExtensionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_ExtensionArray {
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;
};


/* "pyarrow/lib.pxd":392
 * 
 * 
 * cdef class ChunkedArray(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CChunkedArray] sp_chunked_array
 */
struct __pyx_obj_7pyarrow_3lib_ChunkedArray {
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray *__pyx_vtab;
  std::shared_ptr< arrow::ChunkedArray>  sp_chunked_array;
   arrow::ChunkedArray *chunked_array;
  PyObject *_name;
};


/* "pyarrow/lib.pxd":405
 * 
 * 
 * cdef class Table(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTable] sp_table
 */
struct __pyx_obj_7pyarrow_3lib_Table {
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_Table *__pyx_vtab;
  std::shared_ptr< arrow::Table>  sp_table;
   arrow::Table *table;
};


/* "pyarrow/lib.pxd":413
 * 
 * 
 * cdef class RecordBatch(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatch] sp_batch
 */
struct __pyx_obj_7pyarrow_3lib_RecordBatch {
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;
  struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch *__pyx_vtab;
  std::shared_ptr< arrow::RecordBatch>  sp_batch;
   arrow::RecordBatch *batch;
  struct __pyx_obj_7pyarrow_3lib_Schema *_schema;
};


/* "pyarrow/lib.pxd":422
 * 
 * 
 * cdef class Buffer:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CBuffer] buffer
 */
struct __pyx_obj_7pyarrow_3lib_Buffer {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_Buffer *__pyx_vtab;
  std::shared_ptr< arrow::Buffer>  buffer;
  Py_ssize_t shape[1];
  Py_ssize_t strides[1];
};


/* "pyarrow/lib.pxd":432
 * 
 * 
 * cdef class ResizableBuffer(Buffer):             # <<<<<<<<<<<<<<
 * 
 *     cdef void init_rz(self, const shared_ptr[CResizableBuffer]& buffer)
 */
struct __pyx_obj_7pyarrow_3lib_ResizableBuffer {
  struct __pyx_obj_7pyarrow_3lib_Buffer __pyx_base;
};


/* "pyarrow/lib.pxd":437
 * 
 * 
 * cdef class NativeFile:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[InputStream] input_stream
 */
struct __pyx_obj_7pyarrow_3lib_NativeFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile *__pyx_vtab;
  std::shared_ptr<arrow::io::InputStream>  input_stream;
  std::shared_ptr<arrow::io::RandomAccessFile>  random_access;
  std::shared_ptr<arrow::io::OutputStream>  output_stream;
  int is_readable;
  int is_writable;
  int is_seekable;
  int own_file;
  PyObject *__weakref__;
};


/* "pyarrow/lib.pxd":461
 * 
 * 
 * cdef class BufferedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_BufferedInputStream {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
};


/* "pyarrow/lib.pxd":465
 * 
 * 
 * cdef class BufferedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
};


/* "pyarrow/lib.pxd":469
 * 
 * 
 * cdef class CompressedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_CompressedInputStream {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
};


/* "pyarrow/lib.pxd":473
 * 
 * 
 * cdef class CompressedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
};


/* "pyarrow/lib.pxd":477
 * 
 * 
 * cdef class _CRecordBatchWriter:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatchWriter] writer
 */
struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter {
  PyObject_HEAD
  std::shared_ptr< arrow::ipc::RecordBatchWriter>  writer;
};


/* "pyarrow/lib.pxd":482
 * 
 * 
 * cdef class _CRecordBatchReader:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatchReader] reader
 */
struct __pyx_obj_7pyarrow_3lib__CRecordBatchReader {
  PyObject_HEAD
  std::shared_ptr< arrow::RecordBatchReader>  reader;
};


/* "cudf/_libxx/arrow/_cuda.pxd":29
 * 
 * 
 * cdef class Context:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CCudaContext] context
 */
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_vtab;
  std::shared_ptr< arrow::cuda::CudaContext>  context;
  int device_number;
};


/* "cudf/_libxx/arrow/_cuda.pxd":37
 * 
 * 
 * cdef class IpcMemHandle:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CCudaIpcMemHandle] handle
 */
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_vtab;
  std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  handle;
};


/* "cudf/_libxx/arrow/_cuda.pxd":44
 * 
 * 
 * cdef class CudaBuffer(Buffer):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CCudaBuffer] cuda_buffer
 */
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer {
  struct __pyx_obj_7pyarrow_3lib_Buffer __pyx_base;
  std::shared_ptr< arrow::cuda::CudaBuffer>  cuda_buffer;
  PyObject *base;
};


/* "cudf/_libxx/arrow/_cuda.pxd":54
 * 
 * 
 * cdef class HostBuffer(Buffer):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CCudaHostBuffer] host_buffer
 */
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer {
  struct __pyx_obj_7pyarrow_3lib_Buffer __pyx_base;
  std::shared_ptr< arrow::cuda::CudaHostBuffer>  host_buffer;
};


/* "cudf/_libxx/arrow/_cuda.pxd":61
 * 
 * 
 * cdef class BufferReader(NativeFile):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CCudaBufferReader* reader
 */
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
   arrow::cuda::CudaBufferReader *reader;
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *buffer;
};


/* "cudf/_libxx/arrow/_cuda.pxd":67
 * 
 * 
 * cdef class BufferWriter(NativeFile):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CCudaBufferWriter* writer
 */
struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter {
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;
   arrow::cuda::CudaBufferWriter *writer;
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *buffer;
};



/* "pyarrow/lib.pxd":41
 * 
 * 
 * cdef class MemoryPool:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CMemoryPool* pool
 */

struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_MemoryPool *,  arrow::MemoryPool *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool *__pyx_vtabptr_7pyarrow_3lib_MemoryPool;


/* "pyarrow/lib.pxd":51
 * 
 * 
 * cdef class DataType:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CDataType] sp_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_DataType {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_DataType *, std::shared_ptr< arrow::DataType>  const &);
  struct __pyx_obj_7pyarrow_3lib_Field *(*child)(struct __pyx_obj_7pyarrow_3lib_DataType *, int);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_DataType *__pyx_vtabptr_7pyarrow_3lib_DataType;


/* "pyarrow/lib.pxd":62
 * 
 * 
 * cdef class ListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CListType* list_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ListType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ListType *__pyx_vtabptr_7pyarrow_3lib_ListType;


/* "pyarrow/lib.pxd":67
 * 
 * 
 * cdef class LargeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CLargeListType* list_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_LargeListType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_LargeListType *__pyx_vtabptr_7pyarrow_3lib_LargeListType;


/* "pyarrow/lib.pxd":72
 * 
 * 
 * cdef class StructType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CStructType* struct_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_StructType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
  struct __pyx_obj_7pyarrow_3lib_Field *(*field)(struct __pyx_obj_7pyarrow_3lib_StructType *, int);
  struct __pyx_obj_7pyarrow_3lib_Field *(*field_by_name)(struct __pyx_obj_7pyarrow_3lib_StructType *, PyObject *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_StructType *__pyx_vtabptr_7pyarrow_3lib_StructType;


/* "pyarrow/lib.pxd":88
 * 
 * 
 * cdef class DictionaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDictionaryType* dict_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryType *__pyx_vtabptr_7pyarrow_3lib_DictionaryType;


/* "pyarrow/lib.pxd":93
 * 
 * 
 * cdef class TimestampType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTimestampType* ts_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_TimestampType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_TimestampType *__pyx_vtabptr_7pyarrow_3lib_TimestampType;


/* "pyarrow/lib.pxd":98
 * 
 * 
 * cdef class Time32Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime32Type* time_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Time32Type {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Time32Type *__pyx_vtabptr_7pyarrow_3lib_Time32Type;


/* "pyarrow/lib.pxd":103
 * 
 * 
 * cdef class Time64Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime64Type* time_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Time64Type {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Time64Type *__pyx_vtabptr_7pyarrow_3lib_Time64Type;


/* "pyarrow/lib.pxd":108
 * 
 * 
 * cdef class FixedSizeBinaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeBinaryType* fixed_size_binary_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType *__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryType;


/* "pyarrow/lib.pxd":113
 * 
 * 
 * cdef class Decimal128Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal128Type* decimal128_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Type {
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Type *__pyx_vtabptr_7pyarrow_3lib_Decimal128Type;


/* "pyarrow/lib.pxd":118
 * 
 * 
 * cdef class BaseExtensionType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CExtensionType* ext_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType {
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType *__pyx_vtabptr_7pyarrow_3lib_BaseExtensionType;


/* "pyarrow/lib.pxd":123
 * 
 * 
 * cdef class ExtensionType(BaseExtensionType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CPyExtensionType* cpy_ext_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType {
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType *__pyx_vtabptr_7pyarrow_3lib_ExtensionType;


/* "pyarrow/lib.pxd":128
 * 
 * 
 * cdef class PyExtensionType(ExtensionType):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_PyExtensionType {
  struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_PyExtensionType *__pyx_vtabptr_7pyarrow_3lib_PyExtensionType;


/* "pyarrow/lib.pxd":132
 * 
 * 
 * cdef class Field:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CField] sp_field
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Field {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Field *, std::shared_ptr< arrow::Field>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Field *__pyx_vtabptr_7pyarrow_3lib_Field;


/* "pyarrow/lib.pxd":143
 * 
 * 
 * cdef class Schema:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSchema] sp_schema
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Schema {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Schema *, std::vector<std::shared_ptr< arrow::Field> >  const &);
  void (*init_schema)(struct __pyx_obj_7pyarrow_3lib_Schema *, std::shared_ptr< arrow::Schema>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Schema *__pyx_vtabptr_7pyarrow_3lib_Schema;


/* "pyarrow/lib.pxd":161
 * 
 * 
 * cdef class ArrayValue(Scalar):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArray] sp_array
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_ArrayValue *, struct __pyx_obj_7pyarrow_3lib_DataType *, std::shared_ptr< arrow::Array>  const &, int64_t);
  void (*_set_array)(struct __pyx_obj_7pyarrow_3lib_ArrayValue *, std::shared_ptr< arrow::Array>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue *__pyx_vtabptr_7pyarrow_3lib_ArrayValue;


/* "pyarrow/lib.pxd":171
 *     cdef void _set_array(self, const shared_ptr[CArray]& sp_array)
 * 
 * cdef class ScalarValue(Scalar):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CScalar] sp_scalar
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ScalarValue {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_ScalarValue *, std::shared_ptr< arrow::Scalar>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ScalarValue *__pyx_vtabptr_7pyarrow_3lib_ScalarValue;


/* "pyarrow/lib.pxd":177
 *     cdef void init(self, const shared_ptr[CScalar]& sp_scalar)
 * 
 * cdef class Int8Value(ArrayValue):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int8Value {
  struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int8Value *__pyx_vtabptr_7pyarrow_3lib_Int8Value;


/* "pyarrow/lib.pxd":181
 * 
 * 
 * cdef class Int64Value(ArrayValue):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int64Value {
  struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int64Value *__pyx_vtabptr_7pyarrow_3lib_Int64Value;


/* "pyarrow/lib.pxd":185
 * 
 * 
 * cdef class ListValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     cdef readonly:
 *         DataType value_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ListValue {
  struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue __pyx_base;
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_ListValue *, int64_t);
  int64_t (*length)(struct __pyx_obj_7pyarrow_3lib_ListValue *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ListValue *__pyx_vtabptr_7pyarrow_3lib_ListValue;


/* "pyarrow/lib.pxd":196
 * 
 * 
 * cdef class LargeListValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     cdef readonly:
 *         DataType value_type
 */

struct __pyx_vtabstruct_7pyarrow_3lib_LargeListValue {
  struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue __pyx_base;
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_LargeListValue *, int64_t);
  int64_t (*length)(struct __pyx_obj_7pyarrow_3lib_LargeListValue *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_LargeListValue *__pyx_vtabptr_7pyarrow_3lib_LargeListValue;


/* "pyarrow/lib.pxd":207
 * 
 * 
 * cdef class StructValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CStructArray* ap
 */

struct __pyx_vtabstruct_7pyarrow_3lib_StructValue {
  struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_StructValue *__pyx_vtabptr_7pyarrow_3lib_StructValue;


/* "pyarrow/lib.pxd":212
 * 
 * 
 * cdef class UnionValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CUnionArray* ap
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UnionValue {
  struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue __pyx_base;
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_UnionValue *, int64_t);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UnionValue *__pyx_vtabptr_7pyarrow_3lib_UnionValue;


/* "pyarrow/lib.pxd":220
 * 
 * 
 * cdef class StringValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_StringValue {
  struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_StringValue *__pyx_vtabptr_7pyarrow_3lib_StringValue;


/* "pyarrow/lib.pxd":224
 * 
 * 
 * cdef class FixedSizeBinaryValue(ArrayValue):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryValue {
  struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryValue *__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryValue;


/* "pyarrow/lib.pxd":232
 * 
 * 
 * cdef class Array(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArray] sp_array
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Array {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Array *, std::shared_ptr< arrow::Array>  const &);
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_Array *, int64_t);
  int64_t (*length)(struct __pyx_obj_7pyarrow_3lib_Array *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Array *__pyx_vtabptr_7pyarrow_3lib_Array;


/* "pyarrow/lib.pxd":248
 * 
 * 
 * cdef class Tensor:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTensor] sp_tensor
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Tensor {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Tensor *, std::shared_ptr< arrow::Tensor>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Tensor *__pyx_vtabptr_7pyarrow_3lib_Tensor;


/* "pyarrow/lib.pxd":259
 * 
 * 
 * cdef class SparseTensorCSR:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseTensorCSR] sp_sparse_tensor
 */

struct __pyx_vtabstruct_7pyarrow_3lib_SparseTensorCSR {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseTensorCSR *, std::shared_ptr< arrow::SparseTensorCSR>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseTensorCSR *__pyx_vtabptr_7pyarrow_3lib_SparseTensorCSR;


/* "pyarrow/lib.pxd":270
 * 
 * 
 * cdef class SparseTensorCOO:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseTensorCOO] sp_sparse_tensor
 */

struct __pyx_vtabstruct_7pyarrow_3lib_SparseTensorCOO {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseTensorCOO *, std::shared_ptr< arrow::SparseTensorCOO>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseTensorCOO *__pyx_vtabptr_7pyarrow_3lib_SparseTensorCOO;


/* "pyarrow/lib.pxd":281
 * 
 * 
 * cdef class NullArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_NullArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_NullArray *__pyx_vtabptr_7pyarrow_3lib_NullArray;


/* "pyarrow/lib.pxd":285
 * 
 * 
 * cdef class BooleanArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BooleanArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BooleanArray *__pyx_vtabptr_7pyarrow_3lib_BooleanArray;


/* "pyarrow/lib.pxd":289
 * 
 * 
 * cdef class NumericArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray *__pyx_vtabptr_7pyarrow_3lib_NumericArray;


/* "pyarrow/lib.pxd":293
 * 
 * 
 * cdef class IntegerArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray *__pyx_vtabptr_7pyarrow_3lib_IntegerArray;


/* "pyarrow/lib.pxd":297
 * 
 * 
 * cdef class FloatingPointArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray *__pyx_vtabptr_7pyarrow_3lib_FloatingPointArray;


/* "pyarrow/lib.pxd":301
 * 
 * 
 * cdef class Int8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int8Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int8Array *__pyx_vtabptr_7pyarrow_3lib_Int8Array;


/* "pyarrow/lib.pxd":305
 * 
 * 
 * cdef class UInt8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UInt8Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt8Array *__pyx_vtabptr_7pyarrow_3lib_UInt8Array;


/* "pyarrow/lib.pxd":309
 * 
 * 
 * cdef class Int16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int16Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int16Array *__pyx_vtabptr_7pyarrow_3lib_Int16Array;


/* "pyarrow/lib.pxd":313
 * 
 * 
 * cdef class UInt16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UInt16Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt16Array *__pyx_vtabptr_7pyarrow_3lib_UInt16Array;


/* "pyarrow/lib.pxd":317
 * 
 * 
 * cdef class Int32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int32Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int32Array *__pyx_vtabptr_7pyarrow_3lib_Int32Array;


/* "pyarrow/lib.pxd":321
 * 
 * 
 * cdef class UInt32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UInt32Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt32Array *__pyx_vtabptr_7pyarrow_3lib_UInt32Array;


/* "pyarrow/lib.pxd":325
 * 
 * 
 * cdef class Int64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Int64Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Int64Array *__pyx_vtabptr_7pyarrow_3lib_Int64Array;


/* "pyarrow/lib.pxd":329
 * 
 * 
 * cdef class UInt64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UInt64Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt64Array *__pyx_vtabptr_7pyarrow_3lib_UInt64Array;


/* "pyarrow/lib.pxd":333
 * 
 * 
 * cdef class HalfFloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_HalfFloatArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_HalfFloatArray *__pyx_vtabptr_7pyarrow_3lib_HalfFloatArray;


/* "pyarrow/lib.pxd":337
 * 
 * 
 * cdef class FloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FloatArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FloatArray *__pyx_vtabptr_7pyarrow_3lib_FloatArray;


/* "pyarrow/lib.pxd":341
 * 
 * 
 * cdef class DoubleArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_DoubleArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_DoubleArray *__pyx_vtabptr_7pyarrow_3lib_DoubleArray;


/* "pyarrow/lib.pxd":345
 * 
 * 
 * cdef class FixedSizeBinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray *__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryArray;


/* "pyarrow/lib.pxd":349
 * 
 * 
 * cdef class Decimal128Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Array {
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Array *__pyx_vtabptr_7pyarrow_3lib_Decimal128Array;


/* "pyarrow/lib.pxd":353
 * 
 * 
 * cdef class StructArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_StructArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_StructArray *__pyx_vtabptr_7pyarrow_3lib_StructArray;


/* "pyarrow/lib.pxd":357
 * 
 * 
 * cdef class ListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ListArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ListArray *__pyx_vtabptr_7pyarrow_3lib_ListArray;


/* "pyarrow/lib.pxd":361
 * 
 * 
 * cdef class LargeListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_LargeListArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_LargeListArray *__pyx_vtabptr_7pyarrow_3lib_LargeListArray;


/* "pyarrow/lib.pxd":365
 * 
 * 
 * cdef class UnionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_UnionArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_UnionArray *__pyx_vtabptr_7pyarrow_3lib_UnionArray;


/* "pyarrow/lib.pxd":369
 * 
 * 
 * cdef class StringArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_StringArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_StringArray *__pyx_vtabptr_7pyarrow_3lib_StringArray;


/* "pyarrow/lib.pxd":373
 * 
 * 
 * cdef class BinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BinaryArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BinaryArray *__pyx_vtabptr_7pyarrow_3lib_BinaryArray;


/* "pyarrow/lib.pxd":377
 * 
 * 
 * cdef class DictionaryArray(Array):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _indices, _dictionary
 */

struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryArray *__pyx_vtabptr_7pyarrow_3lib_DictionaryArray;


/* "pyarrow/lib.pxd":382
 * 
 * 
 * cdef class ExtensionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionArray {
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionArray *__pyx_vtabptr_7pyarrow_3lib_ExtensionArray;


/* "pyarrow/lib.pxd":392
 * 
 * 
 * cdef class ChunkedArray(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CChunkedArray] sp_chunked_array
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_ChunkedArray *, std::shared_ptr< arrow::ChunkedArray>  const &);
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_ChunkedArray *, int64_t);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray *__pyx_vtabptr_7pyarrow_3lib_ChunkedArray;


/* "pyarrow/lib.pxd":405
 * 
 * 
 * cdef class Table(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTable] sp_table
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Table {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Table *, std::shared_ptr< arrow::Table>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Table *__pyx_vtabptr_7pyarrow_3lib_Table;


/* "pyarrow/lib.pxd":413
 * 
 * 
 * cdef class RecordBatch(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatch] sp_batch
 */

struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_RecordBatch *, std::shared_ptr< arrow::RecordBatch>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch *__pyx_vtabptr_7pyarrow_3lib_RecordBatch;


/* "pyarrow/lib.pxd":422
 * 
 * 
 * cdef class Buffer:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CBuffer] buffer
 */

struct __pyx_vtabstruct_7pyarrow_3lib_Buffer {
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Buffer *, std::shared_ptr< arrow::Buffer>  const &);
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_Buffer *, int64_t);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_Buffer *__pyx_vtabptr_7pyarrow_3lib_Buffer;


/* "pyarrow/lib.pxd":432
 * 
 * 
 * cdef class ResizableBuffer(Buffer):             # <<<<<<<<<<<<<<
 * 
 *     cdef void init_rz(self, const shared_ptr[CResizableBuffer]& buffer)
 */

struct __pyx_vtabstruct_7pyarrow_3lib_ResizableBuffer {
  struct __pyx_vtabstruct_7pyarrow_3lib_Buffer __pyx_base;
  void (*init_rz)(struct __pyx_obj_7pyarrow_3lib_ResizableBuffer *, std::shared_ptr< arrow::ResizableBuffer>  const &);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_ResizableBuffer *__pyx_vtabptr_7pyarrow_3lib_ResizableBuffer;


/* "pyarrow/lib.pxd":437
 * 
 * 
 * cdef class NativeFile:             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[InputStream] input_stream
 */

struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile {
  PyObject *(*set_random_access_file)(struct __pyx_obj_7pyarrow_3lib_NativeFile *, std::shared_ptr<arrow::io::RandomAccessFile> );
  PyObject *(*set_input_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *, std::shared_ptr<arrow::io::InputStream> );
  PyObject *(*set_output_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *, std::shared_ptr<arrow::io::OutputStream> );
  std::shared_ptr<arrow::io::RandomAccessFile>  (*get_random_access_file)(struct __pyx_obj_7pyarrow_3lib_NativeFile *);
  std::shared_ptr<arrow::io::InputStream>  (*get_input_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *);
  std::shared_ptr<arrow::io::OutputStream>  (*get_output_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *);
};
static struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile *__pyx_vtabptr_7pyarrow_3lib_NativeFile;


/* "pyarrow/lib.pxd":461
 * 
 * 
 * cdef class BufferedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BufferedInputStream {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BufferedInputStream *__pyx_vtabptr_7pyarrow_3lib_BufferedInputStream;


/* "pyarrow/lib.pxd":465
 * 
 * 
 * cdef class BufferedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_BufferedOutputStream {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_BufferedOutputStream *__pyx_vtabptr_7pyarrow_3lib_BufferedOutputStream;


/* "pyarrow/lib.pxd":469
 * 
 * 
 * cdef class CompressedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_CompressedInputStream {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_CompressedInputStream *__pyx_vtabptr_7pyarrow_3lib_CompressedInputStream;


/* "pyarrow/lib.pxd":473
 * 
 * 
 * cdef class CompressedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_7pyarrow_3lib_CompressedOutputStream {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_7pyarrow_3lib_CompressedOutputStream *__pyx_vtabptr_7pyarrow_3lib_CompressedOutputStream;


/* "cudf/_libxx/arrow/_cuda.pyx":32
 * 
 * 
 * cdef class Context:             # <<<<<<<<<<<<<<
 *     """
 *     CUDA driver context.
 */

struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_Context {
  void (*init)(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *, std::shared_ptr< arrow::cuda::CudaContext>  const &);
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_Context;


/* "cudf/_libxx/arrow/_cuda.pyx":338
 * 
 * 
 * cdef class IpcMemHandle:             # <<<<<<<<<<<<<<
 *     """A serializable container for a CUDA IPC handle.
 *     """
 */

struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle {
  void (*init)(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *, std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  &);
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle;


/* "cudf/_libxx/arrow/_cuda.pyx":383
 * 
 * 
 * cdef class CudaBuffer(Buffer):             # <<<<<<<<<<<<<<
 *     """An Arrow buffer with data located in a GPU device.
 * 
 */

struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer {
  struct __pyx_vtabstruct_7pyarrow_3lib_Buffer __pyx_base;
  void (*init_cuda)(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *, std::shared_ptr< arrow::cuda::CudaBuffer>  const &, PyObject *);
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer;


/* "cudf/_libxx/arrow/_cuda.pyx":702
 * 
 * 
 * cdef class HostBuffer(Buffer):             # <<<<<<<<<<<<<<
 *     """Device-accessible CPU memory created using cudaHostAlloc.
 * 
 */

struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_HostBuffer {
  struct __pyx_vtabstruct_7pyarrow_3lib_Buffer __pyx_base;
  void (*init_host)(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *, std::shared_ptr< arrow::cuda::CudaHostBuffer>  const &);
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_HostBuffer;


/* "cudf/_libxx/arrow/_cuda.pyx":723
 * 
 * 
 * cdef class BufferReader(NativeFile):             # <<<<<<<<<<<<<<
 *     """File interface for zero-copy read from CUDA buffers.
 * 
 */

struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_BufferReader {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_BufferReader;


/* "cudf/_libxx/arrow/_cuda.pyx":773
 * 
 * 
 * cdef class BufferWriter(NativeFile):             # <<<<<<<<<<<<<<
 *     """File interface for writing to CUDA buffers.
 * 
 */

struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_BufferWriter {
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_BufferWriter;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_4cudf_6_libxx_5arrow_5_cuda_7Context_init(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, std::shared_ptr< arrow::cuda::CudaContext>  const &__pyx_v_ctx); /* proto*/
static void __pyx_f_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_init(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_v_self, std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  &__pyx_v_h); /* proto*/
static void __pyx_f_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_init_cuda(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, std::shared_ptr< arrow::cuda::CudaBuffer>  const &__pyx_v_buffer, PyObject *__pyx_v_base); /* proto*/
static PyObject *__pyx_f_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_getitem(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, int64_t __pyx_v_i); /* proto*/
static void __pyx_f_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_init_host(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self, std::shared_ptr< arrow::cuda::CudaHostBuffer>  const &__pyx_v_buffer); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'pyarrow.includes.common' */

/* Module declarations from 'pyarrow.includes.libarrow' */

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'pyarrow.lib' */
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Message = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_MemoryPool = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DataType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ListType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_LargeListType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_StructType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DictionaryMemo = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DictionaryType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_TimestampType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Time32Type = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Time64Type = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal128Type = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BaseExtensionType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ExtensionType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_PyExtensionType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Field = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Schema = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Scalar = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_NAType = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ArrayValue = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ScalarValue = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int8Value = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int64Value = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ListValue = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_LargeListValue = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_StructValue = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UnionValue = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_StringValue = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryValue = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib__PandasConvertible = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Tensor = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseTensorCSR = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseTensorCOO = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_NullArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BooleanArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_NumericArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_IntegerArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FloatingPointArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int8Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt8Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int16Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt16Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int32Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt32Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int64Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt64Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_HalfFloatArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FloatArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DoubleArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal128Array = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_StructArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ListArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_LargeListArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_UnionArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_StringArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BinaryArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_DictionaryArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ExtensionArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ChunkedArray = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Table = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_RecordBatch = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_Buffer = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_ResizableBuffer = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_NativeFile = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BufferedInputStream = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_BufferedOutputStream = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_CompressedInputStream = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib_CompressedOutputStream = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib__CRecordBatchWriter = 0;
static PyTypeObject *__pyx_ptype_7pyarrow_3lib__CRecordBatchReader = 0;
static int (*__pyx_f_7pyarrow_3lib_check_status)(arrow::Status const &); /*proto*/
static  arrow::MemoryPool *(*__pyx_f_7pyarrow_3lib_maybe_unbox_memory_pool)(struct __pyx_obj_7pyarrow_3lib_MemoryPool *); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_array)(std::shared_ptr< arrow::Array>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_chunked_array)(std::shared_ptr< arrow::ChunkedArray>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_batch)(std::shared_ptr< arrow::RecordBatch>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_buffer)(std::shared_ptr< arrow::Buffer>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_data_type)(std::shared_ptr< arrow::DataType>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_field)(std::shared_ptr< arrow::Field>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_resizable_buffer)(std::shared_ptr< arrow::ResizableBuffer>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_schema)(std::shared_ptr< arrow::Schema>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_table)(std::shared_ptr< arrow::Table>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_tensor)(std::shared_ptr< arrow::Tensor>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_tensor_coo)(std::shared_ptr< arrow::SparseTensorCOO>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_tensor_csr)(std::shared_ptr< arrow::SparseTensorCSR>  const &); /*proto*/
static std::shared_ptr< arrow::Array>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_array)(PyObject *); /*proto*/
static std::shared_ptr< arrow::RecordBatch>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_batch)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Buffer>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_buffer)(PyObject *); /*proto*/
static std::shared_ptr< arrow::DataType>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_data_type)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Field>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_field)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Schema>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_schema)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Table>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_table)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Tensor>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_tensor)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseTensorCOO>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_tensor_coo)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseTensorCSR>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_tensor_csr)(PyObject *); /*proto*/

/* Module declarations from 'cudf._libxx.cpp.arrow.libarrow_cuda' */

/* Module declarations from 'cudf._libxx.arrow._cuda' */
static PyTypeObject *__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context = 0;
static PyTypeObject *__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle = 0;
static PyTypeObject *__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer = 0;
static PyTypeObject *__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_HostBuffer = 0;
static PyTypeObject *__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_BufferReader = 0;
static PyTypeObject *__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_BufferWriter = 0;
__PYX_EXTERN_C int pyarrow_is_buffer(PyObject *); /*proto*/
__PYX_EXTERN_C int pyarrow_is_cudabuffer(PyObject *); /*proto*/
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudabuffer_base(std::shared_ptr< arrow::cuda::CudaBuffer>  const &, PyObject *); /*proto*/
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudabuffer(std::shared_ptr< arrow::cuda::CudaBuffer>  const &); /*proto*/
__PYX_EXTERN_C std::shared_ptr< arrow::cuda::CudaBuffer>  pyarrow_unwrap_cudabuffer(PyObject *); /*proto*/
__PYX_EXTERN_C int pyarrow_is_cudahostbuffer(PyObject *); /*proto*/
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudahostbuffer(std::shared_ptr< arrow::cuda::CudaHostBuffer>  const &); /*proto*/
__PYX_EXTERN_C std::shared_ptr< arrow::cuda::CudaHostBuffer>  pyarrow_unwrap_cudahostbuffer(PyObject *); /*proto*/
__PYX_EXTERN_C int pyarrow_is_cudacontext(PyObject *); /*proto*/
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudacontext(std::shared_ptr< arrow::cuda::CudaContext>  const &); /*proto*/
__PYX_EXTERN_C std::shared_ptr< arrow::cuda::CudaContext>  pyarrow_unwrap_cudacontext(PyObject *); /*proto*/
__PYX_EXTERN_C int pyarrow_is_cudaipcmemhandle(PyObject *); /*proto*/
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudaipcmemhandle(std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  &); /*proto*/
__PYX_EXTERN_C std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  pyarrow_unwrap_cudaipcmemhandle(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "cudf._libxx.arrow._cuda"
extern int __pyx_module_is_main_cudf___libxx__arrow___cuda;
int __pyx_module_is_main_cudf___libxx__arrow___cuda = 0;

/* Implementation of 'cudf._libxx.arrow._cuda' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_BufferError;
static PyObject *__pyx_builtin_NotImplementedError;
static const char __pyx_k_id[] = "id";
static const char __pyx_k_buf[] = "buf";
static const char __pyx_k_ctx[] = "ctx";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_mem[] = "mem";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_cbuf[] = "cbuf";
static const char __pyx_k_cuda[] = "cuda";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_gpus[] = "gpus";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_pool[] = "pool";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_tell[] = "tell";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_batch[] = "batch";
static const char __pyx_k_buf_2[] = "buf_";
static const char __pyx_k_ctx_2[] = "ctx_";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_numba[] = "numba";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_slice[] = "slice";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_buffer[] = "buffer";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_device[] = "device";
static const char __pyx_k_driver[] = "driver";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_handle[] = "handle";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_nbytes[] = "nbytes";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_pool_2[] = "pool_";
static const char __pyx_k_reader[] = "reader";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_schema[] = "schema";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_whence[] = "whence";
static const char __pyx_k_Context[] = "Context";
static const char __pyx_k_address[] = "address";
static const char __pyx_k_batch_2[] = "batch_";
static const char __pyx_k_context[] = "context";
static const char __pyx_k_cudadrv[] = "cudadrv";
static const char __pyx_k_manager[] = "manager";
static const char __pyx_k_pointer[] = "pointer";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_strides[] = "strides";
static const char __pyx_k_tobytes[] = "tobytes";
static const char __pyx_k_typestr[] = "typestr";
static const char __pyx_k_add_item[] = "add_item";
static const char __pyx_k_buffer_2[] = "buffer_";
static const char __pyx_k_c_void_p[] = "c_void_p";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_schema_2[] = "schema_";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_to_numba[] = "to_numba";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_as_buffer[] = "as_buffer";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_py_buffer[] = "py_buffer";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_resizable[] = "resizable";
static const char __pyx_k_CudaBuffer[] = "CudaBuffer";
static const char __pyx_k_HostBuffer[] = "HostBuffer";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_from_numba[] = "from_numba";
static const char __pyx_k_new_buffer[] = "new_buffer";
static const char __pyx_k_numba_cuda[] = "numba.cuda";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_to_pybytes[] = "to_pybytes";
static const char __pyx_k_BufferError[] = "BufferError";
static const char __pyx_k_from_buffer[] = "from_buffer";
static const char __pyx_k_memory_pool[] = "memory_pool";
static const char __pyx_k_pyarrow_lib[] = "pyarrow.lib";
static const char __pyx_k_BufferReader[] = "BufferReader";
static const char __pyx_k_BufferWriter[] = "BufferWriter";
static const char __pyx_k_IpcMemHandle[] = "IpcMemHandle";
static const char __pyx_k_copy_to_host[] = "copy_to_host";
static const char __pyx_k_pyarrow_util[] = "pyarrow.util";
static const char __pyx_k_read_message[] = "read_message";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_MemoryPointer[] = "MemoryPointer";
static const char __pyx_k_deallocations[] = "deallocations";
static const char __pyx_k_device_number[] = "device_number";
static const char __pyx_k_opaque_handle[] = "opaque_handle";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_ArrowTypeError[] = "ArrowTypeError";
static const char __pyx_k_copy_from_host[] = "copy_from_host";
static const char __pyx_k_device_pointer[] = "device_pointer";
static const char __pyx_k_foreign_buffer[] = "foreign_buffer";
static const char __pyx_k_pyarrow_compat[] = "pyarrow.compat";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_current_context[] = "current_context";
static const char __pyx_k_get_num_devices[] = "get_num_devices";
static const char __pyx_k_new_host_buffer[] = "new_host_buffer";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_copy_from_device[] = "copy_from_device";
static const char __pyx_k_read_record_batch[] = "read_record_batch";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_device_address[] = "get_device_address";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_get_contiguous_span[] = "get_contiguous_span";
static const char __pyx_k_DummyPendingDeallocs[] = "DummyPendingDeallocs";
static const char __pyx_k_cuda_array_interface[] = "__cuda_array_interface__";
static const char __pyx_k_serialize_record_batch[] = "serialize_record_batch";
static const char __pyx_k_cudf__libxx_arrow__cuda[] = "cudf._libxx.arrow._cuda";
static const char __pyx_k_Invalid_value_of_whence_0[] = "Invalid value of whence: {0}";
static const char __pyx_k_numba_cuda_cudadrv_driver[] = "numba.cuda.cudadrv.driver";
static const char __pyx_k_CudaBuffer___getreadbuffer[] = "CudaBuffer.__getreadbuffer__";
static const char __pyx_k_CudaBuffer___getwritebuffer[] = "CudaBuffer.__getwritebuffer__";
static const char __pyx_k_cudf__libxx_arrow__cuda_pyx[] = "cudf/_libxx/arrow/_cuda.pyx";
static const char __pyx_k_expected_Context_instance_got_s[] = "expected Context instance, got %s";
static const char __pyx_k_offset_argument_is_out_of_range[] = "offset argument is out-of-range";
static const char __pyx_k_self_handle_cannot_be_converted[] = "self.handle cannot be converted to a Python object for pickling";
static const char __pyx_k_Do_not_call_CudaBuffer_s_constru[] = "Do not call CudaBuffer's constructor directly, use `<pyarrow.Context instance>.device_buffer` method instead.";
static const char __pyx_k_Do_not_call_HostBuffer_s_constru[] = "Do not call HostBuffer's constructor directly, use `cuda.new_host_buffer` function instead.";
static const char __pyx_k_buffer_protocol_for_device_buffe[] = "buffer protocol for device buffer not supported";
static const char __pyx_k_cannot_create_device_buffer_view[] = "cannot create device buffer view from `%s` object";
static const char __pyx_k_device_number_argument_must_be_n[] = "device_number argument must be non-negative less than %s";
static const char __pyx_k_expected_CudaBuffer_instance_got[] = "expected CudaBuffer instance, got %s";
static const char __pyx_k_expected_HostBuffer_instance_got[] = "expected HostBuffer instance, got %s";
static const char __pyx_k_expected_IpcMemHandle_instance_g[] = "expected IpcMemHandle instance, got %s";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_position_argument_is_out_of_rang[] = "position argument is out-of-range";
static const char __pyx_k_requested_copy_does_not_fit_into[] = "requested copy does not fit into host buffer";
static const char __pyx_k_requested_larger_slice_than_avai[] = "requested larger slice than available in device buffer";
static const char __pyx_k_requested_more_to_copy_than_avai[] = "requested more to copy than available from device buffer";
static const char __pyx_k_self_buffer_self_cuda_buffer_can[] = "self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling";
static const char __pyx_k_self_buffer_self_host_buffer_can[] = "self.buffer,self.host_buffer cannot be converted to a Python object for pickling";
static const char __pyx_k_to_numba_locals_DummyPendingDeal[] = "to_numba.<locals>.DummyPendingDeallocs";
static const char __pyx_k_requested_more_to_copy_than_avai_2[] = "requested more to copy than available from host buffer";
static const char __pyx_k_requested_more_to_copy_than_avai_3[] = "requested more to copy than available in device buffer";
static const char __pyx_k_to_numba_locals_DummyPendingDeal_2[] = "to_numba.<locals>.DummyPendingDeallocs.add_item";
static PyObject *__pyx_n_s_ArrowTypeError;
static PyObject *__pyx_n_s_BufferError;
static PyObject *__pyx_n_s_BufferReader;
static PyObject *__pyx_n_s_BufferWriter;
static PyObject *__pyx_n_s_Context;
static PyObject *__pyx_n_s_CudaBuffer;
static PyObject *__pyx_kp_u_CudaBuffer___getreadbuffer;
static PyObject *__pyx_kp_u_CudaBuffer___getwritebuffer;
static PyObject *__pyx_kp_u_Do_not_call_CudaBuffer_s_constru;
static PyObject *__pyx_kp_u_Do_not_call_HostBuffer_s_constru;
static PyObject *__pyx_n_s_DummyPendingDeallocs;
static PyObject *__pyx_n_s_HostBuffer;
static PyObject *__pyx_kp_u_Invalid_value_of_whence_0;
static PyObject *__pyx_n_s_IpcMemHandle;
static PyObject *__pyx_n_s_MemoryPointer;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_add_item;
static PyObject *__pyx_n_s_address;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_as_buffer;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_batch;
static PyObject *__pyx_n_s_batch_2;
static PyObject *__pyx_n_s_buf;
static PyObject *__pyx_n_s_buf_2;
static PyObject *__pyx_n_s_buffer;
static PyObject *__pyx_n_s_buffer_2;
static PyObject *__pyx_kp_u_buffer_protocol_for_device_buffe;
static PyObject *__pyx_n_s_c_void_p;
static PyObject *__pyx_kp_u_cannot_create_device_buffer_view;
static PyObject *__pyx_n_s_cbuf;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_context;
static PyObject *__pyx_n_s_copy_from_device;
static PyObject *__pyx_n_s_copy_from_host;
static PyObject *__pyx_n_s_copy_to_host;
static PyObject *__pyx_n_s_ctx;
static PyObject *__pyx_n_s_ctx_2;
static PyObject *__pyx_n_s_ctypes;
static PyObject *__pyx_n_s_cuda;
static PyObject *__pyx_n_s_cuda_array_interface;
static PyObject *__pyx_n_u_cuda_array_interface;
static PyObject *__pyx_n_s_cudadrv;
static PyObject *__pyx_n_s_cudf__libxx_arrow__cuda;
static PyObject *__pyx_kp_s_cudf__libxx_arrow__cuda_pyx;
static PyObject *__pyx_n_s_current_context;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_u_data;
static PyObject *__pyx_n_s_deallocations;
static PyObject *__pyx_n_s_device;
static PyObject *__pyx_n_s_device_number;
static PyObject *__pyx_kp_u_device_number_argument_must_be_n;
static PyObject *__pyx_n_s_device_pointer;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_driver;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_kp_u_expected_Context_instance_got_s;
static PyObject *__pyx_kp_u_expected_CudaBuffer_instance_got;
static PyObject *__pyx_kp_u_expected_HostBuffer_instance_got;
static PyObject *__pyx_kp_u_expected_IpcMemHandle_instance_g;
static PyObject *__pyx_n_s_foreign_buffer;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_from_buffer;
static PyObject *__pyx_n_s_from_numba;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_contiguous_span;
static PyObject *__pyx_n_s_get_device_address;
static PyObject *__pyx_n_s_get_num_devices;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gpus;
static PyObject *__pyx_n_s_handle;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_manager;
static PyObject *__pyx_n_s_mem;
static PyObject *__pyx_n_s_memory_pool;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nbytes;
static PyObject *__pyx_n_s_new_buffer;
static PyObject *__pyx_n_s_new_host_buffer;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_numba;
static PyObject *__pyx_n_s_numba_cuda;
static PyObject *__pyx_n_s_numba_cuda_cudadrv_driver;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_offset;
static PyObject *__pyx_kp_u_offset_argument_is_out_of_range;
static PyObject *__pyx_n_s_opaque_handle;
static PyObject *__pyx_n_s_pointer;
static PyObject *__pyx_n_s_pool;
static PyObject *__pyx_n_s_pool_2;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_kp_u_position_argument_is_out_of_rang;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_py_buffer;
static PyObject *__pyx_n_s_pyarrow_compat;
static PyObject *__pyx_n_s_pyarrow_lib;
static PyObject *__pyx_n_s_pyarrow_util;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_read_message;
static PyObject *__pyx_n_s_read_record_batch;
static PyObject *__pyx_n_s_reader;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_kp_u_requested_copy_does_not_fit_into;
static PyObject *__pyx_kp_u_requested_larger_slice_than_avai;
static PyObject *__pyx_kp_u_requested_more_to_copy_than_avai;
static PyObject *__pyx_kp_u_requested_more_to_copy_than_avai_2;
static PyObject *__pyx_kp_u_requested_more_to_copy_than_avai_3;
static PyObject *__pyx_n_s_resizable;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_schema;
static PyObject *__pyx_n_s_schema_2;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_buffer_self_cuda_buffer_can;
static PyObject *__pyx_kp_s_self_buffer_self_host_buffer_can;
static PyObject *__pyx_kp_s_self_handle_cannot_be_converted;
static PyObject *__pyx_n_s_serialize_record_batch;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_u_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_slice;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_u_strides;
static PyObject *__pyx_n_s_tell;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_numba;
static PyObject *__pyx_n_s_to_numba_locals_DummyPendingDeal;
static PyObject *__pyx_n_s_to_numba_locals_DummyPendingDeal_2;
static PyObject *__pyx_n_s_to_pybytes;
static PyObject *__pyx_n_s_tobytes;
static PyObject *__pyx_n_u_typestr;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_whence;
static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context___init__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_2__cinit__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, int __pyx_v_device_number, uintptr_t __pyx_v_handle); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_4from_numba(PyObject *__pyx_v_context); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_8to_numba_20DummyPendingDeallocs_add_item(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_6to_numba(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_8get_num_devices(void); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_13device_number___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_6handle___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_10synchronize(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_15bytes_allocated___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_12get_device_address(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_address); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_14new_buffer(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_nbytes); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_16foreign_buffer(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_address, PyObject *__pyx_v_size, PyObject *__pyx_v_base); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_18open_ipc_buffer(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_ipc_handle); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_20buffer_from_data(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_data, int64_t __pyx_v_offset, int64_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_22buffer_from_object(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_from_buffer(struct __pyx_obj_7pyarrow_3lib_Buffer *__pyx_v_opaque_handle); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_2serialize(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_v_self, PyObject *__pyx_v_pool); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer___init__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_2from_buffer(PyObject *__pyx_v_buf); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_4from_numba(PyObject *__pyx_v_mem); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_6to_numba(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_8copy_to_host(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, int64_t __pyx_v_position, int64_t __pyx_v_nbytes, struct __pyx_obj_7pyarrow_3lib_Buffer *__pyx_v_buf, struct __pyx_obj_7pyarrow_3lib_MemoryPool *__pyx_v_memory_pool, bool __pyx_v_resizable); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_10copy_from_host(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, PyObject *__pyx_v_data, int64_t __pyx_v_position, int64_t __pyx_v_nbytes); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_12copy_from_device(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, PyObject *__pyx_v_buf, int64_t __pyx_v_position, int64_t __pyx_v_nbytes); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_14export_for_ipc(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_7context___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_16slice(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, PyObject *__pyx_v_offset, PyObject *__pyx_v_length); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_18to_pybytes(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self); /* proto */
static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_20__getbuffer__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, CYTHON_UNUSED Py_buffer *__pyx_v_buffer, CYTHON_UNUSED int __pyx_v_flags); /* proto */
#if PY_MAJOR_VERSION < 3
static Py_ssize_t __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_22__getreadbuffer__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, CYTHON_UNUSED Py_ssize_t __pyx_v_idx, CYTHON_UNUSED void **__pyx_v_p); /* proto */
#endif
#if PY_MAJOR_VERSION < 3
static Py_ssize_t __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_24__getwritebuffer__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, CYTHON_UNUSED Py_ssize_t __pyx_v_idx, CYTHON_UNUSED void **__pyx_v_p); /* proto */
#endif
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer___init__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4size___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader___cinit__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_v_self, struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_2read_buffer(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_v_self, PyObject *__pyx_v_nbytes); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter___cinit__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_buffer); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_2writeat(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, int64_t __pyx_v_position, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_4flush(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_6seek(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, int64_t __pyx_v_position, int __pyx_v_whence); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self); /* proto */
static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size_2__set__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, int64_t __pyx_v_buffer_size); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_18num_bytes_buffered___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_new_host_buffer(CYTHON_UNUSED PyObject *__pyx_self, int64_t __pyx_v_size, int __pyx_v_device); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_2serialize_record_batch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_batch, PyObject *__pyx_v_ctx); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_4read_message(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_source, PyObject *__pyx_v_pool); /* proto */
static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_6read_record_batch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_buffer, PyObject *__pyx_v_schema, PyObject *__pyx_v_pool); /* proto */
static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_Context(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_HostBuffer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_BufferReader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_BufferWriter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
/* Late includes */

/* "cudf/_libxx/arrow/_cuda.pyx":37
 *     """
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         Create a CUDA driver context for a particular device.
 */

/* Python wrapper */
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context___init__[] = "\n        Create a CUDA driver context for a particular device.\n\n        If a CUDA context handle is passed, it is wrapped, otherwise\n        a default CUDA context for the given device is requested.\n\n        Parameters\n        ----------\n        device_number : int (default 0)\n          Specify the GPU device for which the CUDA driver context is\n          requested.\n        handle : int, optional\n          Specify CUDA handle for a shared context that has been created\n          by another library.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4cudf_6_libxx_5arrow_5_cuda_7Context___init__;
#endif
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context___init__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context___init__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":55
 *         # This method exposed because autodoc doesn't pick __cinit__
 * 
 *     def __cinit__(self, int device_number=0, uintptr_t handle=0):             # <<<<<<<<<<<<<<
 *         cdef CCudaDeviceManager* manager
 *         check_status(CCudaDeviceManager.GetInstance(&manager))
 */

/* Python wrapper */
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_device_number;
  uintptr_t __pyx_v_handle;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_device_number,&__pyx_n_s_handle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device_number);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 55, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_device_number = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_device_number == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L3_error)
    } else {
      __pyx_v_device_number = ((int)0);
    }
    if (values[1]) {
      __pyx_v_handle = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_handle == ((uintptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L3_error)
    } else {
      __pyx_v_handle = ((uintptr_t)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 55, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_2__cinit__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self), __pyx_v_device_number, __pyx_v_handle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_2__cinit__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, int __pyx_v_device_number, uintptr_t __pyx_v_handle) {
   arrow::cuda::CudaDeviceManager *__pyx_v_manager;
  int __pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":57
 *     def __cinit__(self, int device_number=0, uintptr_t handle=0):
 *         cdef CCudaDeviceManager* manager
 *         check_status(CCudaDeviceManager.GetInstance(&manager))             # <<<<<<<<<<<<<<
 *         cdef int n = manager.num_devices()
 *         if device_number >= n or device_number < 0:
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status( arrow::cuda::CudaDeviceManager::GetInstance((&__pyx_v_manager))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 57, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":58
 *         cdef CCudaDeviceManager* manager
 *         check_status(CCudaDeviceManager.GetInstance(&manager))
 *         cdef int n = manager.num_devices()             # <<<<<<<<<<<<<<
 *         if device_number >= n or device_number < 0:
 *             self.context.reset()
 */
  __pyx_v_n = __pyx_v_manager->num_devices();

  /* "cudf/_libxx/arrow/_cuda.pyx":59
 *         check_status(CCudaDeviceManager.GetInstance(&manager))
 *         cdef int n = manager.num_devices()
 *         if device_number >= n or device_number < 0:             # <<<<<<<<<<<<<<
 *             self.context.reset()
 *             raise ValueError('device_number argument must be '
 */
  __pyx_t_3 = ((__pyx_v_device_number >= __pyx_v_n) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_device_number < 0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "cudf/_libxx/arrow/_cuda.pyx":60
 *         cdef int n = manager.num_devices()
 *         if device_number >= n or device_number < 0:
 *             self.context.reset()             # <<<<<<<<<<<<<<
 *             raise ValueError('device_number argument must be '
 *                              'non-negative less than %s' % (n))
 */
    __pyx_v_self->context.reset();

    /* "cudf/_libxx/arrow/_cuda.pyx":62
 *             self.context.reset()
 *             raise ValueError('device_number argument must be '
 *                              'non-negative less than %s' % (n))             # <<<<<<<<<<<<<<
 *         if handle == 0:
 *             check_status(manager.GetContext(device_number, &self.context))
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_device_number_argument_must_be_n, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":61
 *         if device_number >= n or device_number < 0:
 *             self.context.reset()
 *             raise ValueError('device_number argument must be '             # <<<<<<<<<<<<<<
 *                              'non-negative less than %s' % (n))
 *         if handle == 0:
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 61, __pyx_L1_error)

    /* "cudf/_libxx/arrow/_cuda.pyx":59
 *         check_status(CCudaDeviceManager.GetInstance(&manager))
 *         cdef int n = manager.num_devices()
 *         if device_number >= n or device_number < 0:             # <<<<<<<<<<<<<<
 *             self.context.reset()
 *             raise ValueError('device_number argument must be '
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":63
 *             raise ValueError('device_number argument must be '
 *                              'non-negative less than %s' % (n))
 *         if handle == 0:             # <<<<<<<<<<<<<<
 *             check_status(manager.GetContext(device_number, &self.context))
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_handle == 0) != 0);
  if (__pyx_t_2) {

    /* "cudf/_libxx/arrow/_cuda.pyx":64
 *                              'non-negative less than %s' % (n))
 *         if handle == 0:
 *             check_status(manager.GetContext(device_number, &self.context))             # <<<<<<<<<<<<<<
 *         else:
 *             check_status(manager.GetSharedContext(device_number,
 */
    __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_manager->GetContext(__pyx_v_device_number, (&__pyx_v_self->context))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 64, __pyx_L1_error)

    /* "cudf/_libxx/arrow/_cuda.pyx":63
 *             raise ValueError('device_number argument must be '
 *                              'non-negative less than %s' % (n))
 *         if handle == 0:             # <<<<<<<<<<<<<<
 *             check_status(manager.GetContext(device_number, &self.context))
 *         else:
 */
    goto __pyx_L6;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":66
 *             check_status(manager.GetContext(device_number, &self.context))
 *         else:
 *             check_status(manager.GetSharedContext(device_number,             # <<<<<<<<<<<<<<
 *                                                   <void*>handle,
 *                                                   &self.context))
 */
  /*else*/ {

    /* "cudf/_libxx/arrow/_cuda.pyx":68
 *             check_status(manager.GetSharedContext(device_number,
 *                                                   <void*>handle,
 *                                                   &self.context))             # <<<<<<<<<<<<<<
 *         self.device_number = device_number
 * 
 */
    __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_manager->GetSharedContext(__pyx_v_device_number, ((void *)__pyx_v_handle), (&__pyx_v_self->context))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 66, __pyx_L1_error)
  }
  __pyx_L6:;

  /* "cudf/_libxx/arrow/_cuda.pyx":69
 *                                                   <void*>handle,
 *                                                   &self.context))
 *         self.device_number = device_number             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->device_number = __pyx_v_device_number;

  /* "cudf/_libxx/arrow/_cuda.pyx":55
 *         # This method exposed because autodoc doesn't pick __cinit__
 * 
 *     def __cinit__(self, int device_number=0, uintptr_t handle=0):             # <<<<<<<<<<<<<<
 *         cdef CCudaDeviceManager* manager
 *         check_status(CCudaDeviceManager.GetInstance(&manager))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":72
 * 
 *     @staticmethod
 *     def from_numba(context=None):             # <<<<<<<<<<<<<<
 *         """
 *         Create a Context instance from a Numba CUDA context.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_5from_numba(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_4from_numba[] = "Context.from_numba(context=None)\n\n        Create a Context instance from a Numba CUDA context.\n\n        Parameters\n        ----------\n        context : {numba.cuda.cudadrv.driver.Context, None}\n          A Numba CUDA context instance.\n          If None, the current Numba context is used.\n\n        Returns\n        -------\n        shared_context : pyarrow.cuda.Context\n          Context instance.\n        ";
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_7Context_5from_numba = {"from_numba", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_5from_numba, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_4from_numba};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_5from_numba(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_context = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_numba (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_context,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_context);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_numba") < 0)) __PYX_ERR(0, 72, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_context = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_numba", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 72, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.from_numba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_4from_numba(__pyx_v_context);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_4from_numba(PyObject *__pyx_v_context) {
  PyObject *__pyx_v_numba = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("from_numba", 0);
  __Pyx_INCREF(__pyx_v_context);

  /* "cudf/_libxx/arrow/_cuda.pyx":87
 *           Context instance.
 *         """
 *         if context is None:             # <<<<<<<<<<<<<<
 *             import numba.cuda
 *             context = numba.cuda.current_context()
 */
  __pyx_t_1 = (__pyx_v_context == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cudf/_libxx/arrow/_cuda.pyx":88
 *         """
 *         if context is None:
 *             import numba.cuda             # <<<<<<<<<<<<<<
 *             context = numba.cuda.current_context()
 *         return Context(device_number=context.device.id,
 */
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_numba_cuda, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_numba = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":89
 *         if context is None:
 *             import numba.cuda
 *             context = numba.cuda.current_context()             # <<<<<<<<<<<<<<
 *         return Context(device_number=context.device.id,
 *                        handle=context.handle.value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_numba, __pyx_n_s_cuda); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_current_context); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_context, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":87
 *           Context instance.
 *         """
 *         if context is None:             # <<<<<<<<<<<<<<
 *             import numba.cuda
 *             context = numba.cuda.current_context()
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":90
 *             import numba.cuda
 *             context = numba.cuda.current_context()
 *         return Context(device_number=context.device.id,             # <<<<<<<<<<<<<<
 *                        handle=context.handle.value)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_context, __pyx_n_s_device); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_device_number, __pyx_t_4) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":91
 *             context = numba.cuda.current_context()
 *         return Context(device_number=context.device.id,
 *                        handle=context.handle.value)             # <<<<<<<<<<<<<<
 * 
 *     def to_numba(self):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_context, __pyx_n_s_handle); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_handle, __pyx_t_5) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":90
 *             import numba.cuda
 *             context = numba.cuda.current_context()
 *         return Context(device_number=context.device.id,             # <<<<<<<<<<<<<<
 *                        handle=context.handle.value)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":72
 * 
 *     @staticmethod
 *     def from_numba(context=None):             # <<<<<<<<<<<<<<
 *         """
 *         Create a Context instance from a Numba CUDA context.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.from_numba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_numba);
  __Pyx_XDECREF(__pyx_v_context);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":93
 *                        handle=context.handle.value)
 * 
 *     def to_numba(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Context to a Numba CUDA context.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_7to_numba(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_6to_numba[] = "Context.to_numba(self)\n\n        Convert Context to a Numba CUDA context.\n\n        Returns\n        -------\n        context : numba.cuda.cudadrv.driver.Context\n          Numba CUDA context instance.\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_7to_numba(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_numba (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_6to_numba(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":110
 *         class DummyPendingDeallocs(object):
 *             # Context is managed by pyarrow
 *             def add_item(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *                 pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_8to_numba_20DummyPendingDeallocs_1add_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_7Context_8to_numba_20DummyPendingDeallocs_1add_item = {"add_item", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_8to_numba_20DummyPendingDeallocs_1add_item, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_8to_numba_20DummyPendingDeallocs_1add_item(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_item (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "add_item") < 0)) __PYX_ERR(0, 110, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_item", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 110, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.to_numba.DummyPendingDeallocs.add_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_8to_numba_20DummyPendingDeallocs_add_item(__pyx_self, __pyx_v_self, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_8to_numba_20DummyPendingDeallocs_add_item(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_item", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":93
 *                        handle=context.handle.value)
 * 
 *     def to_numba(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Context to a Numba CUDA context.
 */

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_6to_numba(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self) {
  PyObject *__pyx_v_ctypes = NULL;
  PyObject *__pyx_v_numba = NULL;
  PyObject *__pyx_v_device = NULL;
  PyObject *__pyx_v_handle = NULL;
  PyObject *__pyx_v_context = NULL;
  PyObject *__pyx_v_DummyPendingDeallocs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("to_numba", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":102
 *           Numba CUDA context instance.
 *         """
 *         import ctypes             # <<<<<<<<<<<<<<
 *         import numba.cuda
 *         device = numba.cuda.gpus[self.device_number]
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_ctypes, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ctypes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":103
 *         """
 *         import ctypes
 *         import numba.cuda             # <<<<<<<<<<<<<<
 *         device = numba.cuda.gpus[self.device_number]
 *         handle = ctypes.c_void_p(self.handle)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numba_cuda, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_numba = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":104
 *         import ctypes
 *         import numba.cuda
 *         device = numba.cuda.gpus[self.device_number]             # <<<<<<<<<<<<<<
 *         handle = ctypes.c_void_p(self.handle)
 *         context = numba.cuda.cudadrv.driver.Context(device, handle)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_numba, __pyx_n_s_cuda); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_gpus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_self->device_number, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_device = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":105
 *         import numba.cuda
 *         device = numba.cuda.gpus[self.device_number]
 *         handle = ctypes.c_void_p(self.handle)             # <<<<<<<<<<<<<<
 *         context = numba.cuda.cudadrv.driver.Context(device, handle)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctypes, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_handle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_handle = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":106
 *         device = numba.cuda.gpus[self.device_number]
 *         handle = ctypes.c_void_p(self.handle)
 *         context = numba.cuda.cudadrv.driver.Context(device, handle)             # <<<<<<<<<<<<<<
 * 
 *         class DummyPendingDeallocs(object):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_numba, __pyx_n_s_cuda); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_cudadrv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_driver); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_device, __pyx_v_handle};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_device, __pyx_v_handle};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_device);
    __Pyx_GIVEREF(__pyx_v_device);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_device);
    __Pyx_INCREF(__pyx_v_handle);
    __Pyx_GIVEREF(__pyx_v_handle);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_handle);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_context = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":108
 *         context = numba.cuda.cudadrv.driver.Context(device, handle)
 * 
 *         class DummyPendingDeallocs(object):             # <<<<<<<<<<<<<<
 *             # Context is managed by pyarrow
 *             def add_item(self, *args, **kwargs):
 */
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_tuple_, __pyx_n_s_DummyPendingDeallocs, __pyx_n_s_to_numba_locals_DummyPendingDeal, (PyObject *) NULL, __pyx_n_s_cudf__libxx_arrow__cuda, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "cudf/_libxx/arrow/_cuda.pyx":110
 *         class DummyPendingDeallocs(object):
 *             # Context is managed by pyarrow
 *             def add_item(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *                 pass
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_7Context_8to_numba_20DummyPendingDeallocs_1add_item, 0, __pyx_n_s_to_numba_locals_DummyPendingDeal_2, NULL, __pyx_n_s_cudf__libxx_arrow__cuda, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_add_item, __pyx_t_4) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":108
 *         context = numba.cuda.cudadrv.driver.Context(device, handle)
 * 
 *         class DummyPendingDeallocs(object):             # <<<<<<<<<<<<<<
 *             # Context is managed by pyarrow
 *             def add_item(self, *args, **kwargs):
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_DummyPendingDeallocs, __pyx_tuple_, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_DummyPendingDeallocs = __pyx_t_4;
  __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":113
 *                 pass
 * 
 *         context.deallocations = DummyPendingDeallocs()             # <<<<<<<<<<<<<<
 *         return context
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_v_DummyPendingDeallocs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_context, __pyx_n_s_deallocations, __pyx_t_1) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":114
 * 
 *         context.deallocations = DummyPendingDeallocs()
 *         return context             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_context);
  __pyx_r = __pyx_v_context;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":93
 *                        handle=context.handle.value)
 * 
 *     def to_numba(self):             # <<<<<<<<<<<<<<
 *         """
 *         Convert Context to a Numba CUDA context.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.to_numba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ctypes);
  __Pyx_XDECREF(__pyx_v_numba);
  __Pyx_XDECREF(__pyx_v_device);
  __Pyx_XDECREF(__pyx_v_handle);
  __Pyx_XDECREF(__pyx_v_context);
  __Pyx_XDECREF(__pyx_v_DummyPendingDeallocs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":117
 * 
 *     @staticmethod
 *     def get_num_devices():             # <<<<<<<<<<<<<<
 *         """ Return the number of GPU devices.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_9get_num_devices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_8get_num_devices[] = "Context.get_num_devices()\n Return the number of GPU devices.\n        ";
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_7Context_9get_num_devices = {"get_num_devices", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_9get_num_devices, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_8get_num_devices};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_9get_num_devices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_num_devices (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_num_devices", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_num_devices", 0))) return NULL;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_8get_num_devices();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_8get_num_devices(void) {
   arrow::cuda::CudaDeviceManager *__pyx_v_manager;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_num_devices", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":121
 *         """
 *         cdef CCudaDeviceManager* manager
 *         check_status(CCudaDeviceManager.GetInstance(&manager))             # <<<<<<<<<<<<<<
 *         return manager.num_devices()
 * 
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status( arrow::cuda::CudaDeviceManager::GetInstance((&__pyx_v_manager))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 121, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":122
 *         cdef CCudaDeviceManager* manager
 *         check_status(CCudaDeviceManager.GetInstance(&manager))
 *         return manager.num_devices()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_manager->num_devices()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":117
 * 
 *     @staticmethod
 *     def get_num_devices():             # <<<<<<<<<<<<<<
 *         """ Return the number of GPU devices.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.get_num_devices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":125
 * 
 *     @property
 *     def device_number(self):             # <<<<<<<<<<<<<<
 *         """ Return context device number.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_13device_number_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_13device_number_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_13device_number___get__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_13device_number___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":128
 *         """ Return context device number.
 *         """
 *         return self.device_number             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->device_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":125
 * 
 *     @property
 *     def device_number(self):             # <<<<<<<<<<<<<<
 *         """ Return context device number.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.device_number.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":131
 * 
 *     @property
 *     def handle(self):             # <<<<<<<<<<<<<<
 *         """ Return pointer to context handle.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_6handle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_6handle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_6handle___get__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_6handle___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":134
 *         """ Return pointer to context handle.
 *         """
 *         return <uintptr_t>self.context.get().handle()             # <<<<<<<<<<<<<<
 * 
 *     cdef void init(self, const shared_ptr[CCudaContext]& ctx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->context.get()->handle())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":131
 * 
 *     @property
 *     def handle(self):             # <<<<<<<<<<<<<<
 *         """ Return pointer to context handle.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.handle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":136
 *         return <uintptr_t>self.context.get().handle()
 * 
 *     cdef void init(self, const shared_ptr[CCudaContext]& ctx):             # <<<<<<<<<<<<<<
 *         self.context = ctx
 * 
 */

static void __pyx_f_4cudf_6_libxx_5arrow_5_cuda_7Context_init(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, std::shared_ptr< arrow::cuda::CudaContext>  const &__pyx_v_ctx) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":137
 * 
 *     cdef void init(self, const shared_ptr[CCudaContext]& ctx):
 *         self.context = ctx             # <<<<<<<<<<<<<<
 * 
 *     def synchronize(self):
 */
  __pyx_v_self->context = __pyx_v_ctx;

  /* "cudf/_libxx/arrow/_cuda.pyx":136
 *         return <uintptr_t>self.context.get().handle()
 * 
 *     cdef void init(self, const shared_ptr[CCudaContext]& ctx):             # <<<<<<<<<<<<<<
 *         self.context = ctx
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cudf/_libxx/arrow/_cuda.pyx":139
 *         self.context = ctx
 * 
 *     def synchronize(self):             # <<<<<<<<<<<<<<
 *         """Blocks until the device has completed all preceding requested
 *         tasks.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_11synchronize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_10synchronize[] = "Context.synchronize(self)\nBlocks until the device has completed all preceding requested\n        tasks.\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_11synchronize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("synchronize (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_10synchronize(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_10synchronize(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("synchronize", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":143
 *         tasks.
 *         """
 *         check_status(self.context.get().Synchronize())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->context.get()->Synchronize()); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 143, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":139
 *         self.context = ctx
 * 
 *     def synchronize(self):             # <<<<<<<<<<<<<<
 *         """Blocks until the device has completed all preceding requested
 *         tasks.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.synchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":146
 * 
 *     @property
 *     def bytes_allocated(self):             # <<<<<<<<<<<<<<
 *         """Return the number of allocated bytes.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_15bytes_allocated_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_15bytes_allocated_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_15bytes_allocated___get__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_15bytes_allocated___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":149
 *         """Return the number of allocated bytes.
 *         """
 *         return self.context.get().bytes_allocated()             # <<<<<<<<<<<<<<
 * 
 *     def get_device_address(self, address):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->context.get()->bytes_allocated()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":146
 * 
 *     @property
 *     def bytes_allocated(self):             # <<<<<<<<<<<<<<
 *         """Return the number of allocated bytes.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.bytes_allocated.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":151
 *         return self.context.get().bytes_allocated()
 * 
 *     def get_device_address(self, address):             # <<<<<<<<<<<<<<
 *         """Return the device address that is reachable from kernels running in
 *         the context
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_13get_device_address(PyObject *__pyx_v_self, PyObject *__pyx_v_address); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_12get_device_address[] = "Context.get_device_address(self, address)\nReturn the device address that is reachable from kernels running in\n        the context\n\n        Parameters\n        ----------\n        address : int\n          Specify memory address value\n\n        Returns\n        -------\n        device_address : int\n          Device address accessible from device context\n\n        Notes\n        -----\n        The device address is defined as a memory address accessible\n        by device. While it is often a device memory address but it\n        can be also a host memory address, for instance, when the\n        memory is allocated as host memory (using cudaMallocHost or\n        cudaHostAlloc) or as managed memory (using cudaMallocManaged)\n        or the host memory is page-locked (using cudaHostRegister).\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_13get_device_address(PyObject *__pyx_v_self, PyObject *__pyx_v_address) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_device_address (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_12get_device_address(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self), ((PyObject *)__pyx_v_address));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_12get_device_address(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_address) {
  uintptr_t __pyx_v_c_addr;
  uint8_t *__pyx_v_c_devaddr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uintptr_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_device_address", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":175
 *         """
 *         cdef:
 *             uintptr_t c_addr = address             # <<<<<<<<<<<<<<
 *             uint8_t* c_devaddr
 *         check_status(self.context.get().GetDeviceAddress(<uint8_t*>c_addr,
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_address); if (unlikely((__pyx_t_1 == ((uintptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_v_c_addr = __pyx_t_1;

  /* "cudf/_libxx/arrow/_cuda.pyx":177
 *             uintptr_t c_addr = address
 *             uint8_t* c_devaddr
 *         check_status(self.context.get().GetDeviceAddress(<uint8_t*>c_addr,             # <<<<<<<<<<<<<<
 *                                                          &c_devaddr))
 *         return <uintptr_t>c_devaddr
 */
  __pyx_t_2 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->context.get()->GetDeviceAddress(((uint8_t *)__pyx_v_c_addr), (&__pyx_v_c_devaddr))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 177, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":179
 *         check_status(self.context.get().GetDeviceAddress(<uint8_t*>c_addr,
 *                                                          &c_devaddr))
 *         return <uintptr_t>c_devaddr             # <<<<<<<<<<<<<<
 * 
 *     def new_buffer(self, nbytes):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_c_devaddr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":151
 *         return self.context.get().bytes_allocated()
 * 
 *     def get_device_address(self, address):             # <<<<<<<<<<<<<<
 *         """Return the device address that is reachable from kernels running in
 *         the context
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.get_device_address", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":181
 *         return <uintptr_t>c_devaddr
 * 
 *     def new_buffer(self, nbytes):             # <<<<<<<<<<<<<<
 *         """Return new device buffer.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_15new_buffer(PyObject *__pyx_v_self, PyObject *__pyx_v_nbytes); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_14new_buffer[] = "Context.new_buffer(self, nbytes)\nReturn new device buffer.\n\n        Parameters\n        ----------\n        nbytes : int\n          Specify the number of bytes to be allocated.\n\n        Returns\n        -------\n        buf : CudaBuffer\n          Allocated buffer.\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_15new_buffer(PyObject *__pyx_v_self, PyObject *__pyx_v_nbytes) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_buffer (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_14new_buffer(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self), ((PyObject *)__pyx_v_nbytes));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_14new_buffer(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_nbytes) {
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_v_cudabuf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("new_buffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":195
 *         """
 *         cdef shared_ptr[CCudaBuffer] cudabuf
 *         check_status(self.context.get().Allocate(nbytes, &cudabuf))             # <<<<<<<<<<<<<<
 *         return pyarrow_wrap_cudabuffer(cudabuf)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int64_t(__pyx_v_nbytes); if (unlikely((__pyx_t_1 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->context.get()->Allocate(__pyx_t_1, (&__pyx_v_cudabuf))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 195, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":196
 *         cdef shared_ptr[CCudaBuffer] cudabuf
 *         check_status(self.context.get().Allocate(nbytes, &cudabuf))
 *         return pyarrow_wrap_cudabuffer(cudabuf)             # <<<<<<<<<<<<<<
 * 
 *     def foreign_buffer(self, address, size, base=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = pyarrow_wrap_cudabuffer(__pyx_v_cudabuf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":181
 *         return <uintptr_t>c_devaddr
 * 
 *     def new_buffer(self, nbytes):             # <<<<<<<<<<<<<<
 *         """Return new device buffer.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.new_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":198
 *         return pyarrow_wrap_cudabuffer(cudabuf)
 * 
 *     def foreign_buffer(self, address, size, base=None):             # <<<<<<<<<<<<<<
 *         """Create device buffer from address and size as a view.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_17foreign_buffer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_16foreign_buffer[] = "Context.foreign_buffer(self, address, size, base=None)\nCreate device buffer from address and size as a view.\n\n        The caller is responsible for allocating and freeing the\n        memory. When `address==size==0` then a new zero-sized buffer\n        is returned.\n\n        Parameters\n        ----------\n        address : int\n          Specify the starting address of the buffer. The address can\n          refer to both device or host memory but it must be\n          accessible from device after mapping it with\n          `get_device_address` method.\n        size : int\n          Specify the size of device buffer in bytes.\n        base : {None, object}\n          Specify object that owns the referenced memory.\n\n        Returns\n        -------\n        cbuf : CudaBuffer\n          Device buffer as a view of device reachable memory.\n\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_17foreign_buffer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_address = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_base = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("foreign_buffer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_address,&__pyx_n_s_size,&__pyx_n_s_base,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_address)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foreign_buffer", 0, 2, 3, 1); __PYX_ERR(0, 198, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_base);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "foreign_buffer") < 0)) __PYX_ERR(0, 198, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_address = values[0];
    __pyx_v_size = values[1];
    __pyx_v_base = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("foreign_buffer", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 198, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.foreign_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_16foreign_buffer(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self), __pyx_v_address, __pyx_v_size, __pyx_v_base);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_16foreign_buffer(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_address, PyObject *__pyx_v_size, PyObject *__pyx_v_base) {
  uintptr_t __pyx_v_c_addr;
  int64_t __pyx_v_c_size;
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_v_cudabuf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  uintptr_t __pyx_t_7;
  int64_t __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("foreign_buffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":223
 * 
 *         """
 *         if not address and size == 0:             # <<<<<<<<<<<<<<
 *             return self.new_buffer(0)
 *         cdef:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_address); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_size, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":224
 *         """
 *         if not address and size == 0:
 *             return self.new_buffer(0)             # <<<<<<<<<<<<<<
 *         cdef:
 *             uintptr_t c_addr = self.get_device_address(address)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_new_buffer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_0);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":223
 * 
 *         """
 *         if not address and size == 0:             # <<<<<<<<<<<<<<
 *             return self.new_buffer(0)
 *         cdef:
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":226
 *             return self.new_buffer(0)
 *         cdef:
 *             uintptr_t c_addr = self.get_device_address(address)             # <<<<<<<<<<<<<<
 *             int64_t c_size = size
 *             shared_ptr[CCudaBuffer] cudabuf
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_device_address); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_address) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_address);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((uintptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_c_addr = __pyx_t_7;

  /* "cudf/_libxx/arrow/_cuda.pyx":227
 *         cdef:
 *             uintptr_t c_addr = self.get_device_address(address)
 *             int64_t c_size = size             # <<<<<<<<<<<<<<
 *             shared_ptr[CCudaBuffer] cudabuf
 *         check_status(self.context.get().View(<uint8_t*>c_addr,
 */
  __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_v_size); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_v_c_size = __pyx_t_8;

  /* "cudf/_libxx/arrow/_cuda.pyx":229
 *             int64_t c_size = size
 *             shared_ptr[CCudaBuffer] cudabuf
 *         check_status(self.context.get().View(<uint8_t*>c_addr,             # <<<<<<<<<<<<<<
 *                                              c_size,
 *                                              &cudabuf))
 */
  __pyx_t_9 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->context.get()->View(((uint8_t *)__pyx_v_c_addr), __pyx_v_c_size, (&__pyx_v_cudabuf))); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 229, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":232
 *                                              c_size,
 *                                              &cudabuf))
 *         return pyarrow_wrap_cudabuffer_base(cudabuf, base)             # <<<<<<<<<<<<<<
 * 
 *     def open_ipc_buffer(self, ipc_handle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = pyarrow_wrap_cudabuffer_base(__pyx_v_cudabuf, __pyx_v_base); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":198
 *         return pyarrow_wrap_cudabuffer(cudabuf)
 * 
 *     def foreign_buffer(self, address, size, base=None):             # <<<<<<<<<<<<<<
 *         """Create device buffer from address and size as a view.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.foreign_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":234
 *         return pyarrow_wrap_cudabuffer_base(cudabuf, base)
 * 
 *     def open_ipc_buffer(self, ipc_handle):             # <<<<<<<<<<<<<<
 *         """ Open existing CUDA IPC memory handle
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_19open_ipc_buffer(PyObject *__pyx_v_self, PyObject *__pyx_v_ipc_handle); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_18open_ipc_buffer[] = "Context.open_ipc_buffer(self, ipc_handle)\n Open existing CUDA IPC memory handle\n\n        Parameters\n        ----------\n        ipc_handle : IpcMemHandle\n          Specify opaque pointer to CUipcMemHandle (driver API).\n\n        Returns\n        -------\n        buf : CudaBuffer\n          referencing device buffer\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_19open_ipc_buffer(PyObject *__pyx_v_self, PyObject *__pyx_v_ipc_handle) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open_ipc_buffer (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_18open_ipc_buffer(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self), ((PyObject *)__pyx_v_ipc_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_18open_ipc_buffer(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_ipc_handle) {
  std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  __pyx_v_handle;
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_v_cudabuf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("open_ipc_buffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":247
 *           referencing device buffer
 *         """
 *         handle = pyarrow_unwrap_cudaipcmemhandle(ipc_handle)             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CCudaBuffer] cudabuf
 *         check_status(self.context.get().OpenIpcBuffer(handle.get()[0],
 */
  __pyx_v_handle = pyarrow_unwrap_cudaipcmemhandle(__pyx_v_ipc_handle);

  /* "cudf/_libxx/arrow/_cuda.pyx":249
 *         handle = pyarrow_unwrap_cudaipcmemhandle(ipc_handle)
 *         cdef shared_ptr[CCudaBuffer] cudabuf
 *         check_status(self.context.get().OpenIpcBuffer(handle.get()[0],             # <<<<<<<<<<<<<<
 *                                                       &cudabuf))
 *         return pyarrow_wrap_cudabuffer(cudabuf)
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->context.get()->OpenIpcBuffer((__pyx_v_handle.get()[0]), (&__pyx_v_cudabuf))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 249, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":251
 *         check_status(self.context.get().OpenIpcBuffer(handle.get()[0],
 *                                                       &cudabuf))
 *         return pyarrow_wrap_cudabuffer(cudabuf)             # <<<<<<<<<<<<<<
 * 
 *     def buffer_from_data(self, object data, int64_t offset=0, int64_t size=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = pyarrow_wrap_cudabuffer(__pyx_v_cudabuf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":234
 *         return pyarrow_wrap_cudabuffer_base(cudabuf, base)
 * 
 *     def open_ipc_buffer(self, ipc_handle):             # <<<<<<<<<<<<<<
 *         """ Open existing CUDA IPC memory handle
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.open_ipc_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":253
 *         return pyarrow_wrap_cudabuffer(cudabuf)
 * 
 *     def buffer_from_data(self, object data, int64_t offset=0, int64_t size=-1):             # <<<<<<<<<<<<<<
 *         """Create device buffer and initalize with data.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_21buffer_from_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_20buffer_from_data[] = "Context.buffer_from_data(self, data, int64_t offset=0, int64_t size=-1)\nCreate device buffer and initalize with data.\n\n        Parameters\n        ----------\n        data : {CudaBuffer, HostBuffer, Buffer, array-like}\n          Specify data to be copied to device buffer.\n        offset : int\n          Specify the offset of input buffer for device data\n          buffering. Default: 0.\n        size : int\n          Specify the size of device buffer in bytes. Default: all\n          (starting from input offset)\n\n        Returns\n        -------\n        cbuf : CudaBuffer\n          Device buffer with copied data.\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_21buffer_from_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  int64_t __pyx_v_offset;
  int64_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buffer_from_data (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_offset,&__pyx_n_s_size,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "buffer_from_data") < 0)) __PYX_ERR(0, 253, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    if (values[1]) {
      __pyx_v_offset = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_offset == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L3_error)
    } else {
      __pyx_v_offset = ((int64_t)0);
    }
    if (values[2]) {
      __pyx_v_size = __Pyx_PyInt_As_int64_t(values[2]); if (unlikely((__pyx_v_size == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L3_error)
    } else {
      __pyx_v_size = ((int64_t)-1L);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("buffer_from_data", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 253, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.buffer_from_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_20buffer_from_data(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self), __pyx_v_data, __pyx_v_offset, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_20buffer_from_data(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_data, int64_t __pyx_v_offset, int64_t __pyx_v_size) {
  int __pyx_v_is_host_data;
  PyObject *__pyx_v_buf = NULL;
  PyObject *__pyx_v_bsize = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int64_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("buffer_from_data", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":272
 *           Device buffer with copied data.
 *         """
 *         is_host_data = not pyarrow_is_cudabuffer(data)             # <<<<<<<<<<<<<<
 *         buf = as_buffer(data) if is_host_data else data
 * 
 */
  __pyx_v_is_host_data = (!(pyarrow_is_cudabuffer(__pyx_v_data) != 0));

  /* "cudf/_libxx/arrow/_cuda.pyx":273
 *         """
 *         is_host_data = not pyarrow_is_cudabuffer(data)
 *         buf = as_buffer(data) if is_host_data else data             # <<<<<<<<<<<<<<
 * 
 *         bsize = buf.size
 */
  if ((__pyx_v_is_host_data != 0)) {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_as_buffer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_data);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_data);
    __pyx_t_1 = __pyx_v_data;
  }
  __pyx_v_buf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":275
 *         buf = as_buffer(data) if is_host_data else data
 * 
 *         bsize = buf.size             # <<<<<<<<<<<<<<
 *         if offset < 0 or (bsize and offset >= bsize):
 *             raise ValueError('offset argument is out-of-range')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bsize = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":276
 * 
 *         bsize = buf.size
 *         if offset < 0 or (bsize and offset >= bsize):             # <<<<<<<<<<<<<<
 *             raise ValueError('offset argument is out-of-range')
 *         if size < 0:
 */
  __pyx_t_6 = ((__pyx_v_offset < 0) != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_bsize); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 276, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_bsize, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_5)) {

    /* "cudf/_libxx/arrow/_cuda.pyx":277
 *         bsize = buf.size
 *         if offset < 0 or (bsize and offset >= bsize):
 *             raise ValueError('offset argument is out-of-range')             # <<<<<<<<<<<<<<
 *         if size < 0:
 *             size = bsize - offset
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 277, __pyx_L1_error)

    /* "cudf/_libxx/arrow/_cuda.pyx":276
 * 
 *         bsize = buf.size
 *         if offset < 0 or (bsize and offset >= bsize):             # <<<<<<<<<<<<<<
 *             raise ValueError('offset argument is out-of-range')
 *         if size < 0:
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":278
 *         if offset < 0 or (bsize and offset >= bsize):
 *             raise ValueError('offset argument is out-of-range')
 *         if size < 0:             # <<<<<<<<<<<<<<
 *             size = bsize - offset
 *         elif offset + size > bsize:
 */
  __pyx_t_5 = ((__pyx_v_size < 0) != 0);
  if (__pyx_t_5) {

    /* "cudf/_libxx/arrow/_cuda.pyx":279
 *             raise ValueError('offset argument is out-of-range')
 *         if size < 0:
 *             size = bsize - offset             # <<<<<<<<<<<<<<
 *         elif offset + size > bsize:
 *             raise ValueError(
 */
    __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_offset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Subtract(__pyx_v_bsize, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_7 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_size = __pyx_t_7;

    /* "cudf/_libxx/arrow/_cuda.pyx":278
 *         if offset < 0 or (bsize and offset >= bsize):
 *             raise ValueError('offset argument is out-of-range')
 *         if size < 0:             # <<<<<<<<<<<<<<
 *             size = bsize - offset
 *         elif offset + size > bsize:
 */
    goto __pyx_L7;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":280
 *         if size < 0:
 *             size = bsize - offset
 *         elif offset + size > bsize:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 'requested larger slice than available in device buffer')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t((__pyx_v_offset + __pyx_v_size)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_bsize, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "cudf/_libxx/arrow/_cuda.pyx":281
 *             size = bsize - offset
 *         elif offset + size > bsize:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 'requested larger slice than available in device buffer')
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 281, __pyx_L1_error)

    /* "cudf/_libxx/arrow/_cuda.pyx":280
 *         if size < 0:
 *             size = bsize - offset
 *         elif offset + size > bsize:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 'requested larger slice than available in device buffer')
 */
  }
  __pyx_L7:;

  /* "cudf/_libxx/arrow/_cuda.pyx":284
 *                 'requested larger slice than available in device buffer')
 * 
 *         if offset != 0 or size != bsize:             # <<<<<<<<<<<<<<
 *             buf = buf.slice(offset, size)
 * 
 */
  __pyx_t_6 = ((__pyx_v_offset != 0) != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_bsize, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_t_6;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_5) {

    /* "cudf/_libxx/arrow/_cuda.pyx":285
 * 
 *         if offset != 0 or size != bsize:
 *             buf = buf.slice(offset, size)             # <<<<<<<<<<<<<<
 * 
 *         result = self.new_buffer(size)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_slice); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_offset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_3, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_3, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_4);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_buf, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":284
 *                 'requested larger slice than available in device buffer')
 * 
 *         if offset != 0 or size != bsize:             # <<<<<<<<<<<<<<
 *             buf = buf.slice(offset, size)
 * 
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":287
 *             buf = buf.slice(offset, size)
 * 
 *         result = self.new_buffer(size)             # <<<<<<<<<<<<<<
 *         if is_host_data:
 *             result.copy_from_host(buf, position=0, nbytes=size)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_new_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyInt_From_int64_t(__pyx_v_size); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":288
 * 
 *         result = self.new_buffer(size)
 *         if is_host_data:             # <<<<<<<<<<<<<<
 *             result.copy_from_host(buf, position=0, nbytes=size)
 *         else:
 */
  __pyx_t_5 = (__pyx_v_is_host_data != 0);
  if (__pyx_t_5) {

    /* "cudf/_libxx/arrow/_cuda.pyx":289
 *         result = self.new_buffer(size)
 *         if is_host_data:
 *             result.copy_from_host(buf, position=0, nbytes=size)             # <<<<<<<<<<<<<<
 *         else:
 *             result.copy_from_device(buf, position=0, nbytes=size)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_result, __pyx_n_s_copy_from_host); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_buf);
    __Pyx_GIVEREF(__pyx_v_buf);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_buf);
    __pyx_t_10 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_position, __pyx_int_0) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_nbytes, __pyx_t_4) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":288
 * 
 *         result = self.new_buffer(size)
 *         if is_host_data:             # <<<<<<<<<<<<<<
 *             result.copy_from_host(buf, position=0, nbytes=size)
 *         else:
 */
    goto __pyx_L11;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":291
 *             result.copy_from_host(buf, position=0, nbytes=size)
 *         else:
 *             result.copy_from_device(buf, position=0, nbytes=size)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_result, __pyx_n_s_copy_from_device); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v_buf);
    __Pyx_GIVEREF(__pyx_v_buf);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_buf);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_position, __pyx_int_0) < 0) __PYX_ERR(0, 291, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_nbytes, __pyx_t_1) < 0) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L11:;

  /* "cudf/_libxx/arrow/_cuda.pyx":292
 *         else:
 *             result.copy_from_device(buf, position=0, nbytes=size)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def buffer_from_object(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":253
 *         return pyarrow_wrap_cudabuffer(cudabuf)
 * 
 *     def buffer_from_data(self, object data, int64_t offset=0, int64_t size=-1):             # <<<<<<<<<<<<<<
 *         """Create device buffer and initalize with data.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.buffer_from_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_buf);
  __Pyx_XDECREF(__pyx_v_bsize);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":294
 *         return result
 * 
 *     def buffer_from_object(self, obj):             # <<<<<<<<<<<<<<
 *         """Create device buffer view of arbitrary object that references
 *         device accessible memory.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_23buffer_from_object(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_22buffer_from_object[] = "Context.buffer_from_object(self, obj)\nCreate device buffer view of arbitrary object that references\n        device accessible memory.\n\n        When the object contains a non-contiguous view of device\n        accessbile memory then the returned device buffer will contain\n        contiguous view of the memory, that is, including the\n        intermediate data that is otherwise invisible to the input\n        object.\n\n        Parameters\n        ----------\n        obj : {object, Buffer, HostBuffer, CudaBuffer, ...}\n          Specify an object that holds (device or host) address that\n          can be accessed from device. This includes objects with\n          types defined in pyarrow.cuda as well as arbitrary objects\n          that implement the CUDA array interface as defined by numba.\n\n        Returns\n        -------\n        cbuf : CudaBuffer\n          Device buffer as a view of device accessible memory.\n\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_23buffer_from_object(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buffer_from_object (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_22buffer_from_object(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_22buffer_from_object(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_v_desc = NULL;
  PyObject *__pyx_v_addr = NULL;
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_end = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  __Pyx_RefNannySetupContext("buffer_from_object", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":318
 * 
 *         """
 *         if isinstance(obj, HostBuffer):             # <<<<<<<<<<<<<<
 *             return self.foreign_buffer(obj.address, obj.size, base=obj)
 *         elif isinstance(obj, Buffer):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_HostBuffer); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cudf/_libxx/arrow/_cuda.pyx":319
 *         """
 *         if isinstance(obj, HostBuffer):
 *             return self.foreign_buffer(obj.address, obj.size, base=obj)             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Buffer):
 *             return CudaBuffer.from_buffer(obj)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_foreign_buffer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_address); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_base, __pyx_v_obj) < 0) __PYX_ERR(0, 319, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":318
 * 
 *         """
 *         if isinstance(obj, HostBuffer):             # <<<<<<<<<<<<<<
 *             return self.foreign_buffer(obj.address, obj.size, base=obj)
 *         elif isinstance(obj, Buffer):
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":320
 *         if isinstance(obj, HostBuffer):
 *             return self.foreign_buffer(obj.address, obj.size, base=obj)
 *         elif isinstance(obj, Buffer):             # <<<<<<<<<<<<<<
 *             return CudaBuffer.from_buffer(obj)
 *         elif isinstance(obj, CudaBuffer):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_ptype_7pyarrow_3lib_Buffer); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":321
 *             return self.foreign_buffer(obj.address, obj.size, base=obj)
 *         elif isinstance(obj, Buffer):
 *             return CudaBuffer.from_buffer(obj)             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, CudaBuffer):
 *             return obj
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer), __pyx_n_s_from_buffer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_obj);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":320
 *         if isinstance(obj, HostBuffer):
 *             return self.foreign_buffer(obj.address, obj.size, base=obj)
 *         elif isinstance(obj, Buffer):             # <<<<<<<<<<<<<<
 *             return CudaBuffer.from_buffer(obj)
 *         elif isinstance(obj, CudaBuffer):
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":322
 *         elif isinstance(obj, Buffer):
 *             return CudaBuffer.from_buffer(obj)
 *         elif isinstance(obj, CudaBuffer):             # <<<<<<<<<<<<<<
 *             return obj
 *         elif hasattr(obj, '__cuda_array_interface__'):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cudf/_libxx/arrow/_cuda.pyx":323
 *             return CudaBuffer.from_buffer(obj)
 *         elif isinstance(obj, CudaBuffer):
 *             return obj             # <<<<<<<<<<<<<<
 *         elif hasattr(obj, '__cuda_array_interface__'):
 *             desc = obj.__cuda_array_interface__
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_obj);
    __pyx_r = __pyx_v_obj;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":322
 *         elif isinstance(obj, Buffer):
 *             return CudaBuffer.from_buffer(obj)
 *         elif isinstance(obj, CudaBuffer):             # <<<<<<<<<<<<<<
 *             return obj
 *         elif hasattr(obj, '__cuda_array_interface__'):
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":324
 *         elif isinstance(obj, CudaBuffer):
 *             return obj
 *         elif hasattr(obj, '__cuda_array_interface__'):             # <<<<<<<<<<<<<<
 *             desc = obj.__cuda_array_interface__
 *             addr = desc['data'][0]
 */
  __pyx_t_2 = __Pyx_HasAttr(__pyx_v_obj, __pyx_n_u_cuda_array_interface); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":325
 *             return obj
 *         elif hasattr(obj, '__cuda_array_interface__'):
 *             desc = obj.__cuda_array_interface__             # <<<<<<<<<<<<<<
 *             addr = desc['data'][0]
 *             if addr is None:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_cuda_array_interface); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_desc = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":326
 *         elif hasattr(obj, '__cuda_array_interface__'):
 *             desc = obj.__cuda_array_interface__
 *             addr = desc['data'][0]             # <<<<<<<<<<<<<<
 *             if addr is None:
 *                 return self.new_buffer(0)
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_desc, __pyx_n_u_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_addr = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":327
 *             desc = obj.__cuda_array_interface__
 *             addr = desc['data'][0]
 *             if addr is None:             # <<<<<<<<<<<<<<
 *                 return self.new_buffer(0)
 *             import numpy as np
 */
    __pyx_t_1 = (__pyx_v_addr == Py_None);
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "cudf/_libxx/arrow/_cuda.pyx":328
 *             addr = desc['data'][0]
 *             if addr is None:
 *                 return self.new_buffer(0)             # <<<<<<<<<<<<<<
 *             import numpy as np
 *             start, end = get_contiguous_span(
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_new_buffer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_int_0);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "cudf/_libxx/arrow/_cuda.pyx":327
 *             desc = obj.__cuda_array_interface__
 *             addr = desc['data'][0]
 *             if addr is None:             # <<<<<<<<<<<<<<
 *                 return self.new_buffer(0)
 *             import numpy as np
 */
    }

    /* "cudf/_libxx/arrow/_cuda.pyx":329
 *             if addr is None:
 *                 return self.new_buffer(0)
 *             import numpy as np             # <<<<<<<<<<<<<<
 *             start, end = get_contiguous_span(
 *                 desc['shape'], desc.get('strides'),
 */
    __pyx_t_5 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_np = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":330
 *                 return self.new_buffer(0)
 *             import numpy as np
 *             start, end = get_contiguous_span(             # <<<<<<<<<<<<<<
 *                 desc['shape'], desc.get('strides'),
 *                 np.dtype(desc['typestr']).itemsize)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_contiguous_span); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "cudf/_libxx/arrow/_cuda.pyx":331
 *             import numpy as np
 *             start, end = get_contiguous_span(
 *                 desc['shape'], desc.get('strides'),             # <<<<<<<<<<<<<<
 *                 np.dtype(desc['typestr']).itemsize)
 *             return self.foreign_buffer(addr + start, end - start, base=obj)
 */
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_desc, __pyx_n_u_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_desc, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_n_u_strides) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_strides);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":332
 *             start, end = get_contiguous_span(
 *                 desc['shape'], desc.get('strides'),
 *                 np.dtype(desc['typestr']).itemsize)             # <<<<<<<<<<<<<<
 *             return self.foreign_buffer(addr + start, end - start, base=obj)
 *         raise ArrowTypeError('cannot create device buffer view from'
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_desc, __pyx_n_u_typestr); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_6, __pyx_t_3, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_6, __pyx_t_3, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_11, __pyx_t_8);
      __pyx_t_6 = 0;
      __pyx_t_3 = 0;
      __pyx_t_8 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 330, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_12(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_8); if (unlikely(!__pyx_t_9)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_8), 2) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 330, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }

    /* "cudf/_libxx/arrow/_cuda.pyx":330
 *                 return self.new_buffer(0)
 *             import numpy as np
 *             start, end = get_contiguous_span(             # <<<<<<<<<<<<<<
 *                 desc['shape'], desc.get('strides'),
 *                 np.dtype(desc['typestr']).itemsize)
 */
    __pyx_v_start = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_end = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":333
 *                 desc['shape'], desc.get('strides'),
 *                 np.dtype(desc['typestr']).itemsize)
 *             return self.foreign_buffer(addr + start, end - start, base=obj)             # <<<<<<<<<<<<<<
 *         raise ArrowTypeError('cannot create device buffer view from'
 *                              ' `%s` object' % (type(obj)))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_foreign_buffer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_v_addr, __pyx_v_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_end, __pyx_v_start); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
    __pyx_t_9 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_base, __pyx_v_obj) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":324
 *         elif isinstance(obj, CudaBuffer):
 *             return obj
 *         elif hasattr(obj, '__cuda_array_interface__'):             # <<<<<<<<<<<<<<
 *             desc = obj.__cuda_array_interface__
 *             addr = desc['data'][0]
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":334
 *                 np.dtype(desc['typestr']).itemsize)
 *             return self.foreign_buffer(addr + start, end - start, base=obj)
 *         raise ArrowTypeError('cannot create device buffer view from'             # <<<<<<<<<<<<<<
 *                              ' `%s` object' % (type(obj)))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ArrowTypeError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "cudf/_libxx/arrow/_cuda.pyx":335
 *             return self.foreign_buffer(addr + start, end - start, base=obj)
 *         raise ArrowTypeError('cannot create device buffer view from'
 *                              ' `%s` object' % (type(obj)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_cannot_create_device_buffer_view, ((PyObject *)Py_TYPE(__pyx_v_obj))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_9 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_9, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __PYX_ERR(0, 334, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":294
 *         return result
 * 
 *     def buffer_from_object(self, obj):             # <<<<<<<<<<<<<<
 *         """Create device buffer view of arbitrary object that references
 *         device accessible memory.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.buffer_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_desc);
  __Pyx_XDECREF(__pyx_v_addr);
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_24__reduce_cython__[] = "Context.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_24__reduce_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_26__setstate_cython__[] = "Context.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_26__setstate_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_7Context_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.Context.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":341
 *     """A serializable container for a CUDA IPC handle.
 *     """
 *     cdef void init(self, shared_ptr[CCudaIpcMemHandle]& h):             # <<<<<<<<<<<<<<
 *         self.handle = h
 * 
 */

static void __pyx_f_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_init(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_v_self, std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  &__pyx_v_h) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":342
 *     """
 *     cdef void init(self, shared_ptr[CCudaIpcMemHandle]& h):
 *         self.handle = h             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->handle = __pyx_v_h;

  /* "cudf/_libxx/arrow/_cuda.pyx":341
 *     """A serializable container for a CUDA IPC handle.
 *     """
 *     cdef void init(self, shared_ptr[CCudaIpcMemHandle]& h):             # <<<<<<<<<<<<<<
 *         self.handle = h
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cudf/_libxx/arrow/_cuda.pyx":345
 * 
 *     @staticmethod
 *     def from_buffer(Buffer opaque_handle):             # <<<<<<<<<<<<<<
 *         """Create IpcMemHandle from opaque buffer (e.g. from another
 *         process)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_1from_buffer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_from_buffer[] = "IpcMemHandle.from_buffer(Buffer opaque_handle)\nCreate IpcMemHandle from opaque buffer (e.g. from another\n        process)\n\n        Parameters\n        ----------\n        opaque_handle :\n          a CUipcMemHandle as a const void*\n\n        Results\n        -------\n        ipc_handle : IpcMemHandle\n        ";
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_1from_buffer = {"from_buffer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_1from_buffer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_from_buffer};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_1from_buffer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyarrow_3lib_Buffer *__pyx_v_opaque_handle = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_buffer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_opaque_handle,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_opaque_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_buffer") < 0)) __PYX_ERR(0, 345, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_opaque_handle = ((struct __pyx_obj_7pyarrow_3lib_Buffer *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_buffer", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.IpcMemHandle.from_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_opaque_handle), __pyx_ptype_7pyarrow_3lib_Buffer, 1, "opaque_handle", 0))) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_from_buffer(__pyx_v_opaque_handle);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_from_buffer(struct __pyx_obj_7pyarrow_3lib_Buffer *__pyx_v_opaque_handle) {
  std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  __pyx_v_handle;
  std::shared_ptr< arrow::Buffer>  __pyx_v_buf_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("from_buffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":359
 *         """
 *         cdef shared_ptr[CCudaIpcMemHandle] handle
 *         buf_ = pyarrow_unwrap_buffer(opaque_handle)             # <<<<<<<<<<<<<<
 *         check_status(CCudaIpcMemHandle.FromBuffer(buf_.get().data(), &handle))
 *         return pyarrow_wrap_cudaipcmemhandle(handle)
 */
  __pyx_v_buf_ = __pyx_f_7pyarrow_3lib_pyarrow_unwrap_buffer(((PyObject *)__pyx_v_opaque_handle));

  /* "cudf/_libxx/arrow/_cuda.pyx":360
 *         cdef shared_ptr[CCudaIpcMemHandle] handle
 *         buf_ = pyarrow_unwrap_buffer(opaque_handle)
 *         check_status(CCudaIpcMemHandle.FromBuffer(buf_.get().data(), &handle))             # <<<<<<<<<<<<<<
 *         return pyarrow_wrap_cudaipcmemhandle(handle)
 * 
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status( arrow::cuda::CudaIpcMemHandle::FromBuffer(__pyx_v_buf_.get()->data(), (&__pyx_v_handle))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 360, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":361
 *         buf_ = pyarrow_unwrap_buffer(opaque_handle)
 *         check_status(CCudaIpcMemHandle.FromBuffer(buf_.get().data(), &handle))
 *         return pyarrow_wrap_cudaipcmemhandle(handle)             # <<<<<<<<<<<<<<
 * 
 *     def serialize(self, pool=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = pyarrow_wrap_cudaipcmemhandle(__pyx_v_handle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":345
 * 
 *     @staticmethod
 *     def from_buffer(Buffer opaque_handle):             # <<<<<<<<<<<<<<
 *         """Create IpcMemHandle from opaque buffer (e.g. from another
 *         process)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.IpcMemHandle.from_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":363
 *         return pyarrow_wrap_cudaipcmemhandle(handle)
 * 
 *     def serialize(self, pool=None):             # <<<<<<<<<<<<<<
 *         """Write IpcMemHandle to a Buffer
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_3serialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_2serialize[] = "IpcMemHandle.serialize(self, pool=None)\nWrite IpcMemHandle to a Buffer\n\n        Parameters\n        ----------\n        pool : {MemoryPool, None}\n          Specify a pool to allocate memory from\n\n        Returns\n        -------\n        buf : Buffer\n          The serialized buffer.\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_3serialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pool = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("serialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pool,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pool);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "serialize") < 0)) __PYX_ERR(0, 363, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pool = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("serialize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 363, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.IpcMemHandle.serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_2serialize(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *)__pyx_v_self), __pyx_v_pool);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_2serialize(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_v_self, PyObject *__pyx_v_pool) {
   arrow::MemoryPool *__pyx_v_pool_;
  std::shared_ptr< arrow::Buffer>  __pyx_v_buf;
   arrow::cuda::CudaIpcMemHandle *__pyx_v_h;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("serialize", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":376
 *           The serialized buffer.
 *         """
 *         cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CBuffer] buf
 *         cdef CCudaIpcMemHandle* h = self.handle.get()
 */
  if (!(likely(((__pyx_v_pool) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_pool, __pyx_ptype_7pyarrow_3lib_MemoryPool))))) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_v_pool_ = __pyx_f_7pyarrow_3lib_maybe_unbox_memory_pool(((struct __pyx_obj_7pyarrow_3lib_MemoryPool *)__pyx_v_pool));

  /* "cudf/_libxx/arrow/_cuda.pyx":378
 *         cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)
 *         cdef shared_ptr[CBuffer] buf
 *         cdef CCudaIpcMemHandle* h = self.handle.get()             # <<<<<<<<<<<<<<
 *         check_status(h.Serialize(pool_, &buf))
 *         return pyarrow_wrap_buffer(buf)
 */
  __pyx_v_h = __pyx_v_self->handle.get();

  /* "cudf/_libxx/arrow/_cuda.pyx":379
 *         cdef shared_ptr[CBuffer] buf
 *         cdef CCudaIpcMemHandle* h = self.handle.get()
 *         check_status(h.Serialize(pool_, &buf))             # <<<<<<<<<<<<<<
 *         return pyarrow_wrap_buffer(buf)
 * 
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_h->Serialize(__pyx_v_pool_, (&__pyx_v_buf))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 379, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":380
 *         cdef CCudaIpcMemHandle* h = self.handle.get()
 *         check_status(h.Serialize(pool_, &buf))
 *         return pyarrow_wrap_buffer(buf)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7pyarrow_3lib_pyarrow_wrap_buffer(__pyx_v_buf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":363
 *         return pyarrow_wrap_cudaipcmemhandle(handle)
 * 
 *     def serialize(self, pool=None):             # <<<<<<<<<<<<<<
 *         """Write IpcMemHandle to a Buffer
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.IpcMemHandle.serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_4__reduce_cython__[] = "IpcMemHandle.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_4__reduce_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.IpcMemHandle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_6__setstate_cython__[] = "IpcMemHandle.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_6__setstate_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.IpcMemHandle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":392
 *     """
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("Do not call CudaBuffer's constructor directly, use "
 *                         "`<pyarrow.Context instance>.device_buffer`"
 */

/* Python wrapper */
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer___init__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer___init__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":393
 * 
 *     def __init__(self):
 *         raise TypeError("Do not call CudaBuffer's constructor directly, use "             # <<<<<<<<<<<<<<
 *                         "`<pyarrow.Context instance>.device_buffer`"
 *                         " method instead.")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 393, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":392
 *     """
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("Do not call CudaBuffer's constructor directly, use "
 *                         "`<pyarrow.Context instance>.device_buffer`"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":397
 *                         " method instead.")
 * 
 *     cdef void init_cuda(self,             # <<<<<<<<<<<<<<
 *                         const shared_ptr[CCudaBuffer]& buffer,
 *                         object base):
 */

static void __pyx_f_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_init_cuda(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, std::shared_ptr< arrow::cuda::CudaBuffer>  const &__pyx_v_buffer, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_cuda", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":400
 *                         const shared_ptr[CCudaBuffer]& buffer,
 *                         object base):
 *         self.cuda_buffer = buffer             # <<<<<<<<<<<<<<
 *         self.init(<shared_ptr[CBuffer]> buffer)
 *         self.base = base
 */
  __pyx_v_self->cuda_buffer = __pyx_v_buffer;

  /* "cudf/_libxx/arrow/_cuda.pyx":401
 *                         object base):
 *         self.cuda_buffer = buffer
 *         self.init(<shared_ptr[CBuffer]> buffer)             # <<<<<<<<<<<<<<
 *         self.base = base
 * 
 */
  ((struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_7pyarrow_3lib_Buffer *)__pyx_v_self), ((std::shared_ptr< arrow::Buffer> )__pyx_v_buffer));

  /* "cudf/_libxx/arrow/_cuda.pyx":402
 *         self.cuda_buffer = buffer
 *         self.init(<shared_ptr[CBuffer]> buffer)
 *         self.base = base             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_INCREF(__pyx_v_base);
  __Pyx_GIVEREF(__pyx_v_base);
  __Pyx_GOTREF(__pyx_v_self->base);
  __Pyx_DECREF(__pyx_v_self->base);
  __pyx_v_self->base = __pyx_v_base;

  /* "cudf/_libxx/arrow/_cuda.pyx":397
 *                         " method instead.")
 * 
 *     cdef void init_cuda(self,             # <<<<<<<<<<<<<<
 *                         const shared_ptr[CCudaBuffer]& buffer,
 *                         object base):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cudf/_libxx/arrow/_cuda.pyx":405
 * 
 *     @staticmethod
 *     def from_buffer(buf):             # <<<<<<<<<<<<<<
 *         """ Convert back generic buffer into CudaBuffer
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_3from_buffer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_2from_buffer[] = "CudaBuffer.from_buffer(buf)\n Convert back generic buffer into CudaBuffer\n\n        Parameters\n        ----------\n        buf : Buffer\n          Specify buffer containing CudaBuffer\n\n        Returns\n        -------\n        dbuf : CudaBuffer\n          Resulting device buffer.\n        ";
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_3from_buffer = {"from_buffer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_3from_buffer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_2from_buffer};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_3from_buffer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_buf = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_buffer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buf,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_buffer") < 0)) __PYX_ERR(0, 405, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_buf = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_buffer", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 405, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.from_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_2from_buffer(__pyx_v_buf);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_2from_buffer(PyObject *__pyx_v_buf) {
  std::shared_ptr< arrow::Buffer>  __pyx_v_buf_;
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_v_cbuf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("from_buffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":418
 *           Resulting device buffer.
 *         """
 *         buf_ = pyarrow_unwrap_buffer(buf)             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CCudaBuffer] cbuf
 *         check_status(CCudaBuffer.FromBuffer(buf_, &cbuf))
 */
  __pyx_v_buf_ = __pyx_f_7pyarrow_3lib_pyarrow_unwrap_buffer(__pyx_v_buf);

  /* "cudf/_libxx/arrow/_cuda.pyx":420
 *         buf_ = pyarrow_unwrap_buffer(buf)
 *         cdef shared_ptr[CCudaBuffer] cbuf
 *         check_status(CCudaBuffer.FromBuffer(buf_, &cbuf))             # <<<<<<<<<<<<<<
 *         return pyarrow_wrap_cudabuffer(cbuf)
 * 
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status( arrow::cuda::CudaBuffer::FromBuffer(__pyx_v_buf_, (&__pyx_v_cbuf))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 420, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":421
 *         cdef shared_ptr[CCudaBuffer] cbuf
 *         check_status(CCudaBuffer.FromBuffer(buf_, &cbuf))
 *         return pyarrow_wrap_cudabuffer(cbuf)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = pyarrow_wrap_cudabuffer(__pyx_v_cbuf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":405
 * 
 *     @staticmethod
 *     def from_buffer(buf):             # <<<<<<<<<<<<<<
 *         """ Convert back generic buffer into CudaBuffer
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.from_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":424
 * 
 *     @staticmethod
 *     def from_numba(mem):             # <<<<<<<<<<<<<<
 *         """Create a CudaBuffer view from numba MemoryPointer instance.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_5from_numba(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_4from_numba[] = "CudaBuffer.from_numba(mem)\nCreate a CudaBuffer view from numba MemoryPointer instance.\n\n        Parameters\n        ----------\n        mem :  numba.cuda.cudadrv.driver.MemoryPointer\n\n        Returns\n        -------\n        cbuf : CudaBuffer\n          Device buffer as a view of numba MemoryPointer.\n        ";
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_5from_numba = {"from_numba", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_5from_numba, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_4from_numba};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_5from_numba(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mem = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_numba (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mem,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mem)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_numba") < 0)) __PYX_ERR(0, 424, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_mem = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_numba", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 424, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.from_numba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_4from_numba(__pyx_v_mem);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_4from_numba(PyObject *__pyx_v_mem) {
  PyObject *__pyx_v_ctx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("from_numba", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":436
 *           Device buffer as a view of numba MemoryPointer.
 *         """
 *         ctx = Context.from_numba(mem.context)             # <<<<<<<<<<<<<<
 *         if mem.device_pointer.value is None and mem.size==0:
 *             return ctx.new_buffer(0)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context), __pyx_n_s_from_numba); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_mem, __pyx_n_s_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ctx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":437
 *         """
 *         ctx = Context.from_numba(mem.context)
 *         if mem.device_pointer.value is None and mem.size==0:             # <<<<<<<<<<<<<<
 *             return ctx.new_buffer(0)
 *         return ctx.foreign_buffer(mem.device_pointer.value, mem.size, base=mem)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_mem, __pyx_n_s_device_pointer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__pyx_t_2 == Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mem, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "cudf/_libxx/arrow/_cuda.pyx":438
 *         ctx = Context.from_numba(mem.context)
 *         if mem.device_pointer.value is None and mem.size==0:
 *             return ctx.new_buffer(0)             # <<<<<<<<<<<<<<
 *         return ctx.foreign_buffer(mem.device_pointer.value, mem.size, base=mem)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctx, __pyx_n_s_new_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_int_0);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":437
 *         """
 *         ctx = Context.from_numba(mem.context)
 *         if mem.device_pointer.value is None and mem.size==0:             # <<<<<<<<<<<<<<
 *             return ctx.new_buffer(0)
 *         return ctx.foreign_buffer(mem.device_pointer.value, mem.size, base=mem)
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":439
 *         if mem.device_pointer.value is None and mem.size==0:
 *             return ctx.new_buffer(0)
 *         return ctx.foreign_buffer(mem.device_pointer.value, mem.size, base=mem)             # <<<<<<<<<<<<<<
 * 
 *     def to_numba(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctx, __pyx_n_s_foreign_buffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mem, __pyx_n_s_device_pointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mem, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_base, __pyx_v_mem) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":424
 * 
 *     @staticmethod
 *     def from_numba(mem):             # <<<<<<<<<<<<<<
 *         """Create a CudaBuffer view from numba MemoryPointer instance.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.from_numba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ctx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":441
 *         return ctx.foreign_buffer(mem.device_pointer.value, mem.size, base=mem)
 * 
 *     def to_numba(self):             # <<<<<<<<<<<<<<
 *         """Return numba memory pointer of CudaBuffer instance.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_7to_numba(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_6to_numba[] = "CudaBuffer.to_numba(self)\nReturn numba memory pointer of CudaBuffer instance.\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_7to_numba(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_numba (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_6to_numba(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_6to_numba(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self) {
  PyObject *__pyx_v_ctypes = NULL;
  PyObject *__pyx_v_MemoryPointer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("to_numba", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":444
 *         """Return numba memory pointer of CudaBuffer instance.
 *         """
 *         import ctypes             # <<<<<<<<<<<<<<
 *         from numba.cuda.cudadrv.driver import MemoryPointer
 *         return MemoryPointer(self.context.to_numba(),
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_ctypes, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ctypes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":445
 *         """
 *         import ctypes
 *         from numba.cuda.cudadrv.driver import MemoryPointer             # <<<<<<<<<<<<<<
 *         return MemoryPointer(self.context.to_numba(),
 *                              pointer=ctypes.c_void_p(self.address),
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_MemoryPointer);
  __Pyx_GIVEREF(__pyx_n_s_MemoryPointer);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_MemoryPointer);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numba_cuda_cudadrv_driver, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MemoryPointer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_MemoryPointer = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":446
 *         import ctypes
 *         from numba.cuda.cudadrv.driver import MemoryPointer
 *         return MemoryPointer(self.context.to_numba(),             # <<<<<<<<<<<<<<
 *                              pointer=ctypes.c_void_p(self.address),
 *                              size=self.size)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_to_numba); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":447
 *         from numba.cuda.cudadrv.driver import MemoryPointer
 *         return MemoryPointer(self.context.to_numba(),
 *                              pointer=ctypes.c_void_p(self.address),             # <<<<<<<<<<<<<<
 *                              size=self.size)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ctypes, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_address); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_pointer, __pyx_t_1) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":448
 *         return MemoryPointer(self.context.to_numba(),
 *                              pointer=ctypes.c_void_p(self.address),
 *                              size=self.size)             # <<<<<<<<<<<<<<
 * 
 *     cdef getitem(self, int64_t i):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_size, __pyx_t_1) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":446
 *         import ctypes
 *         from numba.cuda.cudadrv.driver import MemoryPointer
 *         return MemoryPointer(self.context.to_numba(),             # <<<<<<<<<<<<<<
 *                              pointer=ctypes.c_void_p(self.address),
 *                              size=self.size)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_MemoryPointer, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":441
 *         return ctx.foreign_buffer(mem.device_pointer.value, mem.size, base=mem)
 * 
 *     def to_numba(self):             # <<<<<<<<<<<<<<
 *         """Return numba memory pointer of CudaBuffer instance.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.to_numba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ctypes);
  __Pyx_XDECREF(__pyx_v_MemoryPointer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":450
 *                              size=self.size)
 * 
 *     cdef getitem(self, int64_t i):             # <<<<<<<<<<<<<<
 *         return self.copy_to_host(position=i, nbytes=1)[0]
 * 
 */

static PyObject *__pyx_f_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_getitem(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, int64_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getitem", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":451
 * 
 *     cdef getitem(self, int64_t i):
 *         return self.copy_to_host(position=i, nbytes=1)[0]             # <<<<<<<<<<<<<<
 * 
 *     def copy_to_host(self, int64_t position=0, int64_t nbytes=-1,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy_to_host); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_position, __pyx_t_3) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_nbytes, __pyx_int_1) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":450
 *                              size=self.size)
 * 
 *     cdef getitem(self, int64_t i):             # <<<<<<<<<<<<<<
 *         return self.copy_to_host(position=i, nbytes=1)[0]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.getitem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":453
 *         return self.copy_to_host(position=i, nbytes=1)[0]
 * 
 *     def copy_to_host(self, int64_t position=0, int64_t nbytes=-1,             # <<<<<<<<<<<<<<
 *                      Buffer buf=None,
 *                      MemoryPool memory_pool=None, c_bool resizable=False):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_9copy_to_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_8copy_to_host[] = "CudaBuffer.copy_to_host(self, int64_t position=0, int64_t nbytes=-1, Buffer buf=None, MemoryPool memory_pool=None, bool resizable=False)\nCopy memory from GPU device to CPU host\n\n        Caller is responsible for ensuring that all tasks affecting\n        the memory are finished. Use\n\n          `<CudaBuffer instance>.context.synchronize()`\n\n        when needed.\n\n        Parameters\n        ----------\n        position : int\n          Specify the starting position of the source data in GPU\n          device buffer. Default: 0.\n        nbytes : int\n          Specify the number of bytes to copy. Default: -1 (all from\n          the position until host buffer is full).\n        buf : Buffer\n          Specify a pre-allocated output buffer in host. Default: None\n          (allocate new output buffer).\n        memory_pool : MemoryPool\n        resizable : bool\n          Specify extra arguments to allocate_buffer. Used only when\n          buf is None.\n\n        Returns\n        -------\n        buf : Buffer\n          Output buffer in host.\n\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_9copy_to_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int64_t __pyx_v_position;
  int64_t __pyx_v_nbytes;
  struct __pyx_obj_7pyarrow_3lib_Buffer *__pyx_v_buf = 0;
  struct __pyx_obj_7pyarrow_3lib_MemoryPool *__pyx_v_memory_pool = 0;
  bool __pyx_v_resizable;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_to_host (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_position,&__pyx_n_s_nbytes,&__pyx_n_s_buf,&__pyx_n_s_memory_pool,&__pyx_n_s_resizable,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "cudf/_libxx/arrow/_cuda.pyx":454
 * 
 *     def copy_to_host(self, int64_t position=0, int64_t nbytes=-1,
 *                      Buffer buf=None,             # <<<<<<<<<<<<<<
 *                      MemoryPool memory_pool=None, c_bool resizable=False):
 *         """Copy memory from GPU device to CPU host
 */
    values[2] = (PyObject *)((struct __pyx_obj_7pyarrow_3lib_Buffer *)Py_None);

    /* "cudf/_libxx/arrow/_cuda.pyx":455
 *     def copy_to_host(self, int64_t position=0, int64_t nbytes=-1,
 *                      Buffer buf=None,
 *                      MemoryPool memory_pool=None, c_bool resizable=False):             # <<<<<<<<<<<<<<
 *         """Copy memory from GPU device to CPU host
 * 
 */
    values[3] = (PyObject *)((struct __pyx_obj_7pyarrow_3lib_MemoryPool *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_position);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nbytes);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_memory_pool);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_resizable);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_to_host") < 0)) __PYX_ERR(0, 453, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_position = __Pyx_PyInt_As_int64_t(values[0]); if (unlikely((__pyx_v_position == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L3_error)
    } else {
      __pyx_v_position = ((int64_t)0);
    }
    if (values[1]) {
      __pyx_v_nbytes = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_nbytes == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L3_error)
    } else {
      __pyx_v_nbytes = ((int64_t)-1L);
    }
    __pyx_v_buf = ((struct __pyx_obj_7pyarrow_3lib_Buffer *)values[2]);
    __pyx_v_memory_pool = ((struct __pyx_obj_7pyarrow_3lib_MemoryPool *)values[3]);
    if (values[4]) {
      __pyx_v_resizable = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_resizable == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L3_error)
    } else {
      __pyx_v_resizable = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_to_host", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 453, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.copy_to_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buf), __pyx_ptype_7pyarrow_3lib_Buffer, 1, "buf", 0))) __PYX_ERR(0, 454, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_memory_pool), __pyx_ptype_7pyarrow_3lib_MemoryPool, 1, "memory_pool", 0))) __PYX_ERR(0, 455, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_8copy_to_host(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self), __pyx_v_position, __pyx_v_nbytes, __pyx_v_buf, __pyx_v_memory_pool, __pyx_v_resizable);

  /* "cudf/_libxx/arrow/_cuda.pyx":453
 *         return self.copy_to_host(position=i, nbytes=1)[0]
 * 
 *     def copy_to_host(self, int64_t position=0, int64_t nbytes=-1,             # <<<<<<<<<<<<<<
 *                      Buffer buf=None,
 *                      MemoryPool memory_pool=None, c_bool resizable=False):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_8copy_to_host(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, int64_t __pyx_v_position, int64_t __pyx_v_nbytes, struct __pyx_obj_7pyarrow_3lib_Buffer *__pyx_v_buf, struct __pyx_obj_7pyarrow_3lib_MemoryPool *__pyx_v_memory_pool, bool __pyx_v_resizable) {
  int64_t __pyx_v_nbytes_;
  std::shared_ptr< arrow::Buffer>  __pyx_v_buf_;
  int64_t __pyx_v_position_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int64_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("copy_to_host", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_buf);

  /* "cudf/_libxx/arrow/_cuda.pyx":487
 * 
 *         """
 *         if position < 0 or (self.size and position > self.size) \             # <<<<<<<<<<<<<<
 *            or (self.size == 0 and position != 0):
 *             raise ValueError('position argument is out-of-range')
 */
  __pyx_t_2 = ((__pyx_v_position < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":488
 *         """
 *         if position < 0 or (self.size and position > self.size) \
 *            or (self.size == 0 and position != 0):             # <<<<<<<<<<<<<<
 *             raise ValueError('position argument is out-of-range')
 *         cdef int64_t nbytes_
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "cudf/_libxx/arrow/_cuda.pyx":487
 * 
 *         """
 *         if position < 0 or (self.size and position > self.size) \             # <<<<<<<<<<<<<<
 *            or (self.size == 0 and position != 0):
 *             raise ValueError('position argument is out-of-range')
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_2) {
    goto __pyx_L6_next_or;
  } else {
  }
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L6_next_or:;

  /* "cudf/_libxx/arrow/_cuda.pyx":488
 *         """
 *         if position < 0 or (self.size and position > self.size) \
 *            or (self.size == 0 and position != 0):             # <<<<<<<<<<<<<<
 *             raise ValueError('position argument is out-of-range')
 *         cdef int64_t nbytes_
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_5, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_position != 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "cudf/_libxx/arrow/_cuda.pyx":487
 * 
 *         """
 *         if position < 0 or (self.size and position > self.size) \             # <<<<<<<<<<<<<<
 *            or (self.size == 0 and position != 0):
 *             raise ValueError('position argument is out-of-range')
 */
  if (unlikely(__pyx_t_1)) {

    /* "cudf/_libxx/arrow/_cuda.pyx":489
 *         if position < 0 or (self.size and position > self.size) \
 *            or (self.size == 0 and position != 0):
 *             raise ValueError('position argument is out-of-range')             # <<<<<<<<<<<<<<
 *         cdef int64_t nbytes_
 *         if buf is None:
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 489, __pyx_L1_error)

    /* "cudf/_libxx/arrow/_cuda.pyx":487
 * 
 *         """
 *         if position < 0 or (self.size and position > self.size) \             # <<<<<<<<<<<<<<
 *            or (self.size == 0 and position != 0):
 *             raise ValueError('position argument is out-of-range')
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":491
 *             raise ValueError('position argument is out-of-range')
 *         cdef int64_t nbytes_
 *         if buf is None:             # <<<<<<<<<<<<<<
 *             if nbytes < 0:
 *                 # copy all starting from position to new host buffer
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_buf) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cudf/_libxx/arrow/_cuda.pyx":492
 *         cdef int64_t nbytes_
 *         if buf is None:
 *             if nbytes < 0:             # <<<<<<<<<<<<<<
 *                 # copy all starting from position to new host buffer
 *                 nbytes_ = self.size - position
 */
    __pyx_t_2 = ((__pyx_v_nbytes < 0) != 0);
    if (__pyx_t_2) {

      /* "cudf/_libxx/arrow/_cuda.pyx":494
 *             if nbytes < 0:
 *                 # copy all starting from position to new host buffer
 *                 nbytes_ = self.size - position             # <<<<<<<<<<<<<<
 *             else:
 *                 if nbytes > self.size - position:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_nbytes_ = __pyx_t_6;

      /* "cudf/_libxx/arrow/_cuda.pyx":492
 *         cdef int64_t nbytes_
 *         if buf is None:
 *             if nbytes < 0:             # <<<<<<<<<<<<<<
 *                 # copy all starting from position to new host buffer
 *                 nbytes_ = self.size - position
 */
      goto __pyx_L10;
    }

    /* "cudf/_libxx/arrow/_cuda.pyx":496
 *                 nbytes_ = self.size - position
 *             else:
 *                 if nbytes > self.size - position:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         'requested more to copy than available from '
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_nbytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyNumber_Subtract(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__pyx_t_2)) {

        /* "cudf/_libxx/arrow/_cuda.pyx":497
 *             else:
 *                 if nbytes > self.size - position:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         'requested more to copy than available from '
 *                         'device buffer')
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 497, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 497, __pyx_L1_error)

        /* "cudf/_libxx/arrow/_cuda.pyx":496
 *                 nbytes_ = self.size - position
 *             else:
 *                 if nbytes > self.size - position:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         'requested more to copy than available from '
 */
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":501
 *                         'device buffer')
 *                 # copy nbytes starting from position to new host buffeer
 *                 nbytes_ = nbytes             # <<<<<<<<<<<<<<
 *             buf = allocate_buffer(nbytes_, memory_pool=memory_pool,
 *                                   resizable=resizable)
 */
      __pyx_v_nbytes_ = __pyx_v_nbytes;
    }
    __pyx_L10:;

    /* "cudf/_libxx/arrow/_cuda.pyx":502
 *                 # copy nbytes starting from position to new host buffeer
 *                 nbytes_ = nbytes
 *             buf = allocate_buffer(nbytes_, memory_pool=memory_pool,             # <<<<<<<<<<<<<<
 *                                   resizable=resizable)
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_allocate_buffer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_From_int64_t(__pyx_v_nbytes_); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_memory_pool, ((PyObject *)__pyx_v_memory_pool)) < 0) __PYX_ERR(0, 502, __pyx_L1_error)

    /* "cudf/_libxx/arrow/_cuda.pyx":503
 *                 nbytes_ = nbytes
 *             buf = allocate_buffer(nbytes_, memory_pool=memory_pool,
 *                                   resizable=resizable)             # <<<<<<<<<<<<<<
 *         else:
 *             if nbytes < 0:
 */
    __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_resizable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_resizable, __pyx_t_5) < 0) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":502
 *                 # copy nbytes starting from position to new host buffeer
 *                 nbytes_ = nbytes
 *             buf = allocate_buffer(nbytes_, memory_pool=memory_pool,             # <<<<<<<<<<<<<<
 *                                   resizable=resizable)
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_7pyarrow_3lib_Buffer))))) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_buf, ((struct __pyx_obj_7pyarrow_3lib_Buffer *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":491
 *             raise ValueError('position argument is out-of-range')
 *         cdef int64_t nbytes_
 *         if buf is None:             # <<<<<<<<<<<<<<
 *             if nbytes < 0:
 *                 # copy all starting from position to new host buffer
 */
    goto __pyx_L9;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":505
 *                                   resizable=resizable)
 *         else:
 *             if nbytes < 0:             # <<<<<<<<<<<<<<
 *                 # copy all from position until given host buffer is full
 *                 nbytes_ = min(self.size - position, buf.size)
 */
  /*else*/ {
    __pyx_t_2 = ((__pyx_v_nbytes < 0) != 0);
    if (__pyx_t_2) {

      /* "cudf/_libxx/arrow/_cuda.pyx":507
 *             if nbytes < 0:
 *                 # copy all from position until given host buffer is full
 *                 nbytes_ = min(self.size - position, buf.size)             # <<<<<<<<<<<<<<
 *             else:
 *                 if nbytes > buf.size:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_buf), __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyNumber_Subtract(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 507, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_2) {
        __Pyx_INCREF(__pyx_t_5);
        __pyx_t_3 = __pyx_t_5;
      } else {
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_3 = __pyx_t_4;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_nbytes_ = __pyx_t_6;

      /* "cudf/_libxx/arrow/_cuda.pyx":505
 *                                   resizable=resizable)
 *         else:
 *             if nbytes < 0:             # <<<<<<<<<<<<<<
 *                 # copy all from position until given host buffer is full
 *                 nbytes_ = min(self.size - position, buf.size)
 */
      goto __pyx_L12;
    }

    /* "cudf/_libxx/arrow/_cuda.pyx":509
 *                 nbytes_ = min(self.size - position, buf.size)
 *             else:
 *                 if nbytes > buf.size:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         'requested copy does not fit into host buffer')
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_nbytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_buf), __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 509, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 509, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__pyx_t_2)) {

        /* "cudf/_libxx/arrow/_cuda.pyx":510
 *             else:
 *                 if nbytes > buf.size:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         'requested copy does not fit into host buffer')
 *                 # copy nbytes from position to given host buffer
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 510, __pyx_L1_error)

        /* "cudf/_libxx/arrow/_cuda.pyx":509
 *                 nbytes_ = min(self.size - position, buf.size)
 *             else:
 *                 if nbytes > buf.size:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         'requested copy does not fit into host buffer')
 */
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":513
 *                         'requested copy does not fit into host buffer')
 *                 # copy nbytes from position to given host buffer
 *                 nbytes_ = nbytes             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)
 *         cdef int64_t position_ = position
 */
      __pyx_v_nbytes_ = __pyx_v_nbytes;
    }
    __pyx_L12:;
  }
  __pyx_L9:;

  /* "cudf/_libxx/arrow/_cuda.pyx":514
 *                 # copy nbytes from position to given host buffer
 *                 nbytes_ = nbytes
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)             # <<<<<<<<<<<<<<
 *         cdef int64_t position_ = position
 *         with nogil:
 */
  __pyx_v_buf_ = __pyx_f_7pyarrow_3lib_pyarrow_unwrap_buffer(((PyObject *)__pyx_v_buf));

  /* "cudf/_libxx/arrow/_cuda.pyx":515
 *                 nbytes_ = nbytes
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)
 *         cdef int64_t position_ = position             # <<<<<<<<<<<<<<
 *         with nogil:
 *             check_status(self.cuda_buffer.get()
 */
  __pyx_v_position_ = __pyx_v_position;

  /* "cudf/_libxx/arrow/_cuda.pyx":516
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)
 *         cdef int64_t position_ = position
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.cuda_buffer.get()
 *                          .CopyToHost(position_, nbytes_,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cudf/_libxx/arrow/_cuda.pyx":517
 *         cdef int64_t position_ = position
 *         with nogil:
 *             check_status(self.cuda_buffer.get()             # <<<<<<<<<<<<<<
 *                          .CopyToHost(position_, nbytes_,
 *                                      buf_.get().mutable_data()))
 */
        __pyx_t_8 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->cuda_buffer.get()->CopyToHost(__pyx_v_position_, __pyx_v_nbytes_, __pyx_v_buf_.get()->mutable_data())); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 517, __pyx_L15_error)
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":516
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)
 *         cdef int64_t position_ = position
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.cuda_buffer.get()
 *                          .CopyToHost(position_, nbytes_,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L16;
        }
        __pyx_L15_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L16:;
      }
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":520
 *                          .CopyToHost(position_, nbytes_,
 *                                      buf_.get().mutable_data()))
 *         return buf             # <<<<<<<<<<<<<<
 * 
 *     def copy_from_host(self, data, int64_t position=0, int64_t nbytes=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_buf));
  __pyx_r = ((PyObject *)__pyx_v_buf);
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":453
 *         return self.copy_to_host(position=i, nbytes=1)[0]
 * 
 *     def copy_to_host(self, int64_t position=0, int64_t nbytes=-1,             # <<<<<<<<<<<<<<
 *                      Buffer buf=None,
 *                      MemoryPool memory_pool=None, c_bool resizable=False):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.copy_to_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_buf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":522
 *         return buf
 * 
 *     def copy_from_host(self, data, int64_t position=0, int64_t nbytes=-1):             # <<<<<<<<<<<<<<
 *         """Copy data from host to device.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_11copy_from_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_10copy_from_host[] = "CudaBuffer.copy_from_host(self, data, int64_t position=0, int64_t nbytes=-1)\nCopy data from host to device.\n\n        The device buffer must be pre-allocated.\n\n        Parameters\n        ----------\n        data : {Buffer, array-like}\n          Specify data in host. It can be array-like that is valid\n          argument to py_buffer\n        position : int\n          Specify the starting position of the copy in devive buffer.\n          Default: 0.\n        nbytes : int\n          Specify the number of bytes to copy. Default: -1 (all from\n          source until device buffer, starting from position, is full)\n\n        Returns\n        -------\n        nbytes : int\n          Number of bytes copied.\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_11copy_from_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  int64_t __pyx_v_position;
  int64_t __pyx_v_nbytes;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_from_host (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_position,&__pyx_n_s_nbytes,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_position);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nbytes);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_from_host") < 0)) __PYX_ERR(0, 522, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    if (values[1]) {
      __pyx_v_position = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_position == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L3_error)
    } else {
      __pyx_v_position = ((int64_t)0);
    }
    if (values[2]) {
      __pyx_v_nbytes = __Pyx_PyInt_As_int64_t(values[2]); if (unlikely((__pyx_v_nbytes == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L3_error)
    } else {
      __pyx_v_nbytes = ((int64_t)-1L);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_from_host", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 522, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.copy_from_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_10copy_from_host(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self), __pyx_v_data, __pyx_v_position, __pyx_v_nbytes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_10copy_from_host(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, PyObject *__pyx_v_data, int64_t __pyx_v_position, int64_t __pyx_v_nbytes) {
  int64_t __pyx_v_nbytes_;
  PyObject *__pyx_v_buf = NULL;
  std::shared_ptr< arrow::Buffer>  __pyx_v_buf_;
  int64_t __pyx_v_position_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int64_t __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("copy_from_host", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":544
 *           Number of bytes copied.
 *         """
 *         if position < 0 or position > self.size:             # <<<<<<<<<<<<<<
 *             raise ValueError('position argument is out-of-range')
 *         cdef int64_t nbytes_
 */
  __pyx_t_2 = ((__pyx_v_position < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "cudf/_libxx/arrow/_cuda.pyx":545
 *         """
 *         if position < 0 or position > self.size:
 *             raise ValueError('position argument is out-of-range')             # <<<<<<<<<<<<<<
 *         cdef int64_t nbytes_
 *         buf = as_buffer(data)
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 545, __pyx_L1_error)

    /* "cudf/_libxx/arrow/_cuda.pyx":544
 *           Number of bytes copied.
 *         """
 *         if position < 0 or position > self.size:             # <<<<<<<<<<<<<<
 *             raise ValueError('position argument is out-of-range')
 *         cdef int64_t nbytes_
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":547
 *             raise ValueError('position argument is out-of-range')
 *         cdef int64_t nbytes_
 *         buf = as_buffer(data)             # <<<<<<<<<<<<<<
 * 
 *         if nbytes < 0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_as_buffer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_data);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_buf = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":549
 *         buf = as_buffer(data)
 * 
 *         if nbytes < 0:             # <<<<<<<<<<<<<<
 *             # copy from host buffer to device buffer starting from
 *             # position until device buffer is full
 */
  __pyx_t_1 = ((__pyx_v_nbytes < 0) != 0);
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":552
 *             # copy from host buffer to device buffer starting from
 *             # position until device buffer is full
 *             nbytes_ = min(self.size - position, buf.size)             # <<<<<<<<<<<<<<
 *         else:
 *             if nbytes > buf.size:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 552, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_3 = __pyx_t_5;
    } else {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_3 = __pyx_t_6;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_7 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_nbytes_ = __pyx_t_7;

    /* "cudf/_libxx/arrow/_cuda.pyx":549
 *         buf = as_buffer(data)
 * 
 *         if nbytes < 0:             # <<<<<<<<<<<<<<
 *             # copy from host buffer to device buffer starting from
 *             # position until device buffer is full
 */
    goto __pyx_L6;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":554
 *             nbytes_ = min(self.size - position, buf.size)
 *         else:
 *             if nbytes > buf.size:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     'requested more to copy than available from host buffer')
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_nbytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "cudf/_libxx/arrow/_cuda.pyx":555
 *         else:
 *             if nbytes > buf.size:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     'requested more to copy than available from host buffer')
 *             if nbytes > self.size - position:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 555, __pyx_L1_error)

      /* "cudf/_libxx/arrow/_cuda.pyx":554
 *             nbytes_ = min(self.size - position, buf.size)
 *         else:
 *             if nbytes > buf.size:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     'requested more to copy than available from host buffer')
 */
    }

    /* "cudf/_libxx/arrow/_cuda.pyx":557
 *                 raise ValueError(
 *                     'requested more to copy than available from host buffer')
 *             if nbytes > self.size - position:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     'requested more to copy than available in device buffer')
 */
    __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_nbytes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "cudf/_libxx/arrow/_cuda.pyx":558
 *                     'requested more to copy than available from host buffer')
 *             if nbytes > self.size - position:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     'requested more to copy than available in device buffer')
 *             # copy nbytes from host buffer to device buffer starting
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 558, __pyx_L1_error)

      /* "cudf/_libxx/arrow/_cuda.pyx":557
 *                 raise ValueError(
 *                     'requested more to copy than available from host buffer')
 *             if nbytes > self.size - position:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     'requested more to copy than available in device buffer')
 */
    }

    /* "cudf/_libxx/arrow/_cuda.pyx":562
 *             # copy nbytes from host buffer to device buffer starting
 *             # from position
 *             nbytes_ = nbytes             # <<<<<<<<<<<<<<
 * 
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)
 */
    __pyx_v_nbytes_ = __pyx_v_nbytes;
  }
  __pyx_L6:;

  /* "cudf/_libxx/arrow/_cuda.pyx":564
 *             nbytes_ = nbytes
 * 
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)             # <<<<<<<<<<<<<<
 *         cdef int64_t position_ = position
 *         with nogil:
 */
  __pyx_v_buf_ = __pyx_f_7pyarrow_3lib_pyarrow_unwrap_buffer(__pyx_v_buf);

  /* "cudf/_libxx/arrow/_cuda.pyx":565
 * 
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)
 *         cdef int64_t position_ = position             # <<<<<<<<<<<<<<
 *         with nogil:
 *             check_status(self.cuda_buffer.get().
 */
  __pyx_v_position_ = __pyx_v_position;

  /* "cudf/_libxx/arrow/_cuda.pyx":566
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)
 *         cdef int64_t position_ = position
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.cuda_buffer.get().
 *                          CopyFromHost(position_, buf_.get().data(), nbytes_))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cudf/_libxx/arrow/_cuda.pyx":567
 *         cdef int64_t position_ = position
 *         with nogil:
 *             check_status(self.cuda_buffer.get().             # <<<<<<<<<<<<<<
 *                          CopyFromHost(position_, buf_.get().data(), nbytes_))
 *         return nbytes_
 */
        __pyx_t_8 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->cuda_buffer.get()->CopyFromHost(__pyx_v_position_, __pyx_v_buf_.get()->data(), __pyx_v_nbytes_)); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 567, __pyx_L10_error)
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":566
 *         cdef shared_ptr[CBuffer] buf_ = pyarrow_unwrap_buffer(buf)
 *         cdef int64_t position_ = position
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.cuda_buffer.get().
 *                          CopyFromHost(position_, buf_.get().data(), nbytes_))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L10_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L11:;
      }
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":569
 *             check_status(self.cuda_buffer.get().
 *                          CopyFromHost(position_, buf_.get().data(), nbytes_))
 *         return nbytes_             # <<<<<<<<<<<<<<
 * 
 *     def copy_from_device(self, buf, int64_t position=0, int64_t nbytes=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_nbytes_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":522
 *         return buf
 * 
 *     def copy_from_host(self, data, int64_t position=0, int64_t nbytes=-1):             # <<<<<<<<<<<<<<
 *         """Copy data from host to device.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.copy_from_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_buf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":571
 *         return nbytes_
 * 
 *     def copy_from_device(self, buf, int64_t position=0, int64_t nbytes=-1):             # <<<<<<<<<<<<<<
 *         """Copy data from device to device.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_13copy_from_device(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_12copy_from_device[] = "CudaBuffer.copy_from_device(self, buf, int64_t position=0, int64_t nbytes=-1)\nCopy data from device to device.\n\n        Parameters\n        ----------\n        buf : CudaBuffer\n          Specify source device buffer.\n        position : int\n          Specify the starting position of the copy in device buffer.\n          Default: 0.\n        nbytes : int\n          Specify the number of bytes to copy. Default: -1 (all from\n          source until device buffer, starting from position, is full)\n\n        Returns\n        -------\n        nbytes : int\n          Number of bytes copied.\n\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_13copy_from_device(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_buf = 0;
  int64_t __pyx_v_position;
  int64_t __pyx_v_nbytes;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_from_device (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buf,&__pyx_n_s_position,&__pyx_n_s_nbytes,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buf)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_position);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nbytes);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_from_device") < 0)) __PYX_ERR(0, 571, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buf = values[0];
    if (values[1]) {
      __pyx_v_position = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_position == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
    } else {
      __pyx_v_position = ((int64_t)0);
    }
    if (values[2]) {
      __pyx_v_nbytes = __Pyx_PyInt_As_int64_t(values[2]); if (unlikely((__pyx_v_nbytes == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
    } else {
      __pyx_v_nbytes = ((int64_t)-1L);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_from_device", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 571, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.copy_from_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_12copy_from_device(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self), __pyx_v_buf, __pyx_v_position, __pyx_v_nbytes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_12copy_from_device(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, PyObject *__pyx_v_buf, int64_t __pyx_v_position, int64_t __pyx_v_nbytes) {
  int64_t __pyx_v_nbytes_;
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_v_buf_;
  int64_t __pyx_v_position_;
  std::shared_ptr< arrow::cuda::CudaContext>  __pyx_v_src_ctx_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int64_t __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("copy_from_device", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":591
 * 
 *         """
 *         if position < 0 or position > self.size:             # <<<<<<<<<<<<<<
 *             raise ValueError('position argument is out-of-range')
 *         cdef int64_t nbytes_
 */
  __pyx_t_2 = ((__pyx_v_position < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "cudf/_libxx/arrow/_cuda.pyx":592
 *         """
 *         if position < 0 or position > self.size:
 *             raise ValueError('position argument is out-of-range')             # <<<<<<<<<<<<<<
 *         cdef int64_t nbytes_
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 592, __pyx_L1_error)

    /* "cudf/_libxx/arrow/_cuda.pyx":591
 * 
 *         """
 *         if position < 0 or position > self.size:             # <<<<<<<<<<<<<<
 *             raise ValueError('position argument is out-of-range')
 *         cdef int64_t nbytes_
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":595
 *         cdef int64_t nbytes_
 * 
 *         if nbytes < 0:             # <<<<<<<<<<<<<<
 *             # copy from source device buffer to device buffer starting
 *             # from position until device buffer is full
 */
  __pyx_t_1 = ((__pyx_v_nbytes < 0) != 0);
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":598
 *             # copy from source device buffer to device buffer starting
 *             # from position until device buffer is full
 *             nbytes_ = min(self.size - position, buf.size)             # <<<<<<<<<<<<<<
 *         else:
 *             if nbytes > buf.size:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_3 = __pyx_t_5;
    } else {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_3 = __pyx_t_6;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_7 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_nbytes_ = __pyx_t_7;

    /* "cudf/_libxx/arrow/_cuda.pyx":595
 *         cdef int64_t nbytes_
 * 
 *         if nbytes < 0:             # <<<<<<<<<<<<<<
 *             # copy from source device buffer to device buffer starting
 *             # from position until device buffer is full
 */
    goto __pyx_L6;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":600
 *             nbytes_ = min(self.size - position, buf.size)
 *         else:
 *             if nbytes > buf.size:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     'requested more to copy than available from device buffer')
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_nbytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "cudf/_libxx/arrow/_cuda.pyx":601
 *         else:
 *             if nbytes > buf.size:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     'requested more to copy than available from device buffer')
 *             if nbytes > self.size - position:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 601, __pyx_L1_error)

      /* "cudf/_libxx/arrow/_cuda.pyx":600
 *             nbytes_ = min(self.size - position, buf.size)
 *         else:
 *             if nbytes > buf.size:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     'requested more to copy than available from device buffer')
 */
    }

    /* "cudf/_libxx/arrow/_cuda.pyx":603
 *                 raise ValueError(
 *                     'requested more to copy than available from device buffer')
 *             if nbytes > self.size - position:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     'requested more to copy than available in device buffer')
 */
    __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_nbytes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "cudf/_libxx/arrow/_cuda.pyx":604
 *                     'requested more to copy than available from device buffer')
 *             if nbytes > self.size - position:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     'requested more to copy than available in device buffer')
 *             # copy nbytes from source device buffer to device buffer
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 604, __pyx_L1_error)

      /* "cudf/_libxx/arrow/_cuda.pyx":603
 *                 raise ValueError(
 *                     'requested more to copy than available from device buffer')
 *             if nbytes > self.size - position:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     'requested more to copy than available in device buffer')
 */
    }

    /* "cudf/_libxx/arrow/_cuda.pyx":608
 *             # copy nbytes from source device buffer to device buffer
 *             # starting from position
 *             nbytes_ = nbytes             # <<<<<<<<<<<<<<
 * 
 *         cdef shared_ptr[CCudaBuffer] buf_ = pyarrow_unwrap_cudabuffer(buf)
 */
    __pyx_v_nbytes_ = __pyx_v_nbytes;
  }
  __pyx_L6:;

  /* "cudf/_libxx/arrow/_cuda.pyx":610
 *             nbytes_ = nbytes
 * 
 *         cdef shared_ptr[CCudaBuffer] buf_ = pyarrow_unwrap_cudabuffer(buf)             # <<<<<<<<<<<<<<
 *         cdef int64_t position_ = position
 *         cdef shared_ptr[CCudaContext] src_ctx_ = pyarrow_unwrap_cudacontext(
 */
  __pyx_v_buf_ = pyarrow_unwrap_cudabuffer(__pyx_v_buf);

  /* "cudf/_libxx/arrow/_cuda.pyx":611
 * 
 *         cdef shared_ptr[CCudaBuffer] buf_ = pyarrow_unwrap_cudabuffer(buf)
 *         cdef int64_t position_ = position             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CCudaContext] src_ctx_ = pyarrow_unwrap_cudacontext(
 *             buf.context)
 */
  __pyx_v_position_ = __pyx_v_position;

  /* "cudf/_libxx/arrow/_cuda.pyx":613
 *         cdef int64_t position_ = position
 *         cdef shared_ptr[CCudaContext] src_ctx_ = pyarrow_unwrap_cudacontext(
 *             buf.context)             # <<<<<<<<<<<<<<
 *         if self.context.handle != buf.context.handle:
 *             with nogil:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "cudf/_libxx/arrow/_cuda.pyx":612
 *         cdef shared_ptr[CCudaBuffer] buf_ = pyarrow_unwrap_cudabuffer(buf)
 *         cdef int64_t position_ = position
 *         cdef shared_ptr[CCudaContext] src_ctx_ = pyarrow_unwrap_cudacontext(             # <<<<<<<<<<<<<<
 *             buf.context)
 *         if self.context.handle != buf.context.handle:
 */
  __pyx_v_src_ctx_ = pyarrow_unwrap_cudacontext(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":614
 *         cdef shared_ptr[CCudaContext] src_ctx_ = pyarrow_unwrap_cudacontext(
 *             buf.context)
 *         if self.context.handle != buf.context.handle:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 check_status(self.cuda_buffer.get().
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_handle); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_context); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_handle); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":615
 *             buf.context)
 *         if self.context.handle != buf.context.handle:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 check_status(self.cuda_buffer.get().
 *                              CopyFromAnotherDevice(src_ctx_, position_,
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "cudf/_libxx/arrow/_cuda.pyx":616
 *         if self.context.handle != buf.context.handle:
 *             with nogil:
 *                 check_status(self.cuda_buffer.get().             # <<<<<<<<<<<<<<
 *                              CopyFromAnotherDevice(src_ctx_, position_,
 *                                                    buf_.get().data(), nbytes_))
 */
          __pyx_t_8 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->cuda_buffer.get()->CopyFromAnotherDevice(__pyx_v_src_ctx_, __pyx_v_position_, __pyx_v_buf_.get()->data(), __pyx_v_nbytes_)); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 616, __pyx_L11_error)
        }

        /* "cudf/_libxx/arrow/_cuda.pyx":615
 *             buf.context)
 *         if self.context.handle != buf.context.handle:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 check_status(self.cuda_buffer.get().
 *                              CopyFromAnotherDevice(src_ctx_, position_,
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L12;
          }
          __pyx_L11_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L12:;
        }
    }

    /* "cudf/_libxx/arrow/_cuda.pyx":614
 *         cdef shared_ptr[CCudaContext] src_ctx_ = pyarrow_unwrap_cudacontext(
 *             buf.context)
 *         if self.context.handle != buf.context.handle:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 check_status(self.cuda_buffer.get().
 */
    goto __pyx_L9;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":620
 *                                                    buf_.get().data(), nbytes_))
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 check_status(self.cuda_buffer.get().
 *                              CopyFromDevice(position_, buf_.get().data(),
 */
  /*else*/ {
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "cudf/_libxx/arrow/_cuda.pyx":621
 *         else:
 *             with nogil:
 *                 check_status(self.cuda_buffer.get().             # <<<<<<<<<<<<<<
 *                              CopyFromDevice(position_, buf_.get().data(),
 *                                             nbytes_))
 */
          __pyx_t_8 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->cuda_buffer.get()->CopyFromDevice(__pyx_v_position_, __pyx_v_buf_.get()->data(), __pyx_v_nbytes_)); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 621, __pyx_L14_error)
        }

        /* "cudf/_libxx/arrow/_cuda.pyx":620
 *                                                    buf_.get().data(), nbytes_))
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 check_status(self.cuda_buffer.get().
 *                              CopyFromDevice(position_, buf_.get().data(),
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L15;
          }
          __pyx_L14_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L15:;
        }
    }
  }
  __pyx_L9:;

  /* "cudf/_libxx/arrow/_cuda.pyx":624
 *                              CopyFromDevice(position_, buf_.get().data(),
 *                                             nbytes_))
 *         return nbytes_             # <<<<<<<<<<<<<<
 * 
 *     def export_for_ipc(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_nbytes_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":571
 *         return nbytes_
 * 
 *     def copy_from_device(self, buf, int64_t position=0, int64_t nbytes=-1):             # <<<<<<<<<<<<<<
 *         """Copy data from device to device.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.copy_from_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":626
 *         return nbytes_
 * 
 *     def export_for_ipc(self):             # <<<<<<<<<<<<<<
 *         """
 *         Expose this device buffer as IPC memory which can be used in other
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_15export_for_ipc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_14export_for_ipc[] = "CudaBuffer.export_for_ipc(self)\n\n        Expose this device buffer as IPC memory which can be used in other\n        processes.\n\n        After calling this function, this device memory will not be\n        freed when the CudaBuffer is destructed.\n\n        Returns\n        -------\n        ipc_handle : IpcMemHandle\n          The exported IPC handle\n\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_15export_for_ipc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("export_for_ipc (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_14export_for_ipc(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_14export_for_ipc(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self) {
  std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  __pyx_v_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("export_for_ipc", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":641
 *         """
 *         cdef shared_ptr[CCudaIpcMemHandle] handle
 *         check_status(self.cuda_buffer.get().ExportForIpc(&handle))             # <<<<<<<<<<<<<<
 *         return pyarrow_wrap_cudaipcmemhandle(handle)
 * 
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->cuda_buffer.get()->ExportForIpc((&__pyx_v_handle))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 641, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":642
 *         cdef shared_ptr[CCudaIpcMemHandle] handle
 *         check_status(self.cuda_buffer.get().ExportForIpc(&handle))
 *         return pyarrow_wrap_cudaipcmemhandle(handle)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = pyarrow_wrap_cudaipcmemhandle(__pyx_v_handle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":626
 *         return nbytes_
 * 
 *     def export_for_ipc(self):             # <<<<<<<<<<<<<<
 *         """
 *         Expose this device buffer as IPC memory which can be used in other
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.export_for_ipc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":645
 * 
 *     @property
 *     def context(self):             # <<<<<<<<<<<<<<
 *         """Returns the CUDA driver context of this buffer.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_7context_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_7context_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_7context___get__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_7context___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":648
 *         """Returns the CUDA driver context of this buffer.
 *         """
 *         return pyarrow_wrap_cudacontext(self.cuda_buffer.get().context())             # <<<<<<<<<<<<<<
 * 
 *     def slice(self, offset=0, length=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = pyarrow_wrap_cudacontext(__pyx_v_self->cuda_buffer.get()->context()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":645
 * 
 *     @property
 *     def context(self):             # <<<<<<<<<<<<<<
 *         """Returns the CUDA driver context of this buffer.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.context.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":650
 *         return pyarrow_wrap_cudacontext(self.cuda_buffer.get().context())
 * 
 *     def slice(self, offset=0, length=None):             # <<<<<<<<<<<<<<
 *         """Return slice of device buffer
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_17slice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_16slice[] = "CudaBuffer.slice(self, offset=0, length=None)\nReturn slice of device buffer\n\n        Parameters\n        ----------\n        offset : int, default 0\n          Specify offset from the start of device buffer to slice\n        length : int, default None\n          Specify the length of slice (default is until end of device\n          buffer starting from offset). If the length is larger than\n          the data available, the returned slice will have a size of\n          the available data starting from the offset.\n\n        Returns\n        -------\n        sliced : CudaBuffer\n          Zero-copy slice of device buffer.\n\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_17slice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_offset = 0;
  PyObject *__pyx_v_length = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_offset,&__pyx_n_s_length,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_length);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slice") < 0)) __PYX_ERR(0, 650, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_offset = values[0];
    __pyx_v_length = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slice", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 650, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_16slice(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self), __pyx_v_offset, __pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_16slice(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, PyObject *__pyx_v_offset, PyObject *__pyx_v_length) {
  int64_t __pyx_v_offset_;
  int64_t __pyx_v_size;
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_v_parent;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int64_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_t_7;
  __Pyx_RefNannySetupContext("slice", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":669
 * 
 *         """
 *         if offset < 0 or (self.size and offset >= self.size):             # <<<<<<<<<<<<<<
 *             raise ValueError('offset argument is out-of-range')
 *         cdef int64_t offset_ = offset
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_offset, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_offset, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "cudf/_libxx/arrow/_cuda.pyx":670
 *         """
 *         if offset < 0 or (self.size and offset >= self.size):
 *             raise ValueError('offset argument is out-of-range')             # <<<<<<<<<<<<<<
 *         cdef int64_t offset_ = offset
 *         cdef int64_t size
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 670, __pyx_L1_error)

    /* "cudf/_libxx/arrow/_cuda.pyx":669
 * 
 *         """
 *         if offset < 0 or (self.size and offset >= self.size):             # <<<<<<<<<<<<<<
 *             raise ValueError('offset argument is out-of-range')
 *         cdef int64_t offset_ = offset
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":671
 *         if offset < 0 or (self.size and offset >= self.size):
 *             raise ValueError('offset argument is out-of-range')
 *         cdef int64_t offset_ = offset             # <<<<<<<<<<<<<<
 *         cdef int64_t size
 *         if length is None:
 */
  __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_offset); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L1_error)
  __pyx_v_offset_ = __pyx_t_5;

  /* "cudf/_libxx/arrow/_cuda.pyx":673
 *         cdef int64_t offset_ = offset
 *         cdef int64_t size
 *         if length is None:             # <<<<<<<<<<<<<<
 *             size = self.size - offset_
 *         elif offset + length <= self.size:
 */
  __pyx_t_1 = (__pyx_v_length == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "cudf/_libxx/arrow/_cuda.pyx":674
 *         cdef int64_t size
 *         if length is None:
 *             size = self.size - offset_             # <<<<<<<<<<<<<<
 *         elif offset + length <= self.size:
 *             size = length
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_offset_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_t_6); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_size = __pyx_t_5;

    /* "cudf/_libxx/arrow/_cuda.pyx":673
 *         cdef int64_t offset_ = offset
 *         cdef int64_t size
 *         if length is None:             # <<<<<<<<<<<<<<
 *             size = self.size - offset_
 *         elif offset + length <= self.size:
 */
    goto __pyx_L7;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":675
 *         if length is None:
 *             size = self.size - offset_
 *         elif offset + length <= self.size:             # <<<<<<<<<<<<<<
 *             size = length
 *         else:
 */
  __pyx_t_6 = PyNumber_Add(__pyx_v_offset, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "cudf/_libxx/arrow/_cuda.pyx":676
 *             size = self.size - offset_
 *         elif offset + length <= self.size:
 *             size = length             # <<<<<<<<<<<<<<
 *         else:
 *             size = self.size - offset
 */
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_length); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L1_error)
    __pyx_v_size = __pyx_t_5;

    /* "cudf/_libxx/arrow/_cuda.pyx":675
 *         if length is None:
 *             size = self.size - offset_
 *         elif offset + length <= self.size:             # <<<<<<<<<<<<<<
 *             size = length
 *         else:
 */
    goto __pyx_L7;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":678
 *             size = length
 *         else:
 *             size = self.size - offset             # <<<<<<<<<<<<<<
 *         parent = pyarrow_unwrap_cudabuffer(self)
 *         return pyarrow_wrap_cudabuffer(make_shared[CCudaBuffer](parent,
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_v_offset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_t_2); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_size = __pyx_t_5;
  }
  __pyx_L7:;

  /* "cudf/_libxx/arrow/_cuda.pyx":679
 *         else:
 *             size = self.size - offset
 *         parent = pyarrow_unwrap_cudabuffer(self)             # <<<<<<<<<<<<<<
 *         return pyarrow_wrap_cudabuffer(make_shared[CCudaBuffer](parent,
 *                                                                 offset_, size))
 */
  __pyx_v_parent = pyarrow_unwrap_cudabuffer(((PyObject *)__pyx_v_self));

  /* "cudf/_libxx/arrow/_cuda.pyx":680
 *             size = self.size - offset
 *         parent = pyarrow_unwrap_cudabuffer(self)
 *         return pyarrow_wrap_cudabuffer(make_shared[CCudaBuffer](parent,             # <<<<<<<<<<<<<<
 *                                                                 offset_, size))
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cudf/_libxx/arrow/_cuda.pyx":681
 *         parent = pyarrow_unwrap_cudabuffer(self)
 *         return pyarrow_wrap_cudabuffer(make_shared[CCudaBuffer](parent,
 *                                                                 offset_, size))             # <<<<<<<<<<<<<<
 * 
 *     def to_pybytes(self):
 */
  try {
    __pyx_t_7 = std::make_shared< arrow::cuda::CudaBuffer>(__pyx_v_parent, __pyx_v_offset_, __pyx_v_size);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 680, __pyx_L1_error)
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":680
 *             size = self.size - offset
 *         parent = pyarrow_unwrap_cudabuffer(self)
 *         return pyarrow_wrap_cudabuffer(make_shared[CCudaBuffer](parent,             # <<<<<<<<<<<<<<
 *                                                                 offset_, size))
 * 
 */
  __pyx_t_2 = pyarrow_wrap_cudabuffer(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":650
 *         return pyarrow_wrap_cudacontext(self.cuda_buffer.get().context())
 * 
 *     def slice(self, offset=0, length=None):             # <<<<<<<<<<<<<<
 *         """Return slice of device buffer
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":683
 *                                                                 offset_, size))
 * 
 *     def to_pybytes(self):             # <<<<<<<<<<<<<<
 *         """Return device buffer content as Python bytes.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_19to_pybytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_18to_pybytes[] = "CudaBuffer.to_pybytes(self)\nReturn device buffer content as Python bytes.\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_19to_pybytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_pybytes (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_18to_pybytes(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_18to_pybytes(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("to_pybytes", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":686
 *         """Return device buffer content as Python bytes.
 *         """
 *         return self.copy_to_host().to_pybytes()             # <<<<<<<<<<<<<<
 * 
 *     def __getbuffer__(self, cp.Py_buffer* buffer, int flags):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy_to_host); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_pybytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":683
 *                                                                 offset_, size))
 * 
 *     def to_pybytes(self):             # <<<<<<<<<<<<<<
 *         """Return device buffer content as Python bytes.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.to_pybytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":688
 *         return self.copy_to_host().to_pybytes()
 * 
 *     def __getbuffer__(self, cp.Py_buffer* buffer, int flags):             # <<<<<<<<<<<<<<
 *         # Device buffer contains data pointers on the device. Hence,
 *         # cannot support buffer protocol PEP-3118 for CudaBuffer.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_21__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_21__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_20__getbuffer__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self), ((Py_buffer *)__pyx_v_buffer), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_20__getbuffer__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, CYTHON_UNUSED Py_buffer *__pyx_v_buffer, CYTHON_UNUSED int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  if (__pyx_v_buffer == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_buffer->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_buffer->obj);

  /* "cudf/_libxx/arrow/_cuda.pyx":691
 *         # Device buffer contains data pointers on the device. Hence,
 *         # cannot support buffer protocol PEP-3118 for CudaBuffer.
 *         raise BufferError('buffer protocol for device buffer not supported')             # <<<<<<<<<<<<<<
 * 
 *     def __getreadbuffer__(self, Py_ssize_t idx, void** p):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_BufferError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 691, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":688
 *         return self.copy_to_host().to_pybytes()
 * 
 *     def __getbuffer__(self, cp.Py_buffer* buffer, int flags):             # <<<<<<<<<<<<<<
 *         # Device buffer contains data pointers on the device. Hence,
 *         # cannot support buffer protocol PEP-3118 for CudaBuffer.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_buffer->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_buffer->obj);
    __Pyx_DECREF(__pyx_v_buffer->obj); __pyx_v_buffer->obj = 0;
  }
  goto __pyx_L2;
  if (__pyx_v_buffer->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_buffer->obj);
    __Pyx_DECREF(__pyx_v_buffer->obj); __pyx_v_buffer->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":693
 *         raise BufferError('buffer protocol for device buffer not supported')
 * 
 *     def __getreadbuffer__(self, Py_ssize_t idx, void** p):             # <<<<<<<<<<<<<<
 *         # Python 2.x specific method
 *         raise NotImplementedError('CudaBuffer.__getreadbuffer__')
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3
static Py_ssize_t __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_23__getreadbuffer__(PyObject *__pyx_v_self, Py_ssize_t __pyx_v_idx, void **__pyx_v_p); /*proto*/
static Py_ssize_t __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_23__getreadbuffer__(PyObject *__pyx_v_self, Py_ssize_t __pyx_v_idx, void **__pyx_v_p) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getreadbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_22__getreadbuffer__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self), ((Py_ssize_t)__pyx_v_idx), ((void **)__pyx_v_p));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

#if PY_MAJOR_VERSION < 3
static Py_ssize_t __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_22__getreadbuffer__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, CYTHON_UNUSED Py_ssize_t __pyx_v_idx, CYTHON_UNUSED void **__pyx_v_p) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__getreadbuffer__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":695
 *     def __getreadbuffer__(self, Py_ssize_t idx, void** p):
 *         # Python 2.x specific method
 *         raise NotImplementedError('CudaBuffer.__getreadbuffer__')             # <<<<<<<<<<<<<<
 * 
 *     def __getwritebuffer__(self, Py_ssize_t idx, void** p):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 695, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":693
 *         raise BufferError('buffer protocol for device buffer not supported')
 * 
 *     def __getreadbuffer__(self, Py_ssize_t idx, void** p):             # <<<<<<<<<<<<<<
 *         # Python 2.x specific method
 *         raise NotImplementedError('CudaBuffer.__getreadbuffer__')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.__getreadbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

/* "cudf/_libxx/arrow/_cuda.pyx":697
 *         raise NotImplementedError('CudaBuffer.__getreadbuffer__')
 * 
 *     def __getwritebuffer__(self, Py_ssize_t idx, void** p):             # <<<<<<<<<<<<<<
 *         # Python 2.x specific method
 *         raise NotImplementedError('CudaBuffer.__getwritebuffer__')
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3
static Py_ssize_t __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_25__getwritebuffer__(PyObject *__pyx_v_self, Py_ssize_t __pyx_v_idx, void **__pyx_v_p); /*proto*/
static Py_ssize_t __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_25__getwritebuffer__(PyObject *__pyx_v_self, Py_ssize_t __pyx_v_idx, void **__pyx_v_p) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getwritebuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_24__getwritebuffer__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self), ((Py_ssize_t)__pyx_v_idx), ((void **)__pyx_v_p));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

#if PY_MAJOR_VERSION < 3
static Py_ssize_t __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_24__getwritebuffer__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, CYTHON_UNUSED Py_ssize_t __pyx_v_idx, CYTHON_UNUSED void **__pyx_v_p) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__getwritebuffer__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":699
 *     def __getwritebuffer__(self, Py_ssize_t idx, void** p):
 *         # Python 2.x specific method
 *         raise NotImplementedError('CudaBuffer.__getwritebuffer__')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 699, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":697
 *         raise NotImplementedError('CudaBuffer.__getreadbuffer__')
 * 
 *     def __getwritebuffer__(self, Py_ssize_t idx, void** p):             # <<<<<<<<<<<<<<
 *         # Python 2.x specific method
 *         raise NotImplementedError('CudaBuffer.__getwritebuffer__')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.__getwritebuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_26__reduce_cython__[] = "CudaBuffer.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_26__reduce_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_28__setstate_cython__[] = "CudaBuffer.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_28__setstate_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.CudaBuffer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":710
 *     """
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("Do not call HostBuffer's constructor directly,"
 *                         " use `cuda.new_host_buffer` function instead.")
 */

/* Python wrapper */
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer___init__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer___init__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":711
 * 
 *     def __init__(self):
 *         raise TypeError("Do not call HostBuffer's constructor directly,"             # <<<<<<<<<<<<<<
 *                         " use `cuda.new_host_buffer` function instead.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 711, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":710
 *     """
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("Do not call HostBuffer's constructor directly,"
 *                         " use `cuda.new_host_buffer` function instead.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.HostBuffer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":714
 *                         " use `cuda.new_host_buffer` function instead.")
 * 
 *     cdef void init_host(self, const shared_ptr[CCudaHostBuffer]& buffer):             # <<<<<<<<<<<<<<
 *         self.host_buffer = buffer
 *         self.init(<shared_ptr[CBuffer]> buffer)
 */

static void __pyx_f_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_init_host(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self, std::shared_ptr< arrow::cuda::CudaHostBuffer>  const &__pyx_v_buffer) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_host", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":715
 * 
 *     cdef void init_host(self, const shared_ptr[CCudaHostBuffer]& buffer):
 *         self.host_buffer = buffer             # <<<<<<<<<<<<<<
 *         self.init(<shared_ptr[CBuffer]> buffer)
 * 
 */
  __pyx_v_self->host_buffer = __pyx_v_buffer;

  /* "cudf/_libxx/arrow/_cuda.pyx":716
 *     cdef void init_host(self, const shared_ptr[CCudaHostBuffer]& buffer):
 *         self.host_buffer = buffer
 *         self.init(<shared_ptr[CBuffer]> buffer)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  ((struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_7pyarrow_3lib_Buffer *)__pyx_v_self), ((std::shared_ptr< arrow::Buffer> )__pyx_v_buffer));

  /* "cudf/_libxx/arrow/_cuda.pyx":714
 *                         " use `cuda.new_host_buffer` function instead.")
 * 
 *     cdef void init_host(self, const shared_ptr[CCudaHostBuffer]& buffer):             # <<<<<<<<<<<<<<
 *         self.host_buffer = buffer
 *         self.init(<shared_ptr[CBuffer]> buffer)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cudf/_libxx/arrow/_cuda.pyx":719
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.host_buffer.get().size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4size___get__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4size___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":720
 *     @property
 *     def size(self):
 *         return self.host_buffer.get().size()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->host_buffer.get()->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":719
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.host_buffer.get().size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.HostBuffer.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_2__reduce_cython__[] = "HostBuffer.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_2__reduce_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.HostBuffer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4__setstate_cython__[] = "HostBuffer.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4__setstate_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.HostBuffer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":731
 *     on the returned buffers.
 *     """
 *     def __cinit__(self, CudaBuffer obj):             # <<<<<<<<<<<<<<
 *         self.buffer = obj
 *         self.reader = new CCudaBufferReader(self.buffer.buffer)
 */

/* Python wrapper */
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_obj = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 731, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_obj = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 731, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, 1, "obj", 0))) __PYX_ERR(0, 731, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader___cinit__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)__pyx_v_self), __pyx_v_obj);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader___cinit__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_v_self, struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":732
 *     """
 *     def __cinit__(self, CudaBuffer obj):
 *         self.buffer = obj             # <<<<<<<<<<<<<<
 *         self.reader = new CCudaBufferReader(self.buffer.buffer)
 *         self.set_random_access_file(
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_obj));
  __Pyx_GOTREF(__pyx_v_self->buffer);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer));
  __pyx_v_self->buffer = __pyx_v_obj;

  /* "cudf/_libxx/arrow/_cuda.pyx":733
 *     def __cinit__(self, CudaBuffer obj):
 *         self.buffer = obj
 *         self.reader = new CCudaBufferReader(self.buffer.buffer)             # <<<<<<<<<<<<<<
 *         self.set_random_access_file(
 *             shared_ptr[RandomAccessFile](self.reader))
 */
  __pyx_v_self->reader = new  arrow::cuda::CudaBufferReader(__pyx_v_self->buffer->__pyx_base.buffer);

  /* "cudf/_libxx/arrow/_cuda.pyx":734
 *         self.buffer = obj
 *         self.reader = new CCudaBufferReader(self.buffer.buffer)
 *         self.set_random_access_file(             # <<<<<<<<<<<<<<
 *             shared_ptr[RandomAccessFile](self.reader))
 *         self.is_readable = True
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.set_random_access_file(((struct __pyx_obj_7pyarrow_3lib_NativeFile *)__pyx_v_self), std::shared_ptr<arrow::io::RandomAccessFile> (__pyx_v_self->reader)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":736
 *         self.set_random_access_file(
 *             shared_ptr[RandomAccessFile](self.reader))
 *         self.is_readable = True             # <<<<<<<<<<<<<<
 * 
 *     def read_buffer(self, nbytes=None):
 */
  __pyx_v_self->__pyx_base.is_readable = 1;

  /* "cudf/_libxx/arrow/_cuda.pyx":731
 *     on the returned buffers.
 *     """
 *     def __cinit__(self, CudaBuffer obj):             # <<<<<<<<<<<<<<
 *         self.buffer = obj
 *         self.reader = new CCudaBufferReader(self.buffer.buffer)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":738
 *         self.is_readable = True
 * 
 *     def read_buffer(self, nbytes=None):             # <<<<<<<<<<<<<<
 *         """Return a slice view of the underlying device buffer.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_3read_buffer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_2read_buffer[] = "BufferReader.read_buffer(self, nbytes=None)\nReturn a slice view of the underlying device buffer.\n\n        The slice will start at the current reader position and will\n        have specified size in bytes.\n\n        Parameters\n        ----------\n        nbytes : int, default None\n          Specify the number of bytes to read. Default: None (read all\n          remaining bytes).\n\n        Returns\n        -------\n        cbuf : CudaBuffer\n          New device buffer.\n\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_3read_buffer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nbytes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_buffer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nbytes,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nbytes);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_buffer") < 0)) __PYX_ERR(0, 738, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nbytes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_buffer", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 738, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferReader.read_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_2read_buffer(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)__pyx_v_self), __pyx_v_nbytes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_2read_buffer(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_v_self, PyObject *__pyx_v_nbytes) {
  int64_t __pyx_v_c_nbytes;
  CYTHON_UNUSED int64_t __pyx_v_bytes_read;
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_v_output;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int64_t __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("read_buffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":758
 *         cdef:
 *             int64_t c_nbytes
 *             int64_t bytes_read = 0             # <<<<<<<<<<<<<<
 *             shared_ptr[CCudaBuffer] output
 * 
 */
  __pyx_v_bytes_read = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":761
 *             shared_ptr[CCudaBuffer] output
 * 
 *         if nbytes is None:             # <<<<<<<<<<<<<<
 *             c_nbytes = self.size() - self.tell()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_nbytes == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cudf/_libxx/arrow/_cuda.pyx":762
 * 
 *         if nbytes is None:
 *             c_nbytes = self.size() - self.tell()             # <<<<<<<<<<<<<<
 *         else:
 *             c_nbytes = nbytes
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tell); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Subtract(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int64_t(__pyx_t_5); if (unlikely((__pyx_t_7 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_c_nbytes = __pyx_t_7;

    /* "cudf/_libxx/arrow/_cuda.pyx":761
 *             shared_ptr[CCudaBuffer] output
 * 
 *         if nbytes is None:             # <<<<<<<<<<<<<<
 *             c_nbytes = self.size() - self.tell()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":764
 *             c_nbytes = self.size() - self.tell()
 *         else:
 *             c_nbytes = nbytes             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  /*else*/ {
    __pyx_t_7 = __Pyx_PyInt_As_int64_t(__pyx_v_nbytes); if (unlikely((__pyx_t_7 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 764, __pyx_L1_error)
    __pyx_v_c_nbytes = __pyx_t_7;
  }
  __pyx_L3:;

  /* "cudf/_libxx/arrow/_cuda.pyx":766
 *             c_nbytes = nbytes
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.reader.Read(c_nbytes,
 *                                           <shared_ptr[CBuffer]*> &output))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cudf/_libxx/arrow/_cuda.pyx":767
 * 
 *         with nogil:
 *             check_status(self.reader.Read(c_nbytes,             # <<<<<<<<<<<<<<
 *                                           <shared_ptr[CBuffer]*> &output))
 * 
 */
        __pyx_t_8 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->reader->Read(__pyx_v_c_nbytes, ((std::shared_ptr< arrow::Buffer>  *)(&__pyx_v_output)))); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 767, __pyx_L5_error)
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":766
 *             c_nbytes = nbytes
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.reader.Read(c_nbytes,
 *                                           <shared_ptr[CBuffer]*> &output))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":770
 *                                           <shared_ptr[CBuffer]*> &output))
 * 
 *         return pyarrow_wrap_cudabuffer(output)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = pyarrow_wrap_cudabuffer(__pyx_v_output); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":738
 *         self.is_readable = True
 * 
 *     def read_buffer(self, nbytes=None):             # <<<<<<<<<<<<<<
 *         """Return a slice view of the underlying device buffer.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferReader.read_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_4__reduce_cython__[] = "BufferReader.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_4__reduce_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferReader.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_6__setstate_cython__[] = "BufferReader.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_6__setstate_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferReader.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":779
 *     buffering.
 *     """
 *     def __cinit__(self, CudaBuffer buffer):             # <<<<<<<<<<<<<<
 *         self.buffer = buffer
 *         self.writer = new CCudaBufferWriter(self.buffer.cuda_buffer)
 */

/* Python wrapper */
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_buffer = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buffer,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 779, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_buffer = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 779, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, 1, "buffer", 0))) __PYX_ERR(0, 779, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter___cinit__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self), __pyx_v_buffer);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter___cinit__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_buffer) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":780
 *     """
 *     def __cinit__(self, CudaBuffer buffer):
 *         self.buffer = buffer             # <<<<<<<<<<<<<<
 *         self.writer = new CCudaBufferWriter(self.buffer.cuda_buffer)
 *         self.set_output_stream(shared_ptr[OutputStream](self.writer))
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_buffer));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_buffer));
  __Pyx_GOTREF(__pyx_v_self->buffer);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer));
  __pyx_v_self->buffer = __pyx_v_buffer;

  /* "cudf/_libxx/arrow/_cuda.pyx":781
 *     def __cinit__(self, CudaBuffer buffer):
 *         self.buffer = buffer
 *         self.writer = new CCudaBufferWriter(self.buffer.cuda_buffer)             # <<<<<<<<<<<<<<
 *         self.set_output_stream(shared_ptr[OutputStream](self.writer))
 *         self.is_writable = True
 */
  __pyx_v_self->writer = new  arrow::cuda::CudaBufferWriter(__pyx_v_self->buffer->cuda_buffer);

  /* "cudf/_libxx/arrow/_cuda.pyx":782
 *         self.buffer = buffer
 *         self.writer = new CCudaBufferWriter(self.buffer.cuda_buffer)
 *         self.set_output_stream(shared_ptr[OutputStream](self.writer))             # <<<<<<<<<<<<<<
 *         self.is_writable = True
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.set_output_stream(((struct __pyx_obj_7pyarrow_3lib_NativeFile *)__pyx_v_self), std::shared_ptr<arrow::io::OutputStream> (__pyx_v_self->writer)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":783
 *         self.writer = new CCudaBufferWriter(self.buffer.cuda_buffer)
 *         self.set_output_stream(shared_ptr[OutputStream](self.writer))
 *         self.is_writable = True             # <<<<<<<<<<<<<<
 * 
 *     def writeat(self, int64_t position, object data):
 */
  __pyx_v_self->__pyx_base.is_writable = 1;

  /* "cudf/_libxx/arrow/_cuda.pyx":779
 *     buffering.
 *     """
 *     def __cinit__(self, CudaBuffer buffer):             # <<<<<<<<<<<<<<
 *         self.buffer = buffer
 *         self.writer = new CCudaBufferWriter(self.buffer.cuda_buffer)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":785
 *         self.is_writable = True
 * 
 *     def writeat(self, int64_t position, object data):             # <<<<<<<<<<<<<<
 *         """Write data to buffer starting from position.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_3writeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_2writeat[] = "BufferWriter.writeat(self, int64_t position, data)\nWrite data to buffer starting from position.\n\n        Parameters\n        ----------\n        position : int\n          Specify device buffer position where the data will be\n          written.\n        data : array-like\n          Specify data, the data instance must implement buffer\n          protocol.\n        ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_3writeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int64_t __pyx_v_position;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_position,&__pyx_n_s_data,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_position)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeat", 1, 2, 2, 1); __PYX_ERR(0, 785, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeat") < 0)) __PYX_ERR(0, 785, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_position = __Pyx_PyInt_As_int64_t(values[0]); if (unlikely((__pyx_v_position == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L3_error)
    __pyx_v_data = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 785, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.writeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_2writeat(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self), __pyx_v_position, __pyx_v_data);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_2writeat(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, int64_t __pyx_v_position, PyObject *__pyx_v_data) {
  struct __pyx_obj_7pyarrow_3lib_Buffer *__pyx_v_arrow_buffer = 0;
  uint8_t const *__pyx_v_buf;
  int64_t __pyx_v_bufsize;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("writeat", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":797
 *           protocol.
 *         """
 *         cdef Buffer arrow_buffer = as_buffer(data)             # <<<<<<<<<<<<<<
 *         cdef const uint8_t* buf = arrow_buffer.buffer.get().data()
 *         cdef int64_t bufsize = len(arrow_buffer)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_as_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_data);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pyarrow_3lib_Buffer))))) __PYX_ERR(0, 797, __pyx_L1_error)
  __pyx_v_arrow_buffer = ((struct __pyx_obj_7pyarrow_3lib_Buffer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":798
 *         """
 *         cdef Buffer arrow_buffer = as_buffer(data)
 *         cdef const uint8_t* buf = arrow_buffer.buffer.get().data()             # <<<<<<<<<<<<<<
 *         cdef int64_t bufsize = len(arrow_buffer)
 *         with nogil:
 */
  __pyx_v_buf = __pyx_v_arrow_buffer->buffer.get()->data();

  /* "cudf/_libxx/arrow/_cuda.pyx":799
 *         cdef Buffer arrow_buffer = as_buffer(data)
 *         cdef const uint8_t* buf = arrow_buffer.buffer.get().data()
 *         cdef int64_t bufsize = len(arrow_buffer)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             check_status(self.writer.WriteAt(position, buf, bufsize))
 */
  __pyx_t_4 = PyObject_Length(((PyObject *)__pyx_v_arrow_buffer)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 799, __pyx_L1_error)
  __pyx_v_bufsize = __pyx_t_4;

  /* "cudf/_libxx/arrow/_cuda.pyx":800
 *         cdef const uint8_t* buf = arrow_buffer.buffer.get().data()
 *         cdef int64_t bufsize = len(arrow_buffer)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.writer.WriteAt(position, buf, bufsize))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cudf/_libxx/arrow/_cuda.pyx":801
 *         cdef int64_t bufsize = len(arrow_buffer)
 *         with nogil:
 *             check_status(self.writer.WriteAt(position, buf, bufsize))             # <<<<<<<<<<<<<<
 * 
 *     def flush(self):
 */
        __pyx_t_5 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->writer->WriteAt(__pyx_v_position, __pyx_v_buf, __pyx_v_bufsize)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 801, __pyx_L4_error)
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":800
 *         cdef const uint8_t* buf = arrow_buffer.buffer.get().data()
 *         cdef int64_t bufsize = len(arrow_buffer)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.writer.WriteAt(position, buf, bufsize))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":785
 *         self.is_writable = True
 * 
 *     def writeat(self, int64_t position, object data):             # <<<<<<<<<<<<<<
 *         """Write data to buffer starting from position.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.writeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arrow_buffer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":803
 *             check_status(self.writer.WriteAt(position, buf, bufsize))
 * 
 *     def flush(self):             # <<<<<<<<<<<<<<
 *         """ Flush the buffer stream """
 *         with nogil:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_5flush(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_4flush[] = "BufferWriter.flush(self)\n Flush the buffer stream ";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_5flush(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flush (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_4flush(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_4flush(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("flush", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":805
 *     def flush(self):
 *         """ Flush the buffer stream """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.writer.Flush())
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cudf/_libxx/arrow/_cuda.pyx":806
 *         """ Flush the buffer stream """
 *         with nogil:
 *             check_status(self.writer.Flush())             # <<<<<<<<<<<<<<
 * 
 *     def seek(self, int64_t position, int whence=0):
 */
        __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->writer->Flush()); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 806, __pyx_L4_error)
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":805
 *     def flush(self):
 *         """ Flush the buffer stream """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.writer.Flush())
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":803
 *             check_status(self.writer.WriteAt(position, buf, bufsize))
 * 
 *     def flush(self):             # <<<<<<<<<<<<<<
 *         """ Flush the buffer stream """
 *         with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.flush", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":808
 *             check_status(self.writer.Flush())
 * 
 *     def seek(self, int64_t position, int whence=0):             # <<<<<<<<<<<<<<
 *         # TODO: remove this method after NativeFile.seek supports
 *         # writable files.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_7seek(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_6seek[] = "BufferWriter.seek(self, int64_t position, int whence=0)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_7seek(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int64_t __pyx_v_position;
  int __pyx_v_whence;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_position,&__pyx_n_s_whence,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_position)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_whence);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "seek") < 0)) __PYX_ERR(0, 808, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_position = __Pyx_PyInt_As_int64_t(values[0]); if (unlikely((__pyx_v_position == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 808, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_whence = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_whence == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 808, __pyx_L3_error)
    } else {
      __pyx_v_whence = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seek", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 808, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_6seek(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self), __pyx_v_position, __pyx_v_whence);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_6seek(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, int64_t __pyx_v_position, int __pyx_v_whence) {
  int64_t __pyx_v_offset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("seek", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":813
 *         cdef int64_t offset
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             if whence == 0:
 *                 offset = position
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cudf/_libxx/arrow/_cuda.pyx":814
 * 
 *         with nogil:
 *             if whence == 0:             # <<<<<<<<<<<<<<
 *                 offset = position
 *             elif whence == 1:
 */
        switch (__pyx_v_whence) {
          case 0:

          /* "cudf/_libxx/arrow/_cuda.pyx":815
 *         with nogil:
 *             if whence == 0:
 *                 offset = position             # <<<<<<<<<<<<<<
 *             elif whence == 1:
 *                 check_status(self.writer.Tell(&offset))
 */
          __pyx_v_offset = __pyx_v_position;

          /* "cudf/_libxx/arrow/_cuda.pyx":814
 * 
 *         with nogil:
 *             if whence == 0:             # <<<<<<<<<<<<<<
 *                 offset = position
 *             elif whence == 1:
 */
          break;
          case 1:

          /* "cudf/_libxx/arrow/_cuda.pyx":817
 *                 offset = position
 *             elif whence == 1:
 *                 check_status(self.writer.Tell(&offset))             # <<<<<<<<<<<<<<
 *                 offset = offset + position
 *             else:
 */
          __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->writer->Tell((&__pyx_v_offset))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 817, __pyx_L4_error)

          /* "cudf/_libxx/arrow/_cuda.pyx":818
 *             elif whence == 1:
 *                 check_status(self.writer.Tell(&offset))
 *                 offset = offset + position             # <<<<<<<<<<<<<<
 *             else:
 *                 with gil:
 */
          __pyx_v_offset = (__pyx_v_offset + __pyx_v_position);

          /* "cudf/_libxx/arrow/_cuda.pyx":816
 *             if whence == 0:
 *                 offset = position
 *             elif whence == 1:             # <<<<<<<<<<<<<<
 *                 check_status(self.writer.Tell(&offset))
 *                 offset = offset + position
 */
          break;
          default:

          /* "cudf/_libxx/arrow/_cuda.pyx":820
 *                 offset = offset + position
 *             else:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise ValueError("Invalid value of whence: {0}"
 *                                      .format(whence))
 */
          {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              /*try:*/ {

                /* "cudf/_libxx/arrow/_cuda.pyx":822
 *                 with gil:
 *                     raise ValueError("Invalid value of whence: {0}"
 *                                      .format(whence))             # <<<<<<<<<<<<<<
 *             check_status(self.writer.Seek(offset))
 *         return self.tell()
 */
                __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Invalid_value_of_whence_0, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 822, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_whence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 822, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_5 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                  __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
                  if (likely(__pyx_t_5)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                    __Pyx_INCREF(__pyx_t_5);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_3, function);
                  }
                }
                __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 822, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                /* "cudf/_libxx/arrow/_cuda.pyx":821
 *             else:
 *                 with gil:
 *                     raise ValueError("Invalid value of whence: {0}"             # <<<<<<<<<<<<<<
 *                                      .format(whence))
 *             check_status(self.writer.Seek(offset))
 */
                __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 821, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_Raise(__pyx_t_3, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __PYX_ERR(0, 821, __pyx_L7_error)
              }

              /* "cudf/_libxx/arrow/_cuda.pyx":820
 *                 offset = offset + position
 *             else:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     raise ValueError("Invalid value of whence: {0}"
 *                                      .format(whence))
 */
              /*finally:*/ {
                __pyx_L7_error: {
                  #ifdef WITH_THREAD
                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  goto __pyx_L4_error;
                }
              }
          }
          break;
        }

        /* "cudf/_libxx/arrow/_cuda.pyx":823
 *                     raise ValueError("Invalid value of whence: {0}"
 *                                      .format(whence))
 *             check_status(self.writer.Seek(offset))             # <<<<<<<<<<<<<<
 *         return self.tell()
 * 
 */
        __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->writer->Seek(__pyx_v_offset)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 823, __pyx_L4_error)
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":813
 *         cdef int64_t offset
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             if whence == 0:
 *                 offset = position
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":824
 *                                      .format(whence))
 *             check_status(self.writer.Seek(offset))
 *         return self.tell()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tell); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":808
 *             check_status(self.writer.Flush())
 * 
 *     def seek(self, int64_t position, int whence=0):             # <<<<<<<<<<<<<<
 *         # TODO: remove this method after NativeFile.seek supports
 *         # writable files.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":827
 * 
 *     @property
 *     def buffer_size(self):             # <<<<<<<<<<<<<<
 *         """Returns size of host (CPU) buffer, 0 for unbuffered
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size___get__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":830
 *         """Returns size of host (CPU) buffer, 0 for unbuffered
 *         """
 *         return self.writer.buffer_size()             # <<<<<<<<<<<<<<
 * 
 *     @buffer_size.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->writer->buffer_size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":827
 * 
 *     @property
 *     def buffer_size(self):             # <<<<<<<<<<<<<<
 *         """Returns size of host (CPU) buffer, 0 for unbuffered
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":833
 * 
 *     @buffer_size.setter
 *     def buffer_size(self, int64_t buffer_size):             # <<<<<<<<<<<<<<
 *         """Set CPU buffer size to limit calls to cudaMemcpy
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_buffer_size); /*proto*/
static int __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_buffer_size) {
  int64_t __pyx_v_buffer_size;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_buffer_size); {
    __pyx_v_buffer_size = __Pyx_PyInt_As_int64_t(__pyx_arg_buffer_size); if (unlikely((__pyx_v_buffer_size == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 833, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size_2__set__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self), ((int64_t)__pyx_v_buffer_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size_2__set__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, int64_t __pyx_v_buffer_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":841
 *           Specify the size of CPU buffer to allocate in bytes.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.writer.SetBufferSize(buffer_size))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cudf/_libxx/arrow/_cuda.pyx":842
 *         """
 *         with nogil:
 *             check_status(self.writer.SetBufferSize(buffer_size))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
        __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(__pyx_v_self->writer->SetBufferSize(__pyx_v_buffer_size)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 842, __pyx_L4_error)
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":841
 *           Specify the size of CPU buffer to allocate in bytes.
 *         """
 *         with nogil:             # <<<<<<<<<<<<<<
 *             check_status(self.writer.SetBufferSize(buffer_size))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":833
 * 
 *     @buffer_size.setter
 *     def buffer_size(self, int64_t buffer_size):             # <<<<<<<<<<<<<<
 *         """Set CPU buffer size to limit calls to cudaMemcpy
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":845
 * 
 *     @property
 *     def num_bytes_buffered(self):             # <<<<<<<<<<<<<<
 *         """Returns number of bytes buffered on host
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_18num_bytes_buffered_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_18num_bytes_buffered_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_18num_bytes_buffered___get__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_18num_bytes_buffered___get__(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":848
 *         """Returns number of bytes buffered on host
 *         """
 *         return self.writer.num_bytes_buffered()             # <<<<<<<<<<<<<<
 * 
 * # Functions
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->writer->num_bytes_buffered()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":845
 * 
 *     @property
 *     def num_bytes_buffered(self):             # <<<<<<<<<<<<<<
 *         """Returns number of bytes buffered on host
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.num_bytes_buffered.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_8__reduce_cython__[] = "BufferWriter.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_8__reduce_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_10__setstate_cython__[] = "BufferWriter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_10__setstate_cython__(((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.BufferWriter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":853
 * 
 * 
 * def new_host_buffer(const int64_t size, int device=0):             # <<<<<<<<<<<<<<
 *     """Return buffer with CUDA-accessible memory on CPU host
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_1new_host_buffer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_new_host_buffer[] = "new_host_buffer(int64_t size, int device=0)\nReturn buffer with CUDA-accessible memory on CPU host\n\n    Parameters\n    ----------\n    size : int\n      Specify the number of bytes to be allocated.\n    device : int\n      Specify GPU device number.\n\n    Returns\n    -------\n    dbuf : HostBuffer\n      Allocated host buffer\n    ";
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_1new_host_buffer = {"new_host_buffer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_1new_host_buffer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_new_host_buffer};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_1new_host_buffer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int64_t __pyx_v_size;
  int __pyx_v_device;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_host_buffer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,&__pyx_n_s_device,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "new_host_buffer") < 0)) __PYX_ERR(0, 853, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = __Pyx_PyInt_As_int64_t(values[0]); if (unlikely((__pyx_v_size == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_device = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_device == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
    } else {
      __pyx_v_device = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("new_host_buffer", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 853, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.new_host_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_new_host_buffer(__pyx_self, __pyx_v_size, __pyx_v_device);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_new_host_buffer(CYTHON_UNUSED PyObject *__pyx_self, int64_t __pyx_v_size, int __pyx_v_device) {
  std::shared_ptr< arrow::cuda::CudaHostBuffer>  __pyx_v_buffer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("new_host_buffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":869
 *     """
 *     cdef shared_ptr[CCudaHostBuffer] buffer
 *     check_status(AllocateCudaHostBuffer(device, size, &buffer))             # <<<<<<<<<<<<<<
 *     return pyarrow_wrap_cudahostbuffer(buffer)
 * 
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status(arrow::cuda::AllocateCudaHostBuffer(__pyx_v_device, __pyx_v_size, (&__pyx_v_buffer))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 869, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":870
 *     cdef shared_ptr[CCudaHostBuffer] buffer
 *     check_status(AllocateCudaHostBuffer(device, size, &buffer))
 *     return pyarrow_wrap_cudahostbuffer(buffer)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = pyarrow_wrap_cudahostbuffer(__pyx_v_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":853
 * 
 * 
 * def new_host_buffer(const int64_t size, int device=0):             # <<<<<<<<<<<<<<
 *     """Return buffer with CUDA-accessible memory on CPU host
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.new_host_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":873
 * 
 * 
 * def serialize_record_batch(object batch, object ctx):             # <<<<<<<<<<<<<<
 *     """ Write record batch message to GPU device memory
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_3serialize_record_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_2serialize_record_batch[] = "serialize_record_batch(batch, ctx)\n Write record batch message to GPU device memory\n\n    Parameters\n    ----------\n    batch : RecordBatch\n      Record batch to write\n    ctx : Context\n      CUDA Context to allocate device memory from\n\n    Returns\n    -------\n    dbuf : CudaBuffer\n      device buffer which contains the record batch message\n    ";
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_3serialize_record_batch = {"serialize_record_batch", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_3serialize_record_batch, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_2serialize_record_batch};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_3serialize_record_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_batch = 0;
  PyObject *__pyx_v_ctx = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("serialize_record_batch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_batch,&__pyx_n_s_ctx,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batch)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ctx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("serialize_record_batch", 1, 2, 2, 1); __PYX_ERR(0, 873, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "serialize_record_batch") < 0)) __PYX_ERR(0, 873, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_batch = values[0];
    __pyx_v_ctx = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("serialize_record_batch", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 873, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.serialize_record_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_2serialize_record_batch(__pyx_self, __pyx_v_batch, __pyx_v_ctx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_2serialize_record_batch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_batch, PyObject *__pyx_v_ctx) {
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_v_buffer;
   arrow::RecordBatch *__pyx_v_batch_;
   arrow::cuda::CudaContext *__pyx_v_ctx_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("serialize_record_batch", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":889
 *     """
 *     cdef shared_ptr[CCudaBuffer] buffer
 *     cdef CRecordBatch* batch_ = pyarrow_unwrap_batch(batch).get()             # <<<<<<<<<<<<<<
 *     cdef CCudaContext* ctx_ = pyarrow_unwrap_cudacontext(ctx).get()
 *     with nogil:
 */
  __pyx_v_batch_ = __pyx_f_7pyarrow_3lib_pyarrow_unwrap_batch(__pyx_v_batch).get();

  /* "cudf/_libxx/arrow/_cuda.pyx":890
 *     cdef shared_ptr[CCudaBuffer] buffer
 *     cdef CRecordBatch* batch_ = pyarrow_unwrap_batch(batch).get()
 *     cdef CCudaContext* ctx_ = pyarrow_unwrap_cudacontext(ctx).get()             # <<<<<<<<<<<<<<
 *     with nogil:
 *         check_status(CudaSerializeRecordBatch(batch_[0], ctx_, &buffer))
 */
  __pyx_v_ctx_ = pyarrow_unwrap_cudacontext(__pyx_v_ctx).get();

  /* "cudf/_libxx/arrow/_cuda.pyx":891
 *     cdef CRecordBatch* batch_ = pyarrow_unwrap_batch(batch).get()
 *     cdef CCudaContext* ctx_ = pyarrow_unwrap_cudacontext(ctx).get()
 *     with nogil:             # <<<<<<<<<<<<<<
 *         check_status(CudaSerializeRecordBatch(batch_[0], ctx_, &buffer))
 *     return pyarrow_wrap_cudabuffer(buffer)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cudf/_libxx/arrow/_cuda.pyx":892
 *     cdef CCudaContext* ctx_ = pyarrow_unwrap_cudacontext(ctx).get()
 *     with nogil:
 *         check_status(CudaSerializeRecordBatch(batch_[0], ctx_, &buffer))             # <<<<<<<<<<<<<<
 *     return pyarrow_wrap_cudabuffer(buffer)
 * 
 */
        __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status( arrow::cuda::SerializeRecordBatch((__pyx_v_batch_[0]), __pyx_v_ctx_, (&__pyx_v_buffer))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 892, __pyx_L4_error)
      }

      /* "cudf/_libxx/arrow/_cuda.pyx":891
 *     cdef CRecordBatch* batch_ = pyarrow_unwrap_batch(batch).get()
 *     cdef CCudaContext* ctx_ = pyarrow_unwrap_cudacontext(ctx).get()
 *     with nogil:             # <<<<<<<<<<<<<<
 *         check_status(CudaSerializeRecordBatch(batch_[0], ctx_, &buffer))
 *     return pyarrow_wrap_cudabuffer(buffer)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":893
 *     with nogil:
 *         check_status(CudaSerializeRecordBatch(batch_[0], ctx_, &buffer))
 *     return pyarrow_wrap_cudabuffer(buffer)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = pyarrow_wrap_cudabuffer(__pyx_v_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":873
 * 
 * 
 * def serialize_record_batch(object batch, object ctx):             # <<<<<<<<<<<<<<
 *     """ Write record batch message to GPU device memory
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.serialize_record_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":896
 * 
 * 
 * def read_message(object source, pool=None):             # <<<<<<<<<<<<<<
 *     """ Read Arrow IPC message located on GPU device
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_5read_message(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_4read_message[] = "read_message(source, pool=None)\n Read Arrow IPC message located on GPU device\n\n    Parameters\n    ----------\n    source : {CudaBuffer, cuda.BufferReader}\n      Device buffer or reader of device buffer.\n    pool : MemoryPool (optional)\n      Pool to allocate CPU memory for the metadata\n\n    Returns\n    -------\n    message : Message\n      The deserialized message, body still on device\n    ";
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_5read_message = {"read_message", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_5read_message, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_4read_message};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_5read_message(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source = 0;
  PyObject *__pyx_v_pool = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_message (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source,&__pyx_n_s_pool,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pool);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_message") < 0)) __PYX_ERR(0, 896, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_source = values[0];
    __pyx_v_pool = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_message", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 896, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.read_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_4read_message(__pyx_self, __pyx_v_source, __pyx_v_pool);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_4read_message(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_source, PyObject *__pyx_v_pool) {
  struct __pyx_obj_7pyarrow_3lib_Message *__pyx_v_result = 0;
   arrow::MemoryPool *__pyx_v_pool_;
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *__pyx_v_reader = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("read_message", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":912
 *     """
 *     cdef:
 *         Message result = Message.__new__(Message)             # <<<<<<<<<<<<<<
 *     cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)
 *     if not isinstance(source, BufferReader):
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_7pyarrow_3lib_Message), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pyarrow_3lib_Message)))) __PYX_ERR(0, 912, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_obj_7pyarrow_3lib_Message *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":913
 *     cdef:
 *         Message result = Message.__new__(Message)
 *     cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)             # <<<<<<<<<<<<<<
 *     if not isinstance(source, BufferReader):
 *         reader = BufferReader(source)
 */
  if (!(likely(((__pyx_v_pool) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_pool, __pyx_ptype_7pyarrow_3lib_MemoryPool))))) __PYX_ERR(0, 913, __pyx_L1_error)
  __pyx_v_pool_ = __pyx_f_7pyarrow_3lib_maybe_unbox_memory_pool(((struct __pyx_obj_7pyarrow_3lib_MemoryPool *)__pyx_v_pool));

  /* "cudf/_libxx/arrow/_cuda.pyx":914
 *         Message result = Message.__new__(Message)
 *     cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)
 *     if not isinstance(source, BufferReader):             # <<<<<<<<<<<<<<
 *         reader = BufferReader(source)
 *     check_status(CudaReadMessage(reader.reader, pool_, &result.message))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_source, __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_BufferReader); 
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_3) {

    /* "cudf/_libxx/arrow/_cuda.pyx":915
 *     cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)
 *     if not isinstance(source, BufferReader):
 *         reader = BufferReader(source)             # <<<<<<<<<<<<<<
 *     check_status(CudaReadMessage(reader.reader, pool_, &result.message))
 *     return result
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_BufferReader), __pyx_v_source); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_reader = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cudf/_libxx/arrow/_cuda.pyx":914
 *         Message result = Message.__new__(Message)
 *     cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)
 *     if not isinstance(source, BufferReader):             # <<<<<<<<<<<<<<
 *         reader = BufferReader(source)
 *     check_status(CudaReadMessage(reader.reader, pool_, &result.message))
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":916
 *     if not isinstance(source, BufferReader):
 *         reader = BufferReader(source)
 *     check_status(CudaReadMessage(reader.reader, pool_, &result.message))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(!__pyx_v_reader)) { __Pyx_RaiseUnboundLocalError("reader"); __PYX_ERR(0, 916, __pyx_L1_error) }
  __pyx_t_4 = __pyx_f_7pyarrow_3lib_check_status( arrow::cuda::ReadMessage(__pyx_v_reader->reader, __pyx_v_pool_, (&__pyx_v_result->message))); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 916, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":917
 *         reader = BufferReader(source)
 *     check_status(CudaReadMessage(reader.reader, pool_, &result.message))
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":896
 * 
 * 
 * def read_message(object source, pool=None):             # <<<<<<<<<<<<<<
 *     """ Read Arrow IPC message located on GPU device
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.read_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_reader);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":920
 * 
 * 
 * def read_record_batch(object buffer, object schema, pool=None):             # <<<<<<<<<<<<<<
 *     """Construct RecordBatch referencing IPC message located on CUDA device.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7read_record_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_6read_record_batch[] = "read_record_batch(buffer, schema, pool=None)\nConstruct RecordBatch referencing IPC message located on CUDA device.\n\n    While the metadata is copied to host memory for deserialization,\n    the record batch data remains on the device.\n\n    Parameters\n    ----------\n    buffer :\n      Device buffer containing the complete IPC message\n    schema : Schema\n      The schema for the record batch\n    pool : MemoryPool (optional)\n      Pool to allocate metadata from\n\n    Returns\n    -------\n    batch : RecordBatch\n      Reconstructed record batch, with device pointers\n\n    ";
static PyMethodDef __pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_7read_record_batch = {"read_record_batch", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7read_record_batch, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_6read_record_batch};
static PyObject *__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7read_record_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_buffer = 0;
  PyObject *__pyx_v_schema = 0;
  PyObject *__pyx_v_pool = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_record_batch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buffer,&__pyx_n_s_schema,&__pyx_n_s_pool,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_schema)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_record_batch", 0, 2, 3, 1); __PYX_ERR(0, 920, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pool);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_record_batch") < 0)) __PYX_ERR(0, 920, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buffer = values[0];
    __pyx_v_schema = values[1];
    __pyx_v_pool = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_record_batch", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 920, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.read_record_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cudf_6_libxx_5arrow_5_cuda_6read_record_batch(__pyx_self, __pyx_v_buffer, __pyx_v_schema, __pyx_v_pool);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cudf_6_libxx_5arrow_5_cuda_6read_record_batch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_buffer, PyObject *__pyx_v_schema, PyObject *__pyx_v_pool) {
  std::shared_ptr< arrow::Schema>  __pyx_v_schema_;
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_v_buffer_;
   arrow::MemoryPool *__pyx_v_pool_;
  std::shared_ptr< arrow::RecordBatch>  __pyx_v_batch;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("read_record_batch", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":941
 * 
 *     """
 *     cdef shared_ptr[CSchema] schema_ = pyarrow_unwrap_schema(schema)             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCudaBuffer] buffer_ = pyarrow_unwrap_cudabuffer(buffer)
 *     cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)
 */
  __pyx_v_schema_ = __pyx_f_7pyarrow_3lib_pyarrow_unwrap_schema(__pyx_v_schema);

  /* "cudf/_libxx/arrow/_cuda.pyx":942
 *     """
 *     cdef shared_ptr[CSchema] schema_ = pyarrow_unwrap_schema(schema)
 *     cdef shared_ptr[CCudaBuffer] buffer_ = pyarrow_unwrap_cudabuffer(buffer)             # <<<<<<<<<<<<<<
 *     cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)
 *     cdef shared_ptr[CRecordBatch] batch
 */
  __pyx_v_buffer_ = pyarrow_unwrap_cudabuffer(__pyx_v_buffer);

  /* "cudf/_libxx/arrow/_cuda.pyx":943
 *     cdef shared_ptr[CSchema] schema_ = pyarrow_unwrap_schema(schema)
 *     cdef shared_ptr[CCudaBuffer] buffer_ = pyarrow_unwrap_cudabuffer(buffer)
 *     cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRecordBatch] batch
 *     check_status(CudaReadRecordBatch(schema_, buffer_, pool_, &batch))
 */
  if (!(likely(((__pyx_v_pool) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_pool, __pyx_ptype_7pyarrow_3lib_MemoryPool))))) __PYX_ERR(0, 943, __pyx_L1_error)
  __pyx_v_pool_ = __pyx_f_7pyarrow_3lib_maybe_unbox_memory_pool(((struct __pyx_obj_7pyarrow_3lib_MemoryPool *)__pyx_v_pool));

  /* "cudf/_libxx/arrow/_cuda.pyx":945
 *     cdef CMemoryPool* pool_ = maybe_unbox_memory_pool(pool)
 *     cdef shared_ptr[CRecordBatch] batch
 *     check_status(CudaReadRecordBatch(schema_, buffer_, pool_, &batch))             # <<<<<<<<<<<<<<
 *     return pyarrow_wrap_batch(batch)
 * 
 */
  __pyx_t_1 = __pyx_f_7pyarrow_3lib_check_status( arrow::cuda::ReadRecordBatch(__pyx_v_schema_, __pyx_v_buffer_, __pyx_v_pool_, (&__pyx_v_batch))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 945, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":946
 *     cdef shared_ptr[CRecordBatch] batch
 *     check_status(CudaReadRecordBatch(schema_, buffer_, pool_, &batch))
 *     return pyarrow_wrap_batch(batch)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7pyarrow_3lib_pyarrow_wrap_batch(__pyx_v_batch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":920
 * 
 * 
 * def read_record_batch(object buffer, object schema, pool=None):             # <<<<<<<<<<<<<<
 *     """Construct RecordBatch referencing IPC message located on CUDA device.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.read_record_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":952
 * 
 * 
 * cdef public api bint pyarrow_is_buffer(object buffer):             # <<<<<<<<<<<<<<
 *     return isinstance(buffer, Buffer)
 * 
 */

int pyarrow_is_buffer(PyObject *__pyx_v_buffer) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("pyarrow_is_buffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":953
 * 
 * cdef public api bint pyarrow_is_buffer(object buffer):
 *     return isinstance(buffer, Buffer)             # <<<<<<<<<<<<<<
 * 
 * # cudabuffer
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_buffer, __pyx_ptype_7pyarrow_3lib_Buffer); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":952
 * 
 * 
 * cdef public api bint pyarrow_is_buffer(object buffer):             # <<<<<<<<<<<<<<
 *     return isinstance(buffer, Buffer)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":957
 * # cudabuffer
 * 
 * cdef public api bint pyarrow_is_cudabuffer(object buffer):             # <<<<<<<<<<<<<<
 *     return isinstance(buffer, CudaBuffer)
 * 
 */

int pyarrow_is_cudabuffer(PyObject *__pyx_v_buffer) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("pyarrow_is_cudabuffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":958
 * 
 * cdef public api bint pyarrow_is_cudabuffer(object buffer):
 *     return isinstance(buffer, CudaBuffer)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_buffer, __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":957
 * # cudabuffer
 * 
 * cdef public api bint pyarrow_is_cudabuffer(object buffer):             # <<<<<<<<<<<<<<
 *     return isinstance(buffer, CudaBuffer)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":961
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudabuffer_base(const shared_ptr[CCudaBuffer]& buf, base):
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)
 */

PyObject *pyarrow_wrap_cudabuffer_base(std::shared_ptr< arrow::cuda::CudaBuffer>  const &__pyx_v_buf, PyObject *__pyx_v_base) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("pyarrow_wrap_cudabuffer_base", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":963
 * cdef public api object \
 *         pyarrow_wrap_cudabuffer_base(const shared_ptr[CCudaBuffer]& buf, base):
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)             # <<<<<<<<<<<<<<
 *     result.init_cuda(buf, base)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer(((PyTypeObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":964
 *         pyarrow_wrap_cudabuffer_base(const shared_ptr[CCudaBuffer]& buf, base):
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)
 *     result.init_cuda(buf, base)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  ((struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_result->__pyx_base.__pyx_vtab)->init_cuda(__pyx_v_result, __pyx_v_buf, __pyx_v_base);

  /* "cudf/_libxx/arrow/_cuda.pyx":965
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)
 *     result.init_cuda(buf, base)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":961
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudabuffer_base(const shared_ptr[CCudaBuffer]& buf, base):
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.pyarrow_wrap_cudabuffer_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":968
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudabuffer(const shared_ptr[CCudaBuffer]& buf):
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)
 */

PyObject *pyarrow_wrap_cudabuffer(std::shared_ptr< arrow::cuda::CudaBuffer>  const &__pyx_v_buf) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("pyarrow_wrap_cudabuffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":970
 * cdef public api object \
 *         pyarrow_wrap_cudabuffer(const shared_ptr[CCudaBuffer]& buf):
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)             # <<<<<<<<<<<<<<
 *     result.init_cuda(buf, None)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer(((PyTypeObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":971
 *         pyarrow_wrap_cudabuffer(const shared_ptr[CCudaBuffer]& buf):
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)
 *     result.init_cuda(buf, None)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  ((struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_result->__pyx_base.__pyx_vtab)->init_cuda(__pyx_v_result, __pyx_v_buf, Py_None);

  /* "cudf/_libxx/arrow/_cuda.pyx":972
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)
 *     result.init_cuda(buf, None)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":968
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudabuffer(const shared_ptr[CCudaBuffer]& buf):
 *     cdef CudaBuffer result = CudaBuffer.__new__(CudaBuffer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.pyarrow_wrap_cudabuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":975
 * 
 * 
 * cdef public api shared_ptr[CCudaBuffer] pyarrow_unwrap_cudabuffer(object obj):             # <<<<<<<<<<<<<<
 *     if pyarrow_is_cudabuffer(obj):
 *         return (<CudaBuffer>obj).cuda_buffer
 */

std::shared_ptr< arrow::cuda::CudaBuffer>  pyarrow_unwrap_cudabuffer(PyObject *__pyx_v_obj) {
  std::shared_ptr< arrow::cuda::CudaBuffer>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("pyarrow_unwrap_cudabuffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":976
 * 
 * cdef public api shared_ptr[CCudaBuffer] pyarrow_unwrap_cudabuffer(object obj):
 *     if pyarrow_is_cudabuffer(obj):             # <<<<<<<<<<<<<<
 *         return (<CudaBuffer>obj).cuda_buffer
 *     raise TypeError('expected CudaBuffer instance, got %s'
 */
  __pyx_t_1 = (pyarrow_is_cudabuffer(__pyx_v_obj) != 0);
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":977
 * cdef public api shared_ptr[CCudaBuffer] pyarrow_unwrap_cudabuffer(object obj):
 *     if pyarrow_is_cudabuffer(obj):
 *         return (<CudaBuffer>obj).cuda_buffer             # <<<<<<<<<<<<<<
 *     raise TypeError('expected CudaBuffer instance, got %s'
 *                     % (type(obj).__name__))
 */
    __pyx_r = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)__pyx_v_obj)->cuda_buffer;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":976
 * 
 * cdef public api shared_ptr[CCudaBuffer] pyarrow_unwrap_cudabuffer(object obj):
 *     if pyarrow_is_cudabuffer(obj):             # <<<<<<<<<<<<<<
 *         return (<CudaBuffer>obj).cuda_buffer
 *     raise TypeError('expected CudaBuffer instance, got %s'
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":979
 *         return (<CudaBuffer>obj).cuda_buffer
 *     raise TypeError('expected CudaBuffer instance, got %s'
 *                     % (type(obj).__name__))             # <<<<<<<<<<<<<<
 * 
 * # cudahostbuffer
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_obj)), __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_expected_CudaBuffer_instance_got, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":978
 *     if pyarrow_is_cudabuffer(obj):
 *         return (<CudaBuffer>obj).cuda_buffer
 *     raise TypeError('expected CudaBuffer instance, got %s'             # <<<<<<<<<<<<<<
 *                     % (type(obj).__name__))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 978, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":975
 * 
 * 
 * cdef public api shared_ptr[CCudaBuffer] pyarrow_unwrap_cudabuffer(object obj):             # <<<<<<<<<<<<<<
 *     if pyarrow_is_cudabuffer(obj):
 *         return (<CudaBuffer>obj).cuda_buffer
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cudf._libxx.arrow._cuda.pyarrow_unwrap_cudabuffer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":983
 * # cudahostbuffer
 * 
 * cdef public api bint pyarrow_is_cudahostbuffer(object buffer):             # <<<<<<<<<<<<<<
 *     return isinstance(buffer, HostBuffer)
 * 
 */

int pyarrow_is_cudahostbuffer(PyObject *__pyx_v_buffer) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("pyarrow_is_cudahostbuffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":984
 * 
 * cdef public api bint pyarrow_is_cudahostbuffer(object buffer):
 *     return isinstance(buffer, HostBuffer)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_buffer, __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_HostBuffer); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":983
 * # cudahostbuffer
 * 
 * cdef public api bint pyarrow_is_cudahostbuffer(object buffer):             # <<<<<<<<<<<<<<
 *     return isinstance(buffer, HostBuffer)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":987
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudahostbuffer(const shared_ptr[CCudaHostBuffer]& buf):
 *     cdef HostBuffer result = HostBuffer.__new__(HostBuffer)
 */

PyObject *pyarrow_wrap_cudahostbuffer(std::shared_ptr< arrow::cuda::CudaHostBuffer>  const &__pyx_v_buf) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("pyarrow_wrap_cudahostbuffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":989
 * cdef public api object \
 *         pyarrow_wrap_cudahostbuffer(const shared_ptr[CCudaHostBuffer]& buf):
 *     cdef HostBuffer result = HostBuffer.__new__(HostBuffer)             # <<<<<<<<<<<<<<
 *     result.init_host(buf)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_HostBuffer(((PyTypeObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_HostBuffer), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":990
 *         pyarrow_wrap_cudahostbuffer(const shared_ptr[CCudaHostBuffer]& buf):
 *     cdef HostBuffer result = HostBuffer.__new__(HostBuffer)
 *     result.init_host(buf)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  ((struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)__pyx_v_result->__pyx_base.__pyx_vtab)->init_host(__pyx_v_result, __pyx_v_buf);

  /* "cudf/_libxx/arrow/_cuda.pyx":991
 *     cdef HostBuffer result = HostBuffer.__new__(HostBuffer)
 *     result.init_host(buf)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":987
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudahostbuffer(const shared_ptr[CCudaHostBuffer]& buf):
 *     cdef HostBuffer result = HostBuffer.__new__(HostBuffer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.pyarrow_wrap_cudahostbuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":994
 * 
 * 
 * cdef public api shared_ptr[CCudaHostBuffer] \             # <<<<<<<<<<<<<<
 *         pyarrow_unwrap_cudahostbuffer(object obj):
 *     if pyarrow_is_cudahostbuffer(obj):
 */

std::shared_ptr< arrow::cuda::CudaHostBuffer>  pyarrow_unwrap_cudahostbuffer(PyObject *__pyx_v_obj) {
  std::shared_ptr< arrow::cuda::CudaHostBuffer>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("pyarrow_unwrap_cudahostbuffer", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":996
 * cdef public api shared_ptr[CCudaHostBuffer] \
 *         pyarrow_unwrap_cudahostbuffer(object obj):
 *     if pyarrow_is_cudahostbuffer(obj):             # <<<<<<<<<<<<<<
 *         return (<HostBuffer>obj).host_buffer
 *     raise TypeError('expected HostBuffer instance, got %s'
 */
  __pyx_t_1 = (pyarrow_is_cudahostbuffer(__pyx_v_obj) != 0);
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":997
 *         pyarrow_unwrap_cudahostbuffer(object obj):
 *     if pyarrow_is_cudahostbuffer(obj):
 *         return (<HostBuffer>obj).host_buffer             # <<<<<<<<<<<<<<
 *     raise TypeError('expected HostBuffer instance, got %s'
 *                     % (type(obj).__name__))
 */
    __pyx_r = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)__pyx_v_obj)->host_buffer;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":996
 * cdef public api shared_ptr[CCudaHostBuffer] \
 *         pyarrow_unwrap_cudahostbuffer(object obj):
 *     if pyarrow_is_cudahostbuffer(obj):             # <<<<<<<<<<<<<<
 *         return (<HostBuffer>obj).host_buffer
 *     raise TypeError('expected HostBuffer instance, got %s'
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":999
 *         return (<HostBuffer>obj).host_buffer
 *     raise TypeError('expected HostBuffer instance, got %s'
 *                     % (type(obj).__name__))             # <<<<<<<<<<<<<<
 * 
 * # cudacontext
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_obj)), __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_expected_HostBuffer_instance_got, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":998
 *     if pyarrow_is_cudahostbuffer(obj):
 *         return (<HostBuffer>obj).host_buffer
 *     raise TypeError('expected HostBuffer instance, got %s'             # <<<<<<<<<<<<<<
 *                     % (type(obj).__name__))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 998, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":994
 * 
 * 
 * cdef public api shared_ptr[CCudaHostBuffer] \             # <<<<<<<<<<<<<<
 *         pyarrow_unwrap_cudahostbuffer(object obj):
 *     if pyarrow_is_cudahostbuffer(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cudf._libxx.arrow._cuda.pyarrow_unwrap_cudahostbuffer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":1003
 * # cudacontext
 * 
 * cdef public api bint pyarrow_is_cudacontext(object ctx):             # <<<<<<<<<<<<<<
 *     return isinstance(ctx, Context)
 * 
 */

int pyarrow_is_cudacontext(PyObject *__pyx_v_ctx) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("pyarrow_is_cudacontext", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":1004
 * 
 * cdef public api bint pyarrow_is_cudacontext(object ctx):
 *     return isinstance(ctx, Context)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_ctx, __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":1003
 * # cudacontext
 * 
 * cdef public api bint pyarrow_is_cudacontext(object ctx):             # <<<<<<<<<<<<<<
 *     return isinstance(ctx, Context)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":1007
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudacontext(const shared_ptr[CCudaContext]& ctx):
 *     cdef Context result = Context.__new__(Context)
 */

PyObject *pyarrow_wrap_cudacontext(std::shared_ptr< arrow::cuda::CudaContext>  const &__pyx_v_ctx) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("pyarrow_wrap_cudacontext", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":1009
 * cdef public api object \
 *         pyarrow_wrap_cudacontext(const shared_ptr[CCudaContext]& ctx):
 *     cdef Context result = Context.__new__(Context)             # <<<<<<<<<<<<<<
 *     result.init(ctx)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_Context(((PyTypeObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":1010
 *         pyarrow_wrap_cudacontext(const shared_ptr[CCudaContext]& ctx):
 *     cdef Context result = Context.__new__(Context)
 *     result.init(ctx)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  ((struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_result->__pyx_vtab)->init(__pyx_v_result, __pyx_v_ctx);

  /* "cudf/_libxx/arrow/_cuda.pyx":1011
 *     cdef Context result = Context.__new__(Context)
 *     result.init(ctx)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":1007
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudacontext(const shared_ptr[CCudaContext]& ctx):
 *     cdef Context result = Context.__new__(Context)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.pyarrow_wrap_cudacontext", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":1014
 * 
 * 
 * cdef public api shared_ptr[CCudaContext] \             # <<<<<<<<<<<<<<
 *         pyarrow_unwrap_cudacontext(object obj):
 *     if pyarrow_is_cudacontext(obj):
 */

std::shared_ptr< arrow::cuda::CudaContext>  pyarrow_unwrap_cudacontext(PyObject *__pyx_v_obj) {
  std::shared_ptr< arrow::cuda::CudaContext>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("pyarrow_unwrap_cudacontext", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":1016
 * cdef public api shared_ptr[CCudaContext] \
 *         pyarrow_unwrap_cudacontext(object obj):
 *     if pyarrow_is_cudacontext(obj):             # <<<<<<<<<<<<<<
 *         return (<Context>obj).context
 *     raise TypeError('expected Context instance, got %s'
 */
  __pyx_t_1 = (pyarrow_is_cudacontext(__pyx_v_obj) != 0);
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":1017
 *         pyarrow_unwrap_cudacontext(object obj):
 *     if pyarrow_is_cudacontext(obj):
 *         return (<Context>obj).context             # <<<<<<<<<<<<<<
 *     raise TypeError('expected Context instance, got %s'
 *                     % (type(obj).__name__))
 */
    __pyx_r = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)__pyx_v_obj)->context;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":1016
 * cdef public api shared_ptr[CCudaContext] \
 *         pyarrow_unwrap_cudacontext(object obj):
 *     if pyarrow_is_cudacontext(obj):             # <<<<<<<<<<<<<<
 *         return (<Context>obj).context
 *     raise TypeError('expected Context instance, got %s'
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":1019
 *         return (<Context>obj).context
 *     raise TypeError('expected Context instance, got %s'
 *                     % (type(obj).__name__))             # <<<<<<<<<<<<<<
 * 
 * # cudaipcmemhandle
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_obj)), __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_expected_Context_instance_got_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":1018
 *     if pyarrow_is_cudacontext(obj):
 *         return (<Context>obj).context
 *     raise TypeError('expected Context instance, got %s'             # <<<<<<<<<<<<<<
 *                     % (type(obj).__name__))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 1018, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":1014
 * 
 * 
 * cdef public api shared_ptr[CCudaContext] \             # <<<<<<<<<<<<<<
 *         pyarrow_unwrap_cudacontext(object obj):
 *     if pyarrow_is_cudacontext(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cudf._libxx.arrow._cuda.pyarrow_unwrap_cudacontext", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":1023
 * # cudaipcmemhandle
 * 
 * cdef public api bint pyarrow_is_cudaipcmemhandle(object handle):             # <<<<<<<<<<<<<<
 *     return isinstance(handle, IpcMemHandle)
 * 
 */

int pyarrow_is_cudaipcmemhandle(PyObject *__pyx_v_handle) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("pyarrow_is_cudaipcmemhandle", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":1024
 * 
 * cdef public api bint pyarrow_is_cudaipcmemhandle(object handle):
 *     return isinstance(handle, IpcMemHandle)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_handle, __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":1023
 * # cudaipcmemhandle
 * 
 * cdef public api bint pyarrow_is_cudaipcmemhandle(object handle):             # <<<<<<<<<<<<<<
 *     return isinstance(handle, IpcMemHandle)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":1027
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudaipcmemhandle(shared_ptr[CCudaIpcMemHandle]& h):
 *     cdef IpcMemHandle result = IpcMemHandle.__new__(IpcMemHandle)
 */

PyObject *pyarrow_wrap_cudaipcmemhandle(std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  &__pyx_v_h) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("pyarrow_wrap_cudaipcmemhandle", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":1029
 * cdef public api object \
 *         pyarrow_wrap_cudaipcmemhandle(shared_ptr[CCudaIpcMemHandle]& h):
 *     cdef IpcMemHandle result = IpcMemHandle.__new__(IpcMemHandle)             # <<<<<<<<<<<<<<
 *     result.init(h)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle(((PyTypeObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1029, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":1030
 *         pyarrow_wrap_cudaipcmemhandle(shared_ptr[CCudaIpcMemHandle]& h):
 *     cdef IpcMemHandle result = IpcMemHandle.__new__(IpcMemHandle)
 *     result.init(h)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  ((struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *)__pyx_v_result->__pyx_vtab)->init(__pyx_v_result, __pyx_v_h);

  /* "cudf/_libxx/arrow/_cuda.pyx":1031
 *     cdef IpcMemHandle result = IpcMemHandle.__new__(IpcMemHandle)
 *     result.init(h)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "cudf/_libxx/arrow/_cuda.pyx":1027
 * 
 * 
 * cdef public api object \             # <<<<<<<<<<<<<<
 *         pyarrow_wrap_cudaipcmemhandle(shared_ptr[CCudaIpcMemHandle]& h):
 *     cdef IpcMemHandle result = IpcMemHandle.__new__(IpcMemHandle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cudf._libxx.arrow._cuda.pyarrow_wrap_cudaipcmemhandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cudf/_libxx/arrow/_cuda.pyx":1034
 * 
 * 
 * cdef public api shared_ptr[CCudaIpcMemHandle] \             # <<<<<<<<<<<<<<
 *         pyarrow_unwrap_cudaipcmemhandle(object obj):
 *     if pyarrow_is_cudaipcmemhandle(obj):
 */

std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  pyarrow_unwrap_cudaipcmemhandle(PyObject *__pyx_v_obj) {
  std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("pyarrow_unwrap_cudaipcmemhandle", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":1036
 * cdef public api shared_ptr[CCudaIpcMemHandle] \
 *         pyarrow_unwrap_cudaipcmemhandle(object obj):
 *     if pyarrow_is_cudaipcmemhandle(obj):             # <<<<<<<<<<<<<<
 *         return (<IpcMemHandle>obj).handle
 *     raise TypeError('expected IpcMemHandle instance, got %s'
 */
  __pyx_t_1 = (pyarrow_is_cudaipcmemhandle(__pyx_v_obj) != 0);
  if (__pyx_t_1) {

    /* "cudf/_libxx/arrow/_cuda.pyx":1037
 *         pyarrow_unwrap_cudaipcmemhandle(object obj):
 *     if pyarrow_is_cudaipcmemhandle(obj):
 *         return (<IpcMemHandle>obj).handle             # <<<<<<<<<<<<<<
 *     raise TypeError('expected IpcMemHandle instance, got %s'
 *                     % (type(obj).__name__))
 */
    __pyx_r = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *)__pyx_v_obj)->handle;
    goto __pyx_L0;

    /* "cudf/_libxx/arrow/_cuda.pyx":1036
 * cdef public api shared_ptr[CCudaIpcMemHandle] \
 *         pyarrow_unwrap_cudaipcmemhandle(object obj):
 *     if pyarrow_is_cudaipcmemhandle(obj):             # <<<<<<<<<<<<<<
 *         return (<IpcMemHandle>obj).handle
 *     raise TypeError('expected IpcMemHandle instance, got %s'
 */
  }

  /* "cudf/_libxx/arrow/_cuda.pyx":1039
 *         return (<IpcMemHandle>obj).handle
 *     raise TypeError('expected IpcMemHandle instance, got %s'
 *                     % (type(obj).__name__))             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_obj)), __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_expected_IpcMemHandle_instance_g, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":1038
 *     if pyarrow_is_cudaipcmemhandle(obj):
 *         return (<IpcMemHandle>obj).handle
 *     raise TypeError('expected IpcMemHandle instance, got %s'             # <<<<<<<<<<<<<<
 *                     % (type(obj).__name__))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 1038, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":1034
 * 
 * 
 * cdef public api shared_ptr[CCudaIpcMemHandle] \             # <<<<<<<<<<<<<<
 *         pyarrow_unwrap_cudaipcmemhandle(object obj):
 *     if pyarrow_is_cudaipcmemhandle(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cudf._libxx.arrow._cuda.pyarrow_unwrap_cudaipcmemhandle", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyarrow/includes/common.pxd":82
 *     T GetResultValue[T](CResult[T]) except *
 * 
 * cdef inline object PyObject_to_object(PyObject* o):             # <<<<<<<<<<<<<<
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 */

static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8includes_6common_PyObject_to_object(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyObject_to_object", 0);

  /* "pyarrow/includes/common.pxd":84
 * cdef inline object PyObject_to_object(PyObject* o):
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o             # <<<<<<<<<<<<<<
 *     cpython.Py_DECREF(result)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_o);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyarrow/includes/common.pxd":85
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 *     cpython.Py_DECREF(result)             # <<<<<<<<<<<<<<
 *     return result
 */
  Py_DECREF(__pyx_v_result);

  /* "pyarrow/includes/common.pxd":86
 *     cdef object result = <object> o
 *     cpython.Py_DECREF(result)
 *     return result             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pyarrow/includes/common.pxd":82
 *     T GetResultValue[T](CResult[T]) except *
 * 
 * cdef inline object PyObject_to_object(PyObject* o):             # <<<<<<<<<<<<<<
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_Context __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_Context;

static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_Context(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_Context;
  new((void*)&(p->context)) std::shared_ptr< arrow::cuda::CudaContext> ();
  if (unlikely(__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_Context(PyObject *o) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->context);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_7Context_device_number(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_13device_number_1__get__(o);
}

static PyObject *__pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_7Context_handle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_6handle_1__get__(o);
}

static PyObject *__pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_7Context_bytes_allocated(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_15bytes_allocated_1__get__(o);
}

static PyMethodDef __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_Context[] = {
  {"from_numba", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_5from_numba, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_4from_numba},
  {"to_numba", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_7to_numba, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_6to_numba},
  {"get_num_devices", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_9get_num_devices, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_8get_num_devices},
  {"synchronize", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_11synchronize, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_10synchronize},
  {"get_device_address", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_13get_device_address, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_12get_device_address},
  {"new_buffer", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_15new_buffer, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_14new_buffer},
  {"foreign_buffer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_17foreign_buffer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_16foreign_buffer},
  {"open_ipc_buffer", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_19open_ipc_buffer, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_18open_ipc_buffer},
  {"buffer_from_data", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_21buffer_from_data, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_20buffer_from_data},
  {"buffer_from_object", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_23buffer_from_object, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_22buffer_from_object},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_25__reduce_cython__, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_24__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_27__setstate_cython__, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context_26__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cudf_6_libxx_5arrow_5_cuda_Context[] = {
  {(char *)"device_number", __pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_7Context_device_number, 0, (char *)" Return context device number.\n        ", 0},
  {(char *)"handle", __pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_7Context_handle, 0, (char *)" Return pointer to context handle.\n        ", 0},
  {(char *)"bytes_allocated", __pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_7Context_bytes_allocated, 0, (char *)"Return the number of allocated bytes.\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context = {
  PyVarObject_HEAD_INIT(0, 0)
  "cudf._libxx.arrow._cuda.Context", /*tp_name*/
  sizeof(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_Context, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Context(*args, **kwargs)\n\n    CUDA driver context.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_Context, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cudf_6_libxx_5arrow_5_cuda_Context, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_7Context_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_Context, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle;

static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle;
  new((void*)&(p->handle)) std::shared_ptr< arrow::cuda::CudaIpcMemHandle> ();
  return o;
}

static void __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle(PyObject *o) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->handle);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle[] = {
  {"from_buffer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_1from_buffer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_from_buffer},
  {"serialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_3serialize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_2serialize},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_5__reduce_cython__, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_7__setstate_cython__, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle = {
  PyVarObject_HEAD_INIT(0, 0)
  "cudf._libxx.arrow._cuda.IpcMemHandle", /*tp_name*/
  sizeof(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "A serializable container for a CUDA IPC handle.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer;

static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *p;
  PyObject *o = __pyx_ptype_7pyarrow_3lib_Buffer->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7pyarrow_3lib_Buffer*)__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer;
  new((void*)&(p->cuda_buffer)) std::shared_ptr< arrow::cuda::CudaBuffer> ();
  p->base = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer(PyObject *o) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->cuda_buffer);
  Py_CLEAR(p->base);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7pyarrow_3lib_Buffer)) __pyx_ptype_7pyarrow_3lib_Buffer->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer);
}

static int __pyx_tp_traverse_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)o;
  e = ((likely(__pyx_ptype_7pyarrow_3lib_Buffer)) ? ((__pyx_ptype_7pyarrow_3lib_Buffer->tp_traverse) ? __pyx_ptype_7pyarrow_3lib_Buffer->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer)); if (e) return e;
  if (p->base) {
    e = (*v)(p->base, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)o;
  if (likely(__pyx_ptype_7pyarrow_3lib_Buffer)) { if (__pyx_ptype_7pyarrow_3lib_Buffer->tp_clear) __pyx_ptype_7pyarrow_3lib_Buffer->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer);
  tmp = ((PyObject*)p->base);
  p->base = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_context(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_7context_1__get__(o);
}

static PyMethodDef __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer[] = {
  {"from_buffer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_3from_buffer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_2from_buffer},
  {"from_numba", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_5from_numba, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_4from_numba},
  {"to_numba", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_7to_numba, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_6to_numba},
  {"copy_to_host", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_9copy_to_host, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_8copy_to_host},
  {"copy_from_host", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_11copy_from_host, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_10copy_from_host},
  {"copy_from_device", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_13copy_from_device, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_12copy_from_device},
  {"export_for_ipc", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_15export_for_ipc, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_14export_for_ipc},
  {"slice", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_17slice, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_16slice},
  {"to_pybytes", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_19to_pybytes, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_18to_pybytes},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_27__reduce_cython__, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_26__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_29__setstate_cython__, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_28__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer[] = {
  {(char *)"context", __pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_context, 0, (char *)"Returns the CUDA driver context of this buffer.\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyBufferProcs __pyx_tp_as_buffer_CudaBuffer = {
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_23__getreadbuffer__, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_25__getwritebuffer__, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_21__getbuffer__, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer = {
  PyVarObject_HEAD_INIT(0, 0)
  "cudf._libxx.arrow._cuda.CudaBuffer", /*tp_name*/
  sizeof(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_CudaBuffer, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "CudaBuffer()\nAn Arrow buffer with data located in a GPU device.\n\n    To create a CudaBuffer instance, use Context.device_buffer().\n\n    The memory allocated in a CudaBuffer is freed when the buffer object\n    is deleted.\n    ", /*tp_doc*/
  __pyx_tp_traverse_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, /*tp_traverse*/
  __pyx_tp_clear_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_HostBuffer __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_HostBuffer;

static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_HostBuffer(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *p;
  PyObject *o = __pyx_ptype_7pyarrow_3lib_Buffer->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7pyarrow_3lib_Buffer*)__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_HostBuffer;
  new((void*)&(p->host_buffer)) std::shared_ptr< arrow::cuda::CudaHostBuffer> ();
  return o;
}

static void __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_HostBuffer(PyObject *o) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->host_buffer);
  if (likely(__pyx_ptype_7pyarrow_3lib_Buffer)) __pyx_ptype_7pyarrow_3lib_Buffer->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_HostBuffer);
}

static PyObject *__pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_HostBuffer[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_3__reduce_cython__, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_5__setstate_cython__, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cudf_6_libxx_5arrow_5_cuda_HostBuffer[] = {
  {(char *)"size", __pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer = {
  PyVarObject_HEAD_INIT(0, 0)
  "cudf._libxx.arrow._cuda.HostBuffer", /*tp_name*/
  sizeof(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_HostBuffer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "HostBuffer()\nDevice-accessible CPU memory created using cudaHostAlloc.\n\n    To create a HostBuffer instance, use\n\n      cuda.new_host_buffer(<nbytes>)\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_HostBuffer, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cudf_6_libxx_5arrow_5_cuda_HostBuffer, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_HostBuffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_BufferReader __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_BufferReader;

static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_BufferReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *p;
  PyObject *o = __pyx_ptype_7pyarrow_3lib_NativeFile->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile*)__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_BufferReader;
  p->buffer = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_BufferReader(PyObject *o) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->buffer);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7pyarrow_3lib_NativeFile)) __pyx_ptype_7pyarrow_3lib_NativeFile->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_BufferReader);
}

static int __pyx_tp_traverse_4cudf_6_libxx_5arrow_5_cuda_BufferReader(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)o;
  e = ((likely(__pyx_ptype_7pyarrow_3lib_NativeFile)) ? ((__pyx_ptype_7pyarrow_3lib_NativeFile->tp_traverse) ? __pyx_ptype_7pyarrow_3lib_NativeFile->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_4cudf_6_libxx_5arrow_5_cuda_BufferReader)); if (e) return e;
  if (p->buffer) {
    e = (*v)(((PyObject *)p->buffer), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cudf_6_libxx_5arrow_5_cuda_BufferReader(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader *)o;
  if (likely(__pyx_ptype_7pyarrow_3lib_NativeFile)) { if (__pyx_ptype_7pyarrow_3lib_NativeFile->tp_clear) __pyx_ptype_7pyarrow_3lib_NativeFile->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_4cudf_6_libxx_5arrow_5_cuda_BufferReader);
  tmp = ((PyObject*)p->buffer);
  p->buffer = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_BufferReader[] = {
  {"read_buffer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_3read_buffer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_2read_buffer},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_5__reduce_cython__, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_7__setstate_cython__, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferReader_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader = {
  PyVarObject_HEAD_INIT(0, 0)
  "cudf._libxx.arrow._cuda.BufferReader", /*tp_name*/
  sizeof(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_BufferReader, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "File interface for zero-copy read from CUDA buffers.\n\n    Note: Read methods return pointers to device memory. This means\n    you must be careful using this interface with any Arrow code which\n    may expect to be able to do anything other than pointer arithmetic\n    on the returned buffers.\n    ", /*tp_doc*/
  __pyx_tp_traverse_4cudf_6_libxx_5arrow_5_cuda_BufferReader, /*tp_traverse*/
  __pyx_tp_clear_4cudf_6_libxx_5arrow_5_cuda_BufferReader, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_BufferReader, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_BufferReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4cudf_6_libxx_5arrow_5_cuda_BufferWriter __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_BufferWriter;

static PyObject *__pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_BufferWriter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *p;
  PyObject *o = __pyx_ptype_7pyarrow_3lib_NativeFile->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile*)__pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_BufferWriter;
  p->buffer = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_BufferWriter(PyObject *o) {
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->buffer);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7pyarrow_3lib_NativeFile)) __pyx_ptype_7pyarrow_3lib_NativeFile->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_BufferWriter);
}

static int __pyx_tp_traverse_4cudf_6_libxx_5arrow_5_cuda_BufferWriter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)o;
  e = ((likely(__pyx_ptype_7pyarrow_3lib_NativeFile)) ? ((__pyx_ptype_7pyarrow_3lib_NativeFile->tp_traverse) ? __pyx_ptype_7pyarrow_3lib_NativeFile->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_4cudf_6_libxx_5arrow_5_cuda_BufferWriter)); if (e) return e;
  if (p->buffer) {
    e = (*v)(((PyObject *)p->buffer), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cudf_6_libxx_5arrow_5_cuda_BufferWriter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *p = (struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter *)o;
  if (likely(__pyx_ptype_7pyarrow_3lib_NativeFile)) { if (__pyx_ptype_7pyarrow_3lib_NativeFile->tp_clear) __pyx_ptype_7pyarrow_3lib_NativeFile->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_4cudf_6_libxx_5arrow_5_cuda_BufferWriter);
  tmp = ((PyObject*)p->buffer);
  p->buffer = ((struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size_1__get__(o);
}

static int __pyx_setprop_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_buffer_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11buffer_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_num_bytes_buffered(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_18num_bytes_buffered_1__get__(o);
}

static PyMethodDef __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_BufferWriter[] = {
  {"writeat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_3writeat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_2writeat},
  {"flush", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_5flush, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_4flush},
  {"seek", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_7seek, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_6seek},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_9__reduce_cython__, METH_NOARGS, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_11__setstate_cython__, METH_O, __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cudf_6_libxx_5arrow_5_cuda_BufferWriter[] = {
  {(char *)"buffer_size", __pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_buffer_size, __pyx_setprop_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_buffer_size, (char *)"Returns size of host (CPU) buffer, 0 for unbuffered\n        ", 0},
  {(char *)"num_bytes_buffered", __pyx_getprop_4cudf_6_libxx_5arrow_5_cuda_12BufferWriter_num_bytes_buffered, 0, (char *)"Returns number of bytes buffered on host\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter = {
  PyVarObject_HEAD_INIT(0, 0)
  "cudf._libxx.arrow._cuda.BufferWriter", /*tp_name*/
  sizeof(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cudf_6_libxx_5arrow_5_cuda_BufferWriter, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "File interface for writing to CUDA buffers.\n\n    By default writes are unbuffered. Use set_buffer_size to enable\n    buffering.\n    ", /*tp_doc*/
  __pyx_tp_traverse_4cudf_6_libxx_5arrow_5_cuda_BufferWriter, /*tp_traverse*/
  __pyx_tp_clear_4cudf_6_libxx_5arrow_5_cuda_BufferWriter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cudf_6_libxx_5arrow_5_cuda_BufferWriter, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cudf_6_libxx_5arrow_5_cuda_BufferWriter, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cudf_6_libxx_5arrow_5_cuda_BufferWriter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__cuda(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__cuda},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_cuda",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ArrowTypeError, __pyx_k_ArrowTypeError, sizeof(__pyx_k_ArrowTypeError), 0, 0, 1, 1},
  {&__pyx_n_s_BufferError, __pyx_k_BufferError, sizeof(__pyx_k_BufferError), 0, 0, 1, 1},
  {&__pyx_n_s_BufferReader, __pyx_k_BufferReader, sizeof(__pyx_k_BufferReader), 0, 0, 1, 1},
  {&__pyx_n_s_BufferWriter, __pyx_k_BufferWriter, sizeof(__pyx_k_BufferWriter), 0, 0, 1, 1},
  {&__pyx_n_s_Context, __pyx_k_Context, sizeof(__pyx_k_Context), 0, 0, 1, 1},
  {&__pyx_n_s_CudaBuffer, __pyx_k_CudaBuffer, sizeof(__pyx_k_CudaBuffer), 0, 0, 1, 1},
  {&__pyx_kp_u_CudaBuffer___getreadbuffer, __pyx_k_CudaBuffer___getreadbuffer, sizeof(__pyx_k_CudaBuffer___getreadbuffer), 0, 1, 0, 0},
  {&__pyx_kp_u_CudaBuffer___getwritebuffer, __pyx_k_CudaBuffer___getwritebuffer, sizeof(__pyx_k_CudaBuffer___getwritebuffer), 0, 1, 0, 0},
  {&__pyx_kp_u_Do_not_call_CudaBuffer_s_constru, __pyx_k_Do_not_call_CudaBuffer_s_constru, sizeof(__pyx_k_Do_not_call_CudaBuffer_s_constru), 0, 1, 0, 0},
  {&__pyx_kp_u_Do_not_call_HostBuffer_s_constru, __pyx_k_Do_not_call_HostBuffer_s_constru, sizeof(__pyx_k_Do_not_call_HostBuffer_s_constru), 0, 1, 0, 0},
  {&__pyx_n_s_DummyPendingDeallocs, __pyx_k_DummyPendingDeallocs, sizeof(__pyx_k_DummyPendingDeallocs), 0, 0, 1, 1},
  {&__pyx_n_s_HostBuffer, __pyx_k_HostBuffer, sizeof(__pyx_k_HostBuffer), 0, 0, 1, 1},
  {&__pyx_kp_u_Invalid_value_of_whence_0, __pyx_k_Invalid_value_of_whence_0, sizeof(__pyx_k_Invalid_value_of_whence_0), 0, 1, 0, 0},
  {&__pyx_n_s_IpcMemHandle, __pyx_k_IpcMemHandle, sizeof(__pyx_k_IpcMemHandle), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryPointer, __pyx_k_MemoryPointer, sizeof(__pyx_k_MemoryPointer), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_add_item, __pyx_k_add_item, sizeof(__pyx_k_add_item), 0, 0, 1, 1},
  {&__pyx_n_s_address, __pyx_k_address, sizeof(__pyx_k_address), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_as_buffer, __pyx_k_as_buffer, sizeof(__pyx_k_as_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_batch, __pyx_k_batch, sizeof(__pyx_k_batch), 0, 0, 1, 1},
  {&__pyx_n_s_batch_2, __pyx_k_batch_2, sizeof(__pyx_k_batch_2), 0, 0, 1, 1},
  {&__pyx_n_s_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 0, 0, 1, 1},
  {&__pyx_n_s_buf_2, __pyx_k_buf_2, sizeof(__pyx_k_buf_2), 0, 0, 1, 1},
  {&__pyx_n_s_buffer, __pyx_k_buffer, sizeof(__pyx_k_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_buffer_2, __pyx_k_buffer_2, sizeof(__pyx_k_buffer_2), 0, 0, 1, 1},
  {&__pyx_kp_u_buffer_protocol_for_device_buffe, __pyx_k_buffer_protocol_for_device_buffe, sizeof(__pyx_k_buffer_protocol_for_device_buffe), 0, 1, 0, 0},
  {&__pyx_n_s_c_void_p, __pyx_k_c_void_p, sizeof(__pyx_k_c_void_p), 0, 0, 1, 1},
  {&__pyx_kp_u_cannot_create_device_buffer_view, __pyx_k_cannot_create_device_buffer_view, sizeof(__pyx_k_cannot_create_device_buffer_view), 0, 1, 0, 0},
  {&__pyx_n_s_cbuf, __pyx_k_cbuf, sizeof(__pyx_k_cbuf), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_context, __pyx_k_context, sizeof(__pyx_k_context), 0, 0, 1, 1},
  {&__pyx_n_s_copy_from_device, __pyx_k_copy_from_device, sizeof(__pyx_k_copy_from_device), 0, 0, 1, 1},
  {&__pyx_n_s_copy_from_host, __pyx_k_copy_from_host, sizeof(__pyx_k_copy_from_host), 0, 0, 1, 1},
  {&__pyx_n_s_copy_to_host, __pyx_k_copy_to_host, sizeof(__pyx_k_copy_to_host), 0, 0, 1, 1},
  {&__pyx_n_s_ctx, __pyx_k_ctx, sizeof(__pyx_k_ctx), 0, 0, 1, 1},
  {&__pyx_n_s_ctx_2, __pyx_k_ctx_2, sizeof(__pyx_k_ctx_2), 0, 0, 1, 1},
  {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
  {&__pyx_n_s_cuda, __pyx_k_cuda, sizeof(__pyx_k_cuda), 0, 0, 1, 1},
  {&__pyx_n_s_cuda_array_interface, __pyx_k_cuda_array_interface, sizeof(__pyx_k_cuda_array_interface), 0, 0, 1, 1},
  {&__pyx_n_u_cuda_array_interface, __pyx_k_cuda_array_interface, sizeof(__pyx_k_cuda_array_interface), 0, 1, 0, 1},
  {&__pyx_n_s_cudadrv, __pyx_k_cudadrv, sizeof(__pyx_k_cudadrv), 0, 0, 1, 1},
  {&__pyx_n_s_cudf__libxx_arrow__cuda, __pyx_k_cudf__libxx_arrow__cuda, sizeof(__pyx_k_cudf__libxx_arrow__cuda), 0, 0, 1, 1},
  {&__pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_k_cudf__libxx_arrow__cuda_pyx, sizeof(__pyx_k_cudf__libxx_arrow__cuda_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_current_context, __pyx_k_current_context, sizeof(__pyx_k_current_context), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_u_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 1, 0, 1},
  {&__pyx_n_s_deallocations, __pyx_k_deallocations, sizeof(__pyx_k_deallocations), 0, 0, 1, 1},
  {&__pyx_n_s_device, __pyx_k_device, sizeof(__pyx_k_device), 0, 0, 1, 1},
  {&__pyx_n_s_device_number, __pyx_k_device_number, sizeof(__pyx_k_device_number), 0, 0, 1, 1},
  {&__pyx_kp_u_device_number_argument_must_be_n, __pyx_k_device_number_argument_must_be_n, sizeof(__pyx_k_device_number_argument_must_be_n), 0, 1, 0, 0},
  {&__pyx_n_s_device_pointer, __pyx_k_device_pointer, sizeof(__pyx_k_device_pointer), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_driver, __pyx_k_driver, sizeof(__pyx_k_driver), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_kp_u_expected_Context_instance_got_s, __pyx_k_expected_Context_instance_got_s, sizeof(__pyx_k_expected_Context_instance_got_s), 0, 1, 0, 0},
  {&__pyx_kp_u_expected_CudaBuffer_instance_got, __pyx_k_expected_CudaBuffer_instance_got, sizeof(__pyx_k_expected_CudaBuffer_instance_got), 0, 1, 0, 0},
  {&__pyx_kp_u_expected_HostBuffer_instance_got, __pyx_k_expected_HostBuffer_instance_got, sizeof(__pyx_k_expected_HostBuffer_instance_got), 0, 1, 0, 0},
  {&__pyx_kp_u_expected_IpcMemHandle_instance_g, __pyx_k_expected_IpcMemHandle_instance_g, sizeof(__pyx_k_expected_IpcMemHandle_instance_g), 0, 1, 0, 0},
  {&__pyx_n_s_foreign_buffer, __pyx_k_foreign_buffer, sizeof(__pyx_k_foreign_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_from_buffer, __pyx_k_from_buffer, sizeof(__pyx_k_from_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_from_numba, __pyx_k_from_numba, sizeof(__pyx_k_from_numba), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_contiguous_span, __pyx_k_get_contiguous_span, sizeof(__pyx_k_get_contiguous_span), 0, 0, 1, 1},
  {&__pyx_n_s_get_device_address, __pyx_k_get_device_address, sizeof(__pyx_k_get_device_address), 0, 0, 1, 1},
  {&__pyx_n_s_get_num_devices, __pyx_k_get_num_devices, sizeof(__pyx_k_get_num_devices), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gpus, __pyx_k_gpus, sizeof(__pyx_k_gpus), 0, 0, 1, 1},
  {&__pyx_n_s_handle, __pyx_k_handle, sizeof(__pyx_k_handle), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_manager, __pyx_k_manager, sizeof(__pyx_k_manager), 0, 0, 1, 1},
  {&__pyx_n_s_mem, __pyx_k_mem, sizeof(__pyx_k_mem), 0, 0, 1, 1},
  {&__pyx_n_s_memory_pool, __pyx_k_memory_pool, sizeof(__pyx_k_memory_pool), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nbytes, __pyx_k_nbytes, sizeof(__pyx_k_nbytes), 0, 0, 1, 1},
  {&__pyx_n_s_new_buffer, __pyx_k_new_buffer, sizeof(__pyx_k_new_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_new_host_buffer, __pyx_k_new_host_buffer, sizeof(__pyx_k_new_host_buffer), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_numba, __pyx_k_numba, sizeof(__pyx_k_numba), 0, 0, 1, 1},
  {&__pyx_n_s_numba_cuda, __pyx_k_numba_cuda, sizeof(__pyx_k_numba_cuda), 0, 0, 1, 1},
  {&__pyx_n_s_numba_cuda_cudadrv_driver, __pyx_k_numba_cuda_cudadrv_driver, sizeof(__pyx_k_numba_cuda_cudadrv_driver), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
  {&__pyx_kp_u_offset_argument_is_out_of_range, __pyx_k_offset_argument_is_out_of_range, sizeof(__pyx_k_offset_argument_is_out_of_range), 0, 1, 0, 0},
  {&__pyx_n_s_opaque_handle, __pyx_k_opaque_handle, sizeof(__pyx_k_opaque_handle), 0, 0, 1, 1},
  {&__pyx_n_s_pointer, __pyx_k_pointer, sizeof(__pyx_k_pointer), 0, 0, 1, 1},
  {&__pyx_n_s_pool, __pyx_k_pool, sizeof(__pyx_k_pool), 0, 0, 1, 1},
  {&__pyx_n_s_pool_2, __pyx_k_pool_2, sizeof(__pyx_k_pool_2), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_kp_u_position_argument_is_out_of_rang, __pyx_k_position_argument_is_out_of_rang, sizeof(__pyx_k_position_argument_is_out_of_rang), 0, 1, 0, 0},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_py_buffer, __pyx_k_py_buffer, sizeof(__pyx_k_py_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyarrow_compat, __pyx_k_pyarrow_compat, sizeof(__pyx_k_pyarrow_compat), 0, 0, 1, 1},
  {&__pyx_n_s_pyarrow_lib, __pyx_k_pyarrow_lib, sizeof(__pyx_k_pyarrow_lib), 0, 0, 1, 1},
  {&__pyx_n_s_pyarrow_util, __pyx_k_pyarrow_util, sizeof(__pyx_k_pyarrow_util), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_read_message, __pyx_k_read_message, sizeof(__pyx_k_read_message), 0, 0, 1, 1},
  {&__pyx_n_s_read_record_batch, __pyx_k_read_record_batch, sizeof(__pyx_k_read_record_batch), 0, 0, 1, 1},
  {&__pyx_n_s_reader, __pyx_k_reader, sizeof(__pyx_k_reader), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_kp_u_requested_copy_does_not_fit_into, __pyx_k_requested_copy_does_not_fit_into, sizeof(__pyx_k_requested_copy_does_not_fit_into), 0, 1, 0, 0},
  {&__pyx_kp_u_requested_larger_slice_than_avai, __pyx_k_requested_larger_slice_than_avai, sizeof(__pyx_k_requested_larger_slice_than_avai), 0, 1, 0, 0},
  {&__pyx_kp_u_requested_more_to_copy_than_avai, __pyx_k_requested_more_to_copy_than_avai, sizeof(__pyx_k_requested_more_to_copy_than_avai), 0, 1, 0, 0},
  {&__pyx_kp_u_requested_more_to_copy_than_avai_2, __pyx_k_requested_more_to_copy_than_avai_2, sizeof(__pyx_k_requested_more_to_copy_than_avai_2), 0, 1, 0, 0},
  {&__pyx_kp_u_requested_more_to_copy_than_avai_3, __pyx_k_requested_more_to_copy_than_avai_3, sizeof(__pyx_k_requested_more_to_copy_than_avai_3), 0, 1, 0, 0},
  {&__pyx_n_s_resizable, __pyx_k_resizable, sizeof(__pyx_k_resizable), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_schema, __pyx_k_schema, sizeof(__pyx_k_schema), 0, 0, 1, 1},
  {&__pyx_n_s_schema_2, __pyx_k_schema_2, sizeof(__pyx_k_schema_2), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_buffer_self_cuda_buffer_can, __pyx_k_self_buffer_self_cuda_buffer_can, sizeof(__pyx_k_self_buffer_self_cuda_buffer_can), 0, 0, 1, 0},
  {&__pyx_kp_s_self_buffer_self_host_buffer_can, __pyx_k_self_buffer_self_host_buffer_can, sizeof(__pyx_k_self_buffer_self_host_buffer_can), 0, 0, 1, 0},
  {&__pyx_kp_s_self_handle_cannot_be_converted, __pyx_k_self_handle_cannot_be_converted, sizeof(__pyx_k_self_handle_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_serialize_record_batch, __pyx_k_serialize_record_batch, sizeof(__pyx_k_serialize_record_batch), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_u_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 1, 0, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_slice, __pyx_k_slice, sizeof(__pyx_k_slice), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_u_strides, __pyx_k_strides, sizeof(__pyx_k_strides), 0, 1, 0, 1},
  {&__pyx_n_s_tell, __pyx_k_tell, sizeof(__pyx_k_tell), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_numba, __pyx_k_to_numba, sizeof(__pyx_k_to_numba), 0, 0, 1, 1},
  {&__pyx_n_s_to_numba_locals_DummyPendingDeal, __pyx_k_to_numba_locals_DummyPendingDeal, sizeof(__pyx_k_to_numba_locals_DummyPendingDeal), 0, 0, 1, 1},
  {&__pyx_n_s_to_numba_locals_DummyPendingDeal_2, __pyx_k_to_numba_locals_DummyPendingDeal_2, sizeof(__pyx_k_to_numba_locals_DummyPendingDeal_2), 0, 0, 1, 1},
  {&__pyx_n_s_to_pybytes, __pyx_k_to_pybytes, sizeof(__pyx_k_to_pybytes), 0, 0, 1, 1},
  {&__pyx_n_s_tobytes, __pyx_k_tobytes, sizeof(__pyx_k_tobytes), 0, 0, 1, 1},
  {&__pyx_n_u_typestr, __pyx_k_typestr, sizeof(__pyx_k_typestr), 0, 1, 0, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_whence, __pyx_k_whence, sizeof(__pyx_k_whence), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_BufferError = __Pyx_GetBuiltinName(__pyx_n_s_BufferError); if (!__pyx_builtin_BufferError) __PYX_ERR(0, 691, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 695, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cudf/_libxx/arrow/_cuda.pyx":108
 *         context = numba.cuda.cudadrv.driver.Context(device, handle)
 * 
 *         class DummyPendingDeallocs(object):             # <<<<<<<<<<<<<<
 *             # Context is managed by pyarrow
 *             def add_item(self, *args, **kwargs):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cudf/_libxx/arrow/_cuda.pyx":110
 *         class DummyPendingDeallocs(object):
 *             # Context is managed by pyarrow
 *             def add_item(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *                 pass
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_add_item, 110, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 110, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":277
 *         bsize = buf.size
 *         if offset < 0 or (bsize and offset >= bsize):
 *             raise ValueError('offset argument is out-of-range')             # <<<<<<<<<<<<<<
 *         if size < 0:
 *             size = bsize - offset
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_offset_argument_is_out_of_range); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "cudf/_libxx/arrow/_cuda.pyx":281
 *             size = bsize - offset
 *         elif offset + size > bsize:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 'requested larger slice than available in device buffer')
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_requested_larger_slice_than_avai); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_handle_cannot_be_converted); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.handle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_handle_cannot_be_converted); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "cudf/_libxx/arrow/_cuda.pyx":393
 * 
 *     def __init__(self):
 *         raise TypeError("Do not call CudaBuffer's constructor directly, use "             # <<<<<<<<<<<<<<
 *                         "`<pyarrow.Context instance>.device_buffer`"
 *                         " method instead.")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Do_not_call_CudaBuffer_s_constru); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "cudf/_libxx/arrow/_cuda.pyx":489
 *         if position < 0 or (self.size and position > self.size) \
 *            or (self.size == 0 and position != 0):
 *             raise ValueError('position argument is out-of-range')             # <<<<<<<<<<<<<<
 *         cdef int64_t nbytes_
 *         if buf is None:
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_position_argument_is_out_of_rang); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "cudf/_libxx/arrow/_cuda.pyx":497
 *             else:
 *                 if nbytes > self.size - position:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         'requested more to copy than available from '
 *                         'device buffer')
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_requested_more_to_copy_than_avai); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "cudf/_libxx/arrow/_cuda.pyx":510
 *             else:
 *                 if nbytes > buf.size:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         'requested copy does not fit into host buffer')
 *                 # copy nbytes from position to given host buffer
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_requested_copy_does_not_fit_into); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "cudf/_libxx/arrow/_cuda.pyx":555
 *         else:
 *             if nbytes > buf.size:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     'requested more to copy than available from host buffer')
 *             if nbytes > self.size - position:
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_requested_more_to_copy_than_avai_2); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "cudf/_libxx/arrow/_cuda.pyx":558
 *                     'requested more to copy than available from host buffer')
 *             if nbytes > self.size - position:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     'requested more to copy than available in device buffer')
 *             # copy nbytes from host buffer to device buffer starting
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_requested_more_to_copy_than_avai_3); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "cudf/_libxx/arrow/_cuda.pyx":691
 *         # Device buffer contains data pointers on the device. Hence,
 *         # cannot support buffer protocol PEP-3118 for CudaBuffer.
 *         raise BufferError('buffer protocol for device buffer not supported')             # <<<<<<<<<<<<<<
 * 
 *     def __getreadbuffer__(self, Py_ssize_t idx, void** p):
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_buffer_protocol_for_device_buffe); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "cudf/_libxx/arrow/_cuda.pyx":695
 *     def __getreadbuffer__(self, Py_ssize_t idx, void** p):
 *         # Python 2.x specific method
 *         raise NotImplementedError('CudaBuffer.__getreadbuffer__')             # <<<<<<<<<<<<<<
 * 
 *     def __getwritebuffer__(self, Py_ssize_t idx, void** p):
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_CudaBuffer___getreadbuffer); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "cudf/_libxx/arrow/_cuda.pyx":699
 *     def __getwritebuffer__(self, Py_ssize_t idx, void** p):
 *         # Python 2.x specific method
 *         raise NotImplementedError('CudaBuffer.__getwritebuffer__')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_CudaBuffer___getwritebuffer); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_self_buffer_self_cuda_buffer_can); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer,self.cuda_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_self_buffer_self_cuda_buffer_can); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "cudf/_libxx/arrow/_cuda.pyx":711
 * 
 *     def __init__(self):
 *         raise TypeError("Do not call HostBuffer's constructor directly,"             # <<<<<<<<<<<<<<
 *                         " use `cuda.new_host_buffer` function instead.")
 * 
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_Do_not_call_HostBuffer_s_constru); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_self_buffer_self_host_buffer_can); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer,self.host_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_self_buffer_self_host_buffer_can); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "cudf/_libxx/arrow/_cuda.pyx":72
 * 
 *     @staticmethod
 *     def from_numba(context=None):             # <<<<<<<<<<<<<<
 *         """
 *         Create a Context instance from a Numba CUDA context.
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_context, __pyx_n_s_numba); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_from_numba, 72, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 72, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":117
 * 
 *     @staticmethod
 *     def get_num_devices():             # <<<<<<<<<<<<<<
 *         """ Return the number of GPU devices.
 *         """
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_n_s_manager); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_get_num_devices, 117, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 117, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":345
 * 
 *     @staticmethod
 *     def from_buffer(Buffer opaque_handle):             # <<<<<<<<<<<<<<
 *         """Create IpcMemHandle from opaque buffer (e.g. from another
 *         process)
 */
  __pyx_tuple__32 = PyTuple_Pack(3, __pyx_n_s_opaque_handle, __pyx_n_s_handle, __pyx_n_s_buf_2); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_from_buffer, 345, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 345, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":405
 * 
 *     @staticmethod
 *     def from_buffer(buf):             # <<<<<<<<<<<<<<
 *         """ Convert back generic buffer into CudaBuffer
 * 
 */
  __pyx_tuple__34 = PyTuple_Pack(3, __pyx_n_s_buf, __pyx_n_s_buf_2, __pyx_n_s_cbuf); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_from_buffer, 405, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 405, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":424
 * 
 *     @staticmethod
 *     def from_numba(mem):             # <<<<<<<<<<<<<<
 *         """Create a CudaBuffer view from numba MemoryPointer instance.
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_n_s_mem, __pyx_n_s_ctx); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_from_numba, 424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 424, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":853
 * 
 * 
 * def new_host_buffer(const int64_t size, int device=0):             # <<<<<<<<<<<<<<
 *     """Return buffer with CUDA-accessible memory on CPU host
 * 
 */
  __pyx_tuple__38 = PyTuple_Pack(3, __pyx_n_s_size, __pyx_n_s_device, __pyx_n_s_buffer); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_new_host_buffer, 853, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 853, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":873
 * 
 * 
 * def serialize_record_batch(object batch, object ctx):             # <<<<<<<<<<<<<<
 *     """ Write record batch message to GPU device memory
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(5, __pyx_n_s_batch, __pyx_n_s_ctx, __pyx_n_s_buffer, __pyx_n_s_batch_2, __pyx_n_s_ctx_2); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_serialize_record_batch, 873, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 873, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":896
 * 
 * 
 * def read_message(object source, pool=None):             # <<<<<<<<<<<<<<
 *     """ Read Arrow IPC message located on GPU device
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(5, __pyx_n_s_source, __pyx_n_s_pool, __pyx_n_s_result, __pyx_n_s_pool_2, __pyx_n_s_reader); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_read_message, 896, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 896, __pyx_L1_error)

  /* "cudf/_libxx/arrow/_cuda.pyx":920
 * 
 * 
 * def read_record_batch(object buffer, object schema, pool=None):             # <<<<<<<<<<<<<<
 *     """Construct RecordBatch referencing IPC message located on CUDA device.
 * 
 */
  __pyx_tuple__44 = PyTuple_Pack(7, __pyx_n_s_buffer, __pyx_n_s_schema, __pyx_n_s_pool, __pyx_n_s_schema_2, __pyx_n_s_buffer_2, __pyx_n_s_pool_2, __pyx_n_s_batch); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cudf__libxx_arrow__cuda_pyx, __pyx_n_s_read_record_batch, 920, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("pyarrow_is_buffer", (void (*)(void))pyarrow_is_buffer, "int (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_is_cudabuffer", (void (*)(void))pyarrow_is_cudabuffer, "int (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_wrap_cudabuffer_base", (void (*)(void))pyarrow_wrap_cudabuffer_base, "PyObject *(std::shared_ptr< arrow::cuda::CudaBuffer>  const &, PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_wrap_cudabuffer", (void (*)(void))pyarrow_wrap_cudabuffer, "PyObject *(std::shared_ptr< arrow::cuda::CudaBuffer>  const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_unwrap_cudabuffer", (void (*)(void))pyarrow_unwrap_cudabuffer, "std::shared_ptr< arrow::cuda::CudaBuffer>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_is_cudahostbuffer", (void (*)(void))pyarrow_is_cudahostbuffer, "int (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_wrap_cudahostbuffer", (void (*)(void))pyarrow_wrap_cudahostbuffer, "PyObject *(std::shared_ptr< arrow::cuda::CudaHostBuffer>  const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_unwrap_cudahostbuffer", (void (*)(void))pyarrow_unwrap_cudahostbuffer, "std::shared_ptr< arrow::cuda::CudaHostBuffer>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_is_cudacontext", (void (*)(void))pyarrow_is_cudacontext, "int (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_wrap_cudacontext", (void (*)(void))pyarrow_wrap_cudacontext, "PyObject *(std::shared_ptr< arrow::cuda::CudaContext>  const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_unwrap_cudacontext", (void (*)(void))pyarrow_unwrap_cudacontext, "std::shared_ptr< arrow::cuda::CudaContext>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_is_cudaipcmemhandle", (void (*)(void))pyarrow_is_cudaipcmemhandle, "int (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_wrap_cudaipcmemhandle", (void (*)(void))pyarrow_wrap_cudaipcmemhandle, "PyObject *(std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("pyarrow_unwrap_cudaipcmemhandle", (void (*)(void))pyarrow_unwrap_cudaipcmemhandle, "std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_Context = &__pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_Context;
  __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_Context.init = (void (*)(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_Context *, std::shared_ptr< arrow::cuda::CudaContext>  const &))__pyx_f_4cudf_6_libxx_5arrow_5_cuda_7Context_init;
  if (PyType_Ready(&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context.tp_dictoffset && __pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 32, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cudf_6_libxx_5arrow_5_cuda_7Context___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cudf_6_libxx_5arrow_5_cuda_7Context___init__.doc = __pyx_doc_4cudf_6_libxx_5arrow_5_cuda_7Context___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cudf_6_libxx_5arrow_5_cuda_7Context___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context.tp_dict, __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_Context) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Context, (PyObject *)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context = &__pyx_type_4cudf_6_libxx_5arrow_5_cuda_Context;
  __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle = &__pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle;
  __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle.init = (void (*)(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle *, std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  &))__pyx_f_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_init;
  if (PyType_Ready(&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle.tp_dictoffset && __pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle.tp_dict, __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IpcMemHandle, (PyObject *)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle = &__pyx_type_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle;
  __pyx_t_1 = PyImport_ImportModule("pyarrow.lib"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyarrow_3lib_Buffer = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Buffer", sizeof(struct __pyx_obj_7pyarrow_3lib_Buffer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Buffer) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Buffer = (struct __pyx_vtabstruct_7pyarrow_3lib_Buffer*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Buffer->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Buffer)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer = &__pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer;
  __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer.__pyx_base = *__pyx_vtabptr_7pyarrow_3lib_Buffer;
  __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer.__pyx_base.getitem = (PyObject *(*)(struct __pyx_obj_7pyarrow_3lib_Buffer *, int64_t))__pyx_f_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_getitem;
  __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer.init_cuda = (void (*)(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer *, std::shared_ptr< arrow::cuda::CudaBuffer>  const &, PyObject *))__pyx_f_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_init_cuda;
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer.tp_base = __pyx_ptype_7pyarrow_3lib_Buffer;
  if (PyType_Ready(&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer) < 0) __PYX_ERR(0, 383, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer.tp_dictoffset && __pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer.tp_dict, __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer) < 0) __PYX_ERR(0, 383, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CudaBuffer, (PyObject *)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer) < 0) __PYX_ERR(0, 383, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer) < 0) __PYX_ERR(0, 383, __pyx_L1_error)
  __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer = &__pyx_type_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer;
  __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_HostBuffer = &__pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_HostBuffer;
  __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_HostBuffer.__pyx_base = *__pyx_vtabptr_7pyarrow_3lib_Buffer;
  __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_HostBuffer.init_host = (void (*)(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_HostBuffer *, std::shared_ptr< arrow::cuda::CudaHostBuffer>  const &))__pyx_f_4cudf_6_libxx_5arrow_5_cuda_10HostBuffer_init_host;
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer.tp_base = __pyx_ptype_7pyarrow_3lib_Buffer;
  if (PyType_Ready(&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer.tp_dictoffset && __pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer.tp_dict, __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_HostBuffer) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HostBuffer, (PyObject *)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer) < 0) __PYX_ERR(0, 702, __pyx_L1_error)
  __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_HostBuffer = &__pyx_type_4cudf_6_libxx_5arrow_5_cuda_HostBuffer;
  __pyx_ptype_7pyarrow_3lib_NativeFile = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "NativeFile", sizeof(struct __pyx_obj_7pyarrow_3lib_NativeFile), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_NativeFile) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_NativeFile = (struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_NativeFile->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_NativeFile)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_BufferReader = &__pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_BufferReader;
  __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_BufferReader.__pyx_base = *__pyx_vtabptr_7pyarrow_3lib_NativeFile;
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader.tp_base = __pyx_ptype_7pyarrow_3lib_NativeFile;
  if (PyType_Ready(&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader.tp_dictoffset && __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader.tp_dict, __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_BufferReader) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferReader, (PyObject *)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  if (__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader.tp_weaklistoffset == 0) __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader.tp_weaklistoffset = offsetof(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferReader, __pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_BufferReader = &__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferReader;
  __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_BufferWriter = &__pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_BufferWriter;
  __pyx_vtable_4cudf_6_libxx_5arrow_5_cuda_BufferWriter.__pyx_base = *__pyx_vtabptr_7pyarrow_3lib_NativeFile;
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter.tp_base = __pyx_ptype_7pyarrow_3lib_NativeFile;
  if (PyType_Ready(&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter.tp_dictoffset && __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter.tp_dict, __pyx_vtabptr_4cudf_6_libxx_5arrow_5_cuda_BufferWriter) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferWriter, (PyObject *)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
  if (__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter.tp_weaklistoffset == 0) __pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter.tp_weaklistoffset = offsetof(struct __pyx_obj_4cudf_6_libxx_5arrow_5_cuda_BufferWriter, __pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
  __pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_BufferWriter = &__pyx_type_4cudf_6_libxx_5arrow_5_cuda_BufferWriter;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(3, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(4, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyarrow.lib"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyarrow_3lib_Message = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Message", sizeof(struct __pyx_obj_7pyarrow_3lib_Message), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Message) __PYX_ERR(5, 36, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MemoryPool = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "MemoryPool", sizeof(struct __pyx_obj_7pyarrow_3lib_MemoryPool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_MemoryPool) __PYX_ERR(5, 41, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MemoryPool = (struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MemoryPool->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MemoryPool)) __PYX_ERR(5, 41, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DataType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "DataType", sizeof(struct __pyx_obj_7pyarrow_3lib_DataType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_DataType) __PYX_ERR(5, 51, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DataType = (struct __pyx_vtabstruct_7pyarrow_3lib_DataType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DataType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DataType)) __PYX_ERR(5, 51, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ListType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "ListType", sizeof(struct __pyx_obj_7pyarrow_3lib_ListType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_ListType) __PYX_ERR(5, 62, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ListType = (struct __pyx_vtabstruct_7pyarrow_3lib_ListType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ListType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ListType)) __PYX_ERR(5, 62, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_LargeListType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "LargeListType", sizeof(struct __pyx_obj_7pyarrow_3lib_LargeListType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_LargeListType) __PYX_ERR(5, 67, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_LargeListType = (struct __pyx_vtabstruct_7pyarrow_3lib_LargeListType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_LargeListType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_LargeListType)) __PYX_ERR(5, 67, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StructType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "StructType", sizeof(struct __pyx_obj_7pyarrow_3lib_StructType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_StructType) __PYX_ERR(5, 72, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StructType = (struct __pyx_vtabstruct_7pyarrow_3lib_StructType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StructType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StructType)) __PYX_ERR(5, 72, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DictionaryMemo = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "DictionaryMemo", sizeof(struct __pyx_obj_7pyarrow_3lib_DictionaryMemo), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_DictionaryMemo) __PYX_ERR(5, 80, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DictionaryType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "DictionaryType", sizeof(struct __pyx_obj_7pyarrow_3lib_DictionaryType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_DictionaryType) __PYX_ERR(5, 88, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DictionaryType = (struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DictionaryType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DictionaryType)) __PYX_ERR(5, 88, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_TimestampType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "TimestampType", sizeof(struct __pyx_obj_7pyarrow_3lib_TimestampType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_TimestampType) __PYX_ERR(5, 93, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_TimestampType = (struct __pyx_vtabstruct_7pyarrow_3lib_TimestampType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_TimestampType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_TimestampType)) __PYX_ERR(5, 93, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Time32Type = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Time32Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Time32Type), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Time32Type) __PYX_ERR(5, 98, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Time32Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Time32Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Time32Type->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Time32Type)) __PYX_ERR(5, 98, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Time64Type = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Time64Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Time64Type), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Time64Type) __PYX_ERR(5, 103, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Time64Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Time64Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Time64Type->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Time64Type)) __PYX_ERR(5, 103, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "FixedSizeBinaryType", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType) __PYX_ERR(5, 108, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryType = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryType)) __PYX_ERR(5, 108, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal128Type = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Decimal128Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal128Type), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Decimal128Type) __PYX_ERR(5, 113, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal128Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal128Type->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal128Type)) __PYX_ERR(5, 113, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BaseExtensionType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "BaseExtensionType", sizeof(struct __pyx_obj_7pyarrow_3lib_BaseExtensionType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_BaseExtensionType) __PYX_ERR(5, 118, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BaseExtensionType = (struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BaseExtensionType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BaseExtensionType)) __PYX_ERR(5, 118, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ExtensionType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "ExtensionType", sizeof(struct __pyx_obj_7pyarrow_3lib_ExtensionType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_ExtensionType) __PYX_ERR(5, 123, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ExtensionType = (struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ExtensionType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ExtensionType)) __PYX_ERR(5, 123, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_PyExtensionType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "PyExtensionType", sizeof(struct __pyx_obj_7pyarrow_3lib_PyExtensionType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_PyExtensionType) __PYX_ERR(5, 128, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_PyExtensionType = (struct __pyx_vtabstruct_7pyarrow_3lib_PyExtensionType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_PyExtensionType->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_PyExtensionType)) __PYX_ERR(5, 128, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Field = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Field", sizeof(struct __pyx_obj_7pyarrow_3lib_Field), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Field) __PYX_ERR(5, 132, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Field = (struct __pyx_vtabstruct_7pyarrow_3lib_Field*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Field->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Field)) __PYX_ERR(5, 132, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Schema = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Schema", sizeof(struct __pyx_obj_7pyarrow_3lib_Schema), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Schema) __PYX_ERR(5, 143, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Schema = (struct __pyx_vtabstruct_7pyarrow_3lib_Schema*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Schema->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Schema)) __PYX_ERR(5, 143, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Scalar = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Scalar", sizeof(struct __pyx_obj_7pyarrow_3lib_Scalar), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Scalar) __PYX_ERR(5, 152, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_NAType = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "NAType", sizeof(struct __pyx_obj_7pyarrow_3lib_NAType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_NAType) __PYX_ERR(5, 157, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ArrayValue = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "ArrayValue", sizeof(struct __pyx_obj_7pyarrow_3lib_ArrayValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_ArrayValue) __PYX_ERR(5, 161, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ArrayValue = (struct __pyx_vtabstruct_7pyarrow_3lib_ArrayValue*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ArrayValue->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ArrayValue)) __PYX_ERR(5, 161, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ScalarValue = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "ScalarValue", sizeof(struct __pyx_obj_7pyarrow_3lib_ScalarValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_ScalarValue) __PYX_ERR(5, 171, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ScalarValue = (struct __pyx_vtabstruct_7pyarrow_3lib_ScalarValue*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ScalarValue->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ScalarValue)) __PYX_ERR(5, 171, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int8Value = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Int8Value", sizeof(struct __pyx_obj_7pyarrow_3lib_Int8Value), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Int8Value) __PYX_ERR(5, 177, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int8Value = (struct __pyx_vtabstruct_7pyarrow_3lib_Int8Value*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int8Value->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int8Value)) __PYX_ERR(5, 177, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int64Value = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Int64Value", sizeof(struct __pyx_obj_7pyarrow_3lib_Int64Value), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Int64Value) __PYX_ERR(5, 181, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int64Value = (struct __pyx_vtabstruct_7pyarrow_3lib_Int64Value*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int64Value->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int64Value)) __PYX_ERR(5, 181, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ListValue = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "ListValue", sizeof(struct __pyx_obj_7pyarrow_3lib_ListValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_ListValue) __PYX_ERR(5, 185, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ListValue = (struct __pyx_vtabstruct_7pyarrow_3lib_ListValue*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ListValue->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ListValue)) __PYX_ERR(5, 185, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_LargeListValue = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "LargeListValue", sizeof(struct __pyx_obj_7pyarrow_3lib_LargeListValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_LargeListValue) __PYX_ERR(5, 196, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_LargeListValue = (struct __pyx_vtabstruct_7pyarrow_3lib_LargeListValue*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_LargeListValue->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_LargeListValue)) __PYX_ERR(5, 196, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StructValue = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "StructValue", sizeof(struct __pyx_obj_7pyarrow_3lib_StructValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_StructValue) __PYX_ERR(5, 207, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StructValue = (struct __pyx_vtabstruct_7pyarrow_3lib_StructValue*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StructValue->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StructValue)) __PYX_ERR(5, 207, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UnionValue = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "UnionValue", sizeof(struct __pyx_obj_7pyarrow_3lib_UnionValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_UnionValue) __PYX_ERR(5, 212, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UnionValue = (struct __pyx_vtabstruct_7pyarrow_3lib_UnionValue*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UnionValue->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UnionValue)) __PYX_ERR(5, 212, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StringValue = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "StringValue", sizeof(struct __pyx_obj_7pyarrow_3lib_StringValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_StringValue) __PYX_ERR(5, 220, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StringValue = (struct __pyx_vtabstruct_7pyarrow_3lib_StringValue*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StringValue->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StringValue)) __PYX_ERR(5, 220, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeBinaryValue = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "FixedSizeBinaryValue", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryValue) __PYX_ERR(5, 224, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryValue = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryValue*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryValue->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryValue)) __PYX_ERR(5, 224, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__PandasConvertible = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "_PandasConvertible", sizeof(struct __pyx_obj_7pyarrow_3lib__PandasConvertible), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib__PandasConvertible) __PYX_ERR(5, 228, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Array) __PYX_ERR(5, 232, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Array)) __PYX_ERR(5, 232, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Tensor = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Tensor", sizeof(struct __pyx_obj_7pyarrow_3lib_Tensor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Tensor) __PYX_ERR(5, 248, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Tensor = (struct __pyx_vtabstruct_7pyarrow_3lib_Tensor*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Tensor->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Tensor)) __PYX_ERR(5, 248, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseTensorCSR = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "SparseTensorCSR", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseTensorCSR), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_SparseTensorCSR) __PYX_ERR(5, 259, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseTensorCSR = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseTensorCSR*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseTensorCSR->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseTensorCSR)) __PYX_ERR(5, 259, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseTensorCOO = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "SparseTensorCOO", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseTensorCOO), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_SparseTensorCOO) __PYX_ERR(5, 270, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseTensorCOO = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseTensorCOO*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseTensorCOO->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseTensorCOO)) __PYX_ERR(5, 270, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_NullArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "NullArray", sizeof(struct __pyx_obj_7pyarrow_3lib_NullArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_NullArray) __PYX_ERR(5, 281, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_NullArray = (struct __pyx_vtabstruct_7pyarrow_3lib_NullArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_NullArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_NullArray)) __PYX_ERR(5, 281, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BooleanArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "BooleanArray", sizeof(struct __pyx_obj_7pyarrow_3lib_BooleanArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_BooleanArray) __PYX_ERR(5, 285, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BooleanArray = (struct __pyx_vtabstruct_7pyarrow_3lib_BooleanArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BooleanArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BooleanArray)) __PYX_ERR(5, 285, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_NumericArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "NumericArray", sizeof(struct __pyx_obj_7pyarrow_3lib_NumericArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_NumericArray) __PYX_ERR(5, 289, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_NumericArray = (struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_NumericArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_NumericArray)) __PYX_ERR(5, 289, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_IntegerArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "IntegerArray", sizeof(struct __pyx_obj_7pyarrow_3lib_IntegerArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_IntegerArray) __PYX_ERR(5, 293, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_IntegerArray = (struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_IntegerArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_IntegerArray)) __PYX_ERR(5, 293, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FloatingPointArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "FloatingPointArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FloatingPointArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_FloatingPointArray) __PYX_ERR(5, 297, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FloatingPointArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FloatingPointArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FloatingPointArray)) __PYX_ERR(5, 297, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int8Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Int8Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int8Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Int8Array) __PYX_ERR(5, 301, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int8Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int8Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int8Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int8Array)) __PYX_ERR(5, 301, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt8Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "UInt8Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt8Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_UInt8Array) __PYX_ERR(5, 305, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt8Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt8Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt8Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt8Array)) __PYX_ERR(5, 305, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int16Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Int16Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int16Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Int16Array) __PYX_ERR(5, 309, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int16Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int16Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int16Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int16Array)) __PYX_ERR(5, 309, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt16Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "UInt16Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt16Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_UInt16Array) __PYX_ERR(5, 313, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt16Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt16Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt16Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt16Array)) __PYX_ERR(5, 313, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int32Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Int32Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int32Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Int32Array) __PYX_ERR(5, 317, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int32Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int32Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int32Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int32Array)) __PYX_ERR(5, 317, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt32Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "UInt32Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt32Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_UInt32Array) __PYX_ERR(5, 321, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt32Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt32Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt32Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt32Array)) __PYX_ERR(5, 321, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int64Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Int64Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int64Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Int64Array) __PYX_ERR(5, 325, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int64Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int64Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int64Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int64Array)) __PYX_ERR(5, 325, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt64Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "UInt64Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt64Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_UInt64Array) __PYX_ERR(5, 329, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt64Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt64Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt64Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt64Array)) __PYX_ERR(5, 329, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_HalfFloatArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "HalfFloatArray", sizeof(struct __pyx_obj_7pyarrow_3lib_HalfFloatArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_HalfFloatArray) __PYX_ERR(5, 333, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_HalfFloatArray = (struct __pyx_vtabstruct_7pyarrow_3lib_HalfFloatArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_HalfFloatArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_HalfFloatArray)) __PYX_ERR(5, 333, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FloatArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "FloatArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FloatArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_FloatArray) __PYX_ERR(5, 337, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FloatArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FloatArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FloatArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FloatArray)) __PYX_ERR(5, 337, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DoubleArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "DoubleArray", sizeof(struct __pyx_obj_7pyarrow_3lib_DoubleArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_DoubleArray) __PYX_ERR(5, 341, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DoubleArray = (struct __pyx_vtabstruct_7pyarrow_3lib_DoubleArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DoubleArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DoubleArray)) __PYX_ERR(5, 341, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "FixedSizeBinaryArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray) __PYX_ERR(5, 345, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryArray)) __PYX_ERR(5, 345, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal128Array = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Decimal128Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal128Array), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Decimal128Array) __PYX_ERR(5, 349, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal128Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal128Array->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal128Array)) __PYX_ERR(5, 349, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StructArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "StructArray", sizeof(struct __pyx_obj_7pyarrow_3lib_StructArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_StructArray) __PYX_ERR(5, 353, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StructArray = (struct __pyx_vtabstruct_7pyarrow_3lib_StructArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StructArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StructArray)) __PYX_ERR(5, 353, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ListArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "ListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ListArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_ListArray) __PYX_ERR(5, 357, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ListArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ListArray)) __PYX_ERR(5, 357, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_LargeListArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "LargeListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_LargeListArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_LargeListArray) __PYX_ERR(5, 361, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_LargeListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_LargeListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_LargeListArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_LargeListArray)) __PYX_ERR(5, 361, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UnionArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "UnionArray", sizeof(struct __pyx_obj_7pyarrow_3lib_UnionArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_UnionArray) __PYX_ERR(5, 365, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UnionArray = (struct __pyx_vtabstruct_7pyarrow_3lib_UnionArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UnionArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UnionArray)) __PYX_ERR(5, 365, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StringArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "StringArray", sizeof(struct __pyx_obj_7pyarrow_3lib_StringArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_StringArray) __PYX_ERR(5, 369, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StringArray = (struct __pyx_vtabstruct_7pyarrow_3lib_StringArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StringArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StringArray)) __PYX_ERR(5, 369, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BinaryArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "BinaryArray", sizeof(struct __pyx_obj_7pyarrow_3lib_BinaryArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_BinaryArray) __PYX_ERR(5, 373, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BinaryArray = (struct __pyx_vtabstruct_7pyarrow_3lib_BinaryArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BinaryArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BinaryArray)) __PYX_ERR(5, 373, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DictionaryArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "DictionaryArray", sizeof(struct __pyx_obj_7pyarrow_3lib_DictionaryArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_DictionaryArray) __PYX_ERR(5, 377, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DictionaryArray = (struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DictionaryArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DictionaryArray)) __PYX_ERR(5, 377, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ExtensionArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "ExtensionArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ExtensionArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_ExtensionArray) __PYX_ERR(5, 382, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ExtensionArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ExtensionArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ExtensionArray)) __PYX_ERR(5, 382, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ChunkedArray = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "ChunkedArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ChunkedArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_ChunkedArray) __PYX_ERR(5, 392, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ChunkedArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ChunkedArray->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ChunkedArray)) __PYX_ERR(5, 392, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Table = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "Table", sizeof(struct __pyx_obj_7pyarrow_3lib_Table), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_Table) __PYX_ERR(5, 405, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Table = (struct __pyx_vtabstruct_7pyarrow_3lib_Table*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Table->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Table)) __PYX_ERR(5, 405, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_RecordBatch = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "RecordBatch", sizeof(struct __pyx_obj_7pyarrow_3lib_RecordBatch), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_RecordBatch) __PYX_ERR(5, 413, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_RecordBatch = (struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_RecordBatch->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_RecordBatch)) __PYX_ERR(5, 413, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ResizableBuffer = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "ResizableBuffer", sizeof(struct __pyx_obj_7pyarrow_3lib_ResizableBuffer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_ResizableBuffer) __PYX_ERR(5, 432, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ResizableBuffer = (struct __pyx_vtabstruct_7pyarrow_3lib_ResizableBuffer*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ResizableBuffer->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ResizableBuffer)) __PYX_ERR(5, 432, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BufferedInputStream = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "BufferedInputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_BufferedInputStream), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_BufferedInputStream) __PYX_ERR(5, 461, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BufferedInputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_BufferedInputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BufferedInputStream->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BufferedInputStream)) __PYX_ERR(5, 461, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BufferedOutputStream = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "BufferedOutputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_BufferedOutputStream) __PYX_ERR(5, 465, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BufferedOutputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_BufferedOutputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BufferedOutputStream->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BufferedOutputStream)) __PYX_ERR(5, 465, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_CompressedInputStream = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "CompressedInputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_CompressedInputStream), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_CompressedInputStream) __PYX_ERR(5, 469, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_CompressedInputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_CompressedInputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_CompressedInputStream->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_CompressedInputStream)) __PYX_ERR(5, 469, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_CompressedOutputStream = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "CompressedOutputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib_CompressedOutputStream) __PYX_ERR(5, 473, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_CompressedOutputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_CompressedOutputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_CompressedOutputStream->tp_dict); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_CompressedOutputStream)) __PYX_ERR(5, 473, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__CRecordBatchWriter = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "_CRecordBatchWriter", sizeof(struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib__CRecordBatchWriter) __PYX_ERR(5, 477, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__CRecordBatchReader = __Pyx_ImportType(__pyx_t_1, "pyarrow.lib", "_CRecordBatchReader", sizeof(struct __pyx_obj_7pyarrow_3lib__CRecordBatchReader), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyarrow_3lib__CRecordBatchReader) __PYX_ERR(5, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("pyarrow.lib"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "check_status", (void (**)(void))&__pyx_f_7pyarrow_3lib_check_status, "int (arrow::Status const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "maybe_unbox_memory_pool", (void (**)(void))&__pyx_f_7pyarrow_3lib_maybe_unbox_memory_pool, " arrow::MemoryPool *(struct __pyx_obj_7pyarrow_3lib_MemoryPool *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "pyarrow_wrap_batch", (void (**)(void))&__pyx_f_7pyarrow_3lib_pyarrow_wrap_batch, "PyObject *(std::shared_ptr< arrow::RecordBatch>  const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "pyarrow_wrap_buffer", (void (**)(void))&__pyx_f_7pyarrow_3lib_pyarrow_wrap_buffer, "PyObject *(std::shared_ptr< arrow::Buffer>  const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "pyarrow_unwrap_batch", (void (**)(void))&__pyx_f_7pyarrow_3lib_pyarrow_unwrap_batch, "std::shared_ptr< arrow::RecordBatch>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "pyarrow_unwrap_buffer", (void (**)(void))&__pyx_f_7pyarrow_3lib_pyarrow_unwrap_buffer, "std::shared_ptr< arrow::Buffer>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "pyarrow_unwrap_schema", (void (**)(void))&__pyx_f_7pyarrow_3lib_pyarrow_unwrap_schema, "std::shared_ptr< arrow::Schema>  (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_cuda(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_cuda(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__cuda(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__cuda(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__cuda(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_cuda' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__cuda(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_cuda", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cudf___libxx__arrow___cuda) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cudf._libxx.arrow._cuda")) {
      if (unlikely(PyDict_SetItemString(modules, "cudf._libxx.arrow._cuda", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cudf/_libxx/arrow/_cuda.pyx":23
 * from __future__ import absolute_import
 * 
 * from pyarrow.compat import tobytes             # <<<<<<<<<<<<<<
 * from pyarrow.lib cimport *
 * #from pyarrow.includes.libarrow_cuda cimport *
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_tobytes);
  __Pyx_GIVEREF(__pyx_n_s_tobytes);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_tobytes);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pyarrow_compat, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_tobytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tobytes, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":27
 * #from pyarrow.includes.libarrow_cuda cimport *
 * from cudf._libxx.cpp.arrow.libarrow_cuda cimport *
 * from pyarrow.lib import py_buffer, allocate_buffer, as_buffer, ArrowTypeError             # <<<<<<<<<<<<<<
 * from pyarrow.util import get_contiguous_span
 * cimport cpython as cp
 */
  __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_py_buffer);
  __Pyx_GIVEREF(__pyx_n_s_py_buffer);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_py_buffer);
  __Pyx_INCREF(__pyx_n_s_allocate_buffer);
  __Pyx_GIVEREF(__pyx_n_s_allocate_buffer);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_allocate_buffer);
  __Pyx_INCREF(__pyx_n_s_as_buffer);
  __Pyx_GIVEREF(__pyx_n_s_as_buffer);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_as_buffer);
  __Pyx_INCREF(__pyx_n_s_ArrowTypeError);
  __Pyx_GIVEREF(__pyx_n_s_ArrowTypeError);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_ArrowTypeError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pyarrow_lib, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_py_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_buffer, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_allocate_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_allocate_buffer, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_as_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_as_buffer, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ArrowTypeError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ArrowTypeError, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":28
 * from cudf._libxx.cpp.arrow.libarrow_cuda cimport *
 * from pyarrow.lib import py_buffer, allocate_buffer, as_buffer, ArrowTypeError
 * from pyarrow.util import get_contiguous_span             # <<<<<<<<<<<<<<
 * cimport cpython as cp
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_get_contiguous_span);
  __Pyx_GIVEREF(__pyx_n_s_get_contiguous_span);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_get_contiguous_span);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pyarrow_util, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_get_contiguous_span); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_contiguous_span, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":72
 * 
 *     @staticmethod
 *     def from_numba(context=None):             # <<<<<<<<<<<<<<
 *         """
 *         Create a Context instance from a Numba CUDA context.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_7Context_5from_numba, NULL, __pyx_n_s_cudf__libxx_arrow__cuda); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context->tp_dict, __pyx_n_s_from_numba, __pyx_t_2) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context);

  /* "cudf/_libxx/arrow/_cuda.pyx":71
 *         self.device_number = device_number
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_numba(context=None):
 *         """
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context, __pyx_n_s_from_numba); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context->tp_dict, __pyx_n_s_from_numba, __pyx_t_1) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context);

  /* "cudf/_libxx/arrow/_cuda.pyx":117
 * 
 *     @staticmethod
 *     def get_num_devices():             # <<<<<<<<<<<<<<
 *         """ Return the number of GPU devices.
 *         """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_7Context_9get_num_devices, NULL, __pyx_n_s_cudf__libxx_arrow__cuda); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context->tp_dict, __pyx_n_s_get_num_devices, __pyx_t_1) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context);

  /* "cudf/_libxx/arrow/_cuda.pyx":116
 *         return context
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def get_num_devices():
 *         """ Return the number of GPU devices.
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context, __pyx_n_s_get_num_devices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context->tp_dict, __pyx_n_s_get_num_devices, __pyx_t_2) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_Context);

  /* "cudf/_libxx/arrow/_cuda.pyx":345
 * 
 *     @staticmethod
 *     def from_buffer(Buffer opaque_handle):             # <<<<<<<<<<<<<<
 *         """Create IpcMemHandle from opaque buffer (e.g. from another
 *         process)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_12IpcMemHandle_1from_buffer, NULL, __pyx_n_s_cudf__libxx_arrow__cuda); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle->tp_dict, __pyx_n_s_from_buffer, __pyx_t_2) < 0) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle);

  /* "cudf/_libxx/arrow/_cuda.pyx":344
 *         self.handle = h
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_buffer(Buffer opaque_handle):
 *         """Create IpcMemHandle from opaque buffer (e.g. from another
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle, __pyx_n_s_from_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle->tp_dict, __pyx_n_s_from_buffer, __pyx_t_1) < 0) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_IpcMemHandle);

  /* "cudf/_libxx/arrow/_cuda.pyx":405
 * 
 *     @staticmethod
 *     def from_buffer(buf):             # <<<<<<<<<<<<<<
 *         """ Convert back generic buffer into CudaBuffer
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_3from_buffer, NULL, __pyx_n_s_cudf__libxx_arrow__cuda); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer->tp_dict, __pyx_n_s_from_buffer, __pyx_t_1) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer);

  /* "cudf/_libxx/arrow/_cuda.pyx":404
 *         self.base = base
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_buffer(buf):
 *         """ Convert back generic buffer into CudaBuffer
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, __pyx_n_s_from_buffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer->tp_dict, __pyx_n_s_from_buffer, __pyx_t_2) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer);

  /* "cudf/_libxx/arrow/_cuda.pyx":424
 * 
 *     @staticmethod
 *     def from_numba(mem):             # <<<<<<<<<<<<<<
 *         """Create a CudaBuffer view from numba MemoryPointer instance.
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_10CudaBuffer_5from_numba, NULL, __pyx_n_s_cudf__libxx_arrow__cuda); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer->tp_dict, __pyx_n_s_from_numba, __pyx_t_2) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer);

  /* "cudf/_libxx/arrow/_cuda.pyx":423
 *         return pyarrow_wrap_cudabuffer(cbuf)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_numba(mem):
 *         """Create a CudaBuffer view from numba MemoryPointer instance.
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer, __pyx_n_s_from_numba); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer->tp_dict, __pyx_n_s_from_numba, __pyx_t_1) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4cudf_6_libxx_5arrow_5_cuda_CudaBuffer);

  /* "cudf/_libxx/arrow/_cuda.pyx":853
 * 
 * 
 * def new_host_buffer(const int64_t size, int device=0):             # <<<<<<<<<<<<<<
 *     """Return buffer with CUDA-accessible memory on CPU host
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_1new_host_buffer, NULL, __pyx_n_s_cudf__libxx_arrow__cuda); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_new_host_buffer, __pyx_t_1) < 0) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":873
 * 
 * 
 * def serialize_record_batch(object batch, object ctx):             # <<<<<<<<<<<<<<
 *     """ Write record batch message to GPU device memory
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_3serialize_record_batch, NULL, __pyx_n_s_cudf__libxx_arrow__cuda); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_serialize_record_batch, __pyx_t_1) < 0) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":896
 * 
 * 
 * def read_message(object source, pool=None):             # <<<<<<<<<<<<<<
 *     """ Read Arrow IPC message located on GPU device
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_5read_message, NULL, __pyx_n_s_cudf__libxx_arrow__cuda); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_message, __pyx_t_1) < 0) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":920
 * 
 * 
 * def read_record_batch(object buffer, object schema, pool=None):             # <<<<<<<<<<<<<<
 *     """Construct RecordBatch referencing IPC message located on CUDA device.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cudf_6_libxx_5arrow_5_cuda_7read_record_batch, NULL, __pyx_n_s_cudf__libxx_arrow__cuda); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_record_batch, __pyx_t_1) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cudf/_libxx/arrow/_cuda.pyx":1
 * # Licensed to the Apache Software Foundation (ASF) under one             # <<<<<<<<<<<<<<
 * # or more contributor license agreements.  See the NOTICE file
 * # distributed with this work for additional information
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyarrow/includes/common.pxd":82
 *     T GetResultValue[T](CResult[T]) except *
 * 
 * cdef inline object PyObject_to_object(PyObject* o):             # <<<<<<<<<<<<<<
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cudf._libxx.arrow._cuda", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cudf._libxx.arrow._cuda");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto __PYX_BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto __PYX_BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
